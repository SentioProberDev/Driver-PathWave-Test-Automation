<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTap</name>
    </assembly>
    <members>
        <member name="T:OpenTap.IAnnotator">
            <summary> Annotators can be used to annotation objects with data for display. </summary>
        </member>
        <member name="P:OpenTap.IAnnotator.Priority">
            <summary> The priority of this annotator. Specifies which orders annotations are added. </summary>
        </member>
        <member name="M:OpenTap.IAnnotator.Annotate(OpenTap.AnnotationCollection)">
            <summary> Implements annotation for an object. </summary>
            <param name="annotations">The current collection of annotations for an object. This method can add to the collection.</param>
        </member>
        <member name="T:OpenTap.IAnnotation">
            <summary>
            Marker interface to indicate that a type represents annotation data for an object.
            </summary>
        </member>
        <member name="T:OpenTap.IDisplayAnnotation">
            <summary> Specifies how a display is implemented and presented to user </summary>
        </member>
        <member name="P:OpenTap.IDisplayAnnotation.Description">
            <summary> Optional text that provides a description of the item. </summary>
        </member>
        <member name="P:OpenTap.IDisplayAnnotation.Group">
            <summary> Optional text used to group displayed items. </summary>
        </member>
        <member name="P:OpenTap.IDisplayAnnotation.Name">
            <summary> Name displayed by the UI. </summary>
        </member>
        <member name="P:OpenTap.IDisplayAnnotation.Order">
            <summary> Optional integer that ranks items and groups in ascending order relative to other items/groups. 
            Default is -10000. For a group, the order is the average order of the elements inside the group. 
            Any double value is allowed. Items with same order are ranked alphabetically.
            </summary>
        </member>
        <member name="P:OpenTap.IDisplayAnnotation.Collapsed">
            <summary> Boolean setting that indicates whether a group's default appearance is collapsed. </summary>
        </member>
        <member name="T:OpenTap.IObjectValueAnnotation">
            <summary> Gets or sets the value of a thing. </summary>
        </member>
        <member name="P:OpenTap.IObjectValueAnnotation.Value">
            <summary> Gets or sets the current value. Note, for the value to be written to the owner object, Annotation.Write has to be called.</summary>
        </member>
        <member name="T:OpenTap.IAvailableValuesAnnotationProxy">
            <summary> Specifies how available values proxies are implemented. This class should rarely be implemented. Consider implementing just IAvailableValuesAnnotation instead.</summary>
        </member>
        <member name="P:OpenTap.IAvailableValuesAnnotationProxy.AvailableValues">
            <summary> Annotated available values. </summary>
        </member>
        <member name="P:OpenTap.IAvailableValuesAnnotationProxy.SelectedValue">
            <summary> Annotated selected value. Not this should belong to the set of AvailableValues as well.</summary>
        </member>
        <member name="T:OpenTap.ISuggestedValuesAnnotationProxy">
            <summary> Specifies how suggested value proxies are implemented. This class should rarely be implemented. Consider implementing just ISuggestedValuesAnnotation instead.</summary>
        </member>
        <member name="P:OpenTap.ISuggestedValuesAnnotationProxy.SuggestedValues">
            <summary>
            Annotated suggested values.
            </summary>
        </member>
        <member name="P:OpenTap.ISuggestedValuesAnnotationProxy.SelectedValue">
            <summary>
            Annotated selected value.
            </summary>
        </member>
        <member name="T:OpenTap.IMultiSelectAnnotationProxy">
            <summary>Specifies how multi selection annotation proxies are implemented. Not this should rarely need to be implemented </summary>
        </member>
        <member name="P:OpenTap.IMultiSelectAnnotationProxy.SelectedValues">
            <summary> The annotated selected values. </summary>
        </member>
        <member name="T:OpenTap.IAvailableValuesAnnotation">
            <summary>
            Defines a available values implementation. Implement this to extend the data annotation system with a new available values.
            </summary>
        </member>
        <member name="P:OpenTap.IAvailableValuesAnnotation.AvailableValues">
            <summary> The available values. </summary>
        </member>
        <member name="T:OpenTap.IAvailableValuesSelectedAnnotation">
            <summary>
            Enhances the IAvailableValuesAnnotation with a 'SelectedValue'. Having this ensures that objects that has been transformed can get read back in the correct way.
            </summary>
        </member>
        <member name="P:OpenTap.IAvailableValuesSelectedAnnotation.SelectedValue">
            <summary> Gets or sets the selected value. </summary>
        </member>
        <member name="T:OpenTap.ISuggestedValuesAnnotation">
            <summary> Defines a suggested values implementation.  </summary>
        </member>
        <member name="P:OpenTap.ISuggestedValuesAnnotation.SuggestedValues">
            <summary> The currently suggested values </summary>
        </member>
        <member name="T:OpenTap.IStringValueAnnotation">
            <summary>
            Defines a string value annotation implementation. This can be implemented for any type which can be converted to/from a string value. Note: IStringReadOnlyValueAnnotation can be implemented in the read-only case.
            </summary>
        </member>
        <member name="P:OpenTap.IStringValueAnnotation.Value">
            <summary> The string value representation of an object. The setter can throw an exception if the format is not correctly used. </summary>
        </member>
        <member name="T:OpenTap.ICopyStringValueAnnotation">
            <summary>
            If the object value is based on copying values, some performance optimizations can be done, so these string value annotations can be marked with this interface.
            </summary>
        </member>
        <member name="T:OpenTap.IStringReadOnlyValueAnnotation">
            <summary> Defines a read-only string value annotation implementation. </summary>
        </member>
        <member name="P:OpenTap.IStringReadOnlyValueAnnotation.Value">
            <summary> The string value representation of the object. </summary>
        </member>
        <member name="T:OpenTap.IStringExampleValueAnnotation">
            <summary> Makes it possible to get an example of a value from a property. </summary>
        </member>
        <member name="P:OpenTap.IStringExampleValueAnnotation.Example">
            <summary> Gets an example of what the current value could be. </summary>
        </member>
        <member name="T:OpenTap.IErrorAnnotation">
            <summary> Defines how an error annotation works. Note: Multiple of IErrorAnnotation can be used in the same annotation. In this case the erros will be concatenated. </summary>
        </member>
        <member name="P:OpenTap.IErrorAnnotation.Errors">
            <summary> The list of errors for this annotation. </summary>
        </member>
        <member name="T:OpenTap.IAccessAnnotation">
            <summary> Specifies the access to an annotation. </summary>
        </member>
        <member name="P:OpenTap.IAccessAnnotation.IsReadOnly">
            <summary> Gets if the annotation is read-only. This state can be temporary or permanent. </summary>
        </member>
        <member name="P:OpenTap.IAccessAnnotation.IsVisible">
            <summary> Gets if the annotation is visible. This state can be temporary or permanent. </summary>
        </member>
        <member name="T:OpenTap.IOwnedAnnotation">
            <summary>
            Owned annotations interacts directly with the source object. It is updated through the Read operation and changes are written with the Write operation. Specialized knowledge about the object is needed for implementation.
            </summary>
        </member>
        <member name="M:OpenTap.IOwnedAnnotation.Read(System.Object)">
            <summary> Read changes from the source. </summary>
            <param name="source"></param>
        </member>
        <member name="M:OpenTap.IOwnedAnnotation.Write(System.Object)">
            <summary> Write changes to the source. </summary>
            <param name="source"></param>
        </member>
        <member name="T:OpenTap.IMemberAnnotation">
            <summary> Marks that an annotation reflects a member of an object. </summary>
        </member>
        <member name="P:OpenTap.IMemberAnnotation.Member">
            <summary> Gets the member. </summary>
        </member>
        <member name="T:OpenTap.IReflectionAnnotation">
            <summary> Reflects the type of the object value being annotated.</summary>
        </member>
        <member name="P:OpenTap.IReflectionAnnotation.ReflectionInfo">
            <summary> The reflection info object. </summary>
        </member>
        <member name="T:OpenTap.IMultiSelect">
            <summary> The object can be used for multi select operations. Example: FlagAttribute enums can be multi-selected. </summary>
        </member>
        <member name="P:OpenTap.IMultiSelect.Selected">
            <summary> The currently selected values. </summary>
        </member>
        <member name="T:OpenTap.IMethodAnnotation">
            <summary> The annotation can be invoked to do some action. </summary> 
        </member>
        <member name="M:OpenTap.IMethodAnnotation.Invoke">
            <summary> Invokes the action.  </summary>
        </member>
        <member name="T:OpenTap.IBasicCollectionAnnotation">
            <summary> Specifies how to implement basic collection annotations. </summary>
        </member>
        <member name="P:OpenTap.IBasicCollectionAnnotation.Elements">
            <summary> he currently selected elements in the list. </summary>
        </member>
        <member name="T:OpenTap.IFixedSizeCollectionAnnotation">
            <summary> Used to mark a collection as fixed-size. </summary>
        </member>
        <member name="P:OpenTap.IFixedSizeCollectionAnnotation.IsFixedSize">
            <summary> Gets if the collection annotated is fixed size. </summary>
        </member>
        <member name="T:OpenTap.ICollectionAnnotation">
            <summary> Specifies that the annotation reflects some kind of collection.</summary>
        </member>
        <member name="P:OpenTap.ICollectionAnnotation.AnnotatedElements">
            <summary> The reflected elements. </summary>
        </member>
        <member name="M:OpenTap.ICollectionAnnotation.NewElement">
            <summary> Creates a new element that can be put into the collection. Note that initially the element should not be added to the collection. This task is for the user. </summary>
            <returns>The new element. </returns>
        </member>
        <member name="T:OpenTap.IMembersAnnotation">
            <summary> The annotation reflects multiple members on an object. </summary>
        </member>
        <member name="P:OpenTap.IMembersAnnotation.Members">
            <summary> The reflected members. </summary>
        </member>
        <member name="T:OpenTap.INamedMembersAnnotation">
            <summary> Like IMembersAnnotation, but a specific member can be fetched.</summary>
        </member>
        <member name="M:OpenTap.INamedMembersAnnotation.GetMember(OpenTap.IMemberData)">
            <summary> Returns the annotated member. </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.AnnotationIgnoreAttribute">
            <summary> Marks that a property should be ignored when annotating members.
            This can be applied as an optimization to properties in order to improve annotation performance. </summary>
        </member>
        <member name="T:OpenTap.IForwardedAnnotations">
            <summary> Can be used to forward a set of members from one annotation to another.</summary>
        </member>
        <member name="P:OpenTap.IForwardedAnnotations.Forwarded">
            <summary> The forwarded annotations. </summary>
        </member>
        <member name="T:OpenTap.IValueDescriptionAnnotation">
            <summary> Interface for providing annotations with a way of explaining the value. </summary>
        </member>
        <member name="M:OpenTap.IValueDescriptionAnnotation.Describe">
            <summary> Description of a value. </summary>
            <returns>A string describing the current value.</returns>
        </member>
        <member name="T:OpenTap.IEnabledAnnotation">
            <summary> Annotation for marking something as enabled or disabled. </summary>
        </member>
        <member name="P:OpenTap.IEnabledAnnotation.IsEnabled">
            <summary> Gets if an annotation is enabled. </summary>
        </member>
        <member name="T:OpenTap.ReadOnlyMemberAnnotation">
            <summary>
            Annotates that a member is read only.
            </summary>
        </member>
        <member name="P:OpenTap.ReadOnlyMemberAnnotation.IsReadOnly">
            <summary> Always returns true.</summary>
        </member>
        <member name="P:OpenTap.ReadOnlyMemberAnnotation.IsVisible">
            <summary> Always returns true.</summary>
        </member>
        <member name="T:OpenTap.IHideOnMultiSelectAnnotation">
            <summary>
            Marker interface that indicates that an IAnnotation does not support multi-selecting. 
            When multi-selecting, the UI should not show properties annotated with this. 
            </summary>
        </member>
        <member name="T:OpenTap.ManyToOneAnnotation.ManyToOneStringValueAnnotation">
            <summary>
            Some string value annotations does not work very well with multi-select
            to mitigate that, a ManyToOneStringValueAnnotation is used.
            one example is MacroString.
            </summary>
        </member>
        <member name="T:OpenTap.DefaultDataAnnotator">
            <summary> The default data annotator plugin. This normally forms the basis for annotation. </summary>
        </member>
        <member name="F:OpenTap.DefaultDataAnnotator.GenericSequenceAnnotation.invalidated">
            <summary>
            Invalidated means that the values needs to get re-evaluated.
            So it may be that the previous value is used if the values are the same.
            This is also why Read needs to be called even if invalidate gets set.
            </summary>
        </member>
        <member name="T:OpenTap.DefaultDataAnnotator.MetaDataPromptAnnotation">
            <summary>
            For annotating MetaDataPromptObjects. This is only used when running the test plan with AllowPromptMetaData enabled.
            </summary>
        </member>
        <member name="T:OpenTap.ProxyAnnotation">
            <summary> Proxy annotation for wrapping simpler annotation types. For example IAvailableValuesAnnotation is wrapped in a IAvailableValuesAnnotationProxy.</summary>
        </member>
        <member name="T:OpenTap.MultiObjectAnnotator">
            <summary>
            Used for wrapping multi selections of objects.
            </summary>
        </member>
        <member name="T:OpenTap.AnnotationResolver">
            <summary>
            Used for resolving data annotation. Loops through the various IDataAnnotator implementations.
            </summary>
        </member>
        <member name="P:OpenTap.AnnotationResolver.Annotations">
            <summary> The current annotation. </summary>
        </member>
        <member name="M:OpenTap.AnnotationResolver.#ctor">
            <summary> </summary>
        </member>
        <member name="M:OpenTap.AnnotationResolver.Iterate(OpenTap.AnnotationCollection)">
            <summary>
            Iterates through the data annotation process.
            </summary>
            <param name="annotation"></param>
        </member>
        <member name="T:OpenTap.AnnotationCollection">
            <summary> A collection of annotations. Used to store high-level information about an object. </summary>
        </member>
        <member name="M:OpenTap.AnnotationCollection.Clone">
            <summary> Creates a new shallow clone of the object. The Annotations list is clone, but the elements are not. </summary>
            <returns></returns>
        </member>
        <member name="P:OpenTap.AnnotationCollection.ParentAnnotation">
            <summary>
            The annotation that created this annotation.
            </summary>
        </member>
        <member name="P:OpenTap.AnnotationCollection.Source">
            <summary> The source object currently used for this annotation. </summary>
        </member>
        <member name="F:OpenTap.AnnotationCollection.Annotations">
            <summary>
            The list of annotation that the is object represents.
            </summary>
        </member>
        <member name="M:OpenTap.AnnotationCollection.#ctor">
            <summary> </summary>
        </member>
        <member name="M:OpenTap.AnnotationCollection.Add(OpenTap.IAnnotation)">
            <summary> Adds an annotation. </summary>
            <param name="annotation"></param>
        </member>
        <member name="M:OpenTap.AnnotationCollection.Add(OpenTap.IAnnotation[])">
            <summary> adds a list of annotations. </summary>
            <param name="elements"></param>
        </member>
        <member name="M:OpenTap.AnnotationCollection.AddRange(System.Collections.Generic.IEnumerable{OpenTap.IAnnotation})">
            <summary> adds a list of annotations. </summary>
            <param name="elements"></param>
        </member>
        <member name="M:OpenTap.AnnotationCollection.RemoveType``1">
            <summary>
            Removes all annotations of a specific type from the collection.
            </summary>
        </member>
        <member name="M:OpenTap.AnnotationCollection.Remove(OpenTap.IAnnotation)">
            <summary>
            Removes a specific annotation from the collection.
            </summary>
        </member>
        <member name="M:OpenTap.AnnotationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:OpenTap.AnnotationCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:OpenTap.AnnotationCollection.Get``1(System.Boolean,System.Object)">
            <summary>
            Gets the first annotation of a specific kind. Note this goes by the most-recently added principle. 
            </summary>
            <typeparam name="T">The kind of annotation to look for.</typeparam>
            <param name="recursive">Whether to include parent annotation search.</param>
            <param name="from">Where the search should start. </param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.AnnotationCollection.Read(System.Object)">
            <summary> Updates the annotation based on a source object. </summary>
            <param name="source"></param>
        </member>
        <member name="M:OpenTap.AnnotationCollection.Read">
            <summary> Updates the annotation based on that last specified source object. </summary>
        </member>
        <member name="M:OpenTap.AnnotationCollection.Write">
            <summary> Writes the annotation data to the last specified source object. </summary>
        </member>
        <member name="M:OpenTap.AnnotationCollection.Write(System.Object)">
            <summary> Writes the annotation data to a specific source object. </summary>
            <param name="target"></param>
        </member>
        <member name="M:OpenTap.AnnotationCollection.GetAll``1(System.Boolean)">
            <summary>
            Gets all the annotations of a specific kind.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.AnnotationCollection.Create(System.Object,OpenTap.IReflectionData,OpenTap.IAnnotation[])">
            <summary> Creates a new data annotation. </summary>
            <param name="object"></param>
            <param name="member"></param>
            <param name="extraAnnotations"></param>
            <returns></returns>
        </member>
        <member name="F:OpenTap.AnnotationCollection.ExtraAnnotations">
            <summary> Additional annotations added to the current one. </summary>
        </member>
        <member name="M:OpenTap.AnnotationCollection.Annotate(System.Object,OpenTap.IAnnotation[])">
            <summary>
            Annotates an object.
            </summary>
            <param name="object"></param>
            <param name="extraAnnotations"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.AnnotationCollection.AnnotateMember(OpenTap.IMemberData,System.Object,OpenTap.IAnnotation[])">
            <summary> Annotates a member of the object annotated by this. </summary>
            <param name="member"></param>
            <param name="Source"></param>
            <param name="extraAnnotations"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.AnnotationCollection.AnnotateMember(OpenTap.IMemberData,OpenTap.IAnnotation[])">
            <summary> Annotates a member of the object annotated by this. </summary>
            <param name="member"></param>
            <param name="extraAnnotations"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.AnnotationCollection.AnnotateSub(OpenTap.ITypeData,System.Object,OpenTap.IAnnotation[])">
            <summary> Annotates a sub-object of the object annotated by this. </summary>
            <param name="reflect"></param>
            <param name="obj"></param>
            <param name="extraAnnotations"></param>
            <returns></returns>
        </member>
        <member name="P:OpenTap.AnnotationCollection.Name">
            <summary> Print the display name of this level of the annotation.</summary>
        </member>
        <member name="M:OpenTap.AnnotationCollection.ToString">
            <summary> Creates a string from this. This is useful for debugging.</summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.AnnotationCollection.Insert(System.Int32,OpenTap.IAnnotation)">
            <summary> Insert an annotation at a location. </summary>
            <param name="index"></param>
            <param name="v"></param>
        </member>
        <member name="T:OpenTap.AnnotationExtensions">
            <summary> Helper methods for working with annotations. </summary>
        </member>
        <member name="M:OpenTap.AnnotationExtensions.GetMember(OpenTap.AnnotationCollection,System.String)">
            <summary> Recurse to find member annotation 'X.Y.Z'</summary>
        </member>
        <member name="M:OpenTap.AnnotationExtensions.GetIcon(OpenTap.AnnotationCollection,System.String)">
            <summary>  helper method to get the icon annotation collection. Will return null if the item could not be found. </summary>
        </member>
        <member name="T:OpenTap.IIconAnnotation">
            <summary> Icon annotation, for giving a name of an icon associated with a setting. This is optionally supported by GUIs.</summary>
        </member>
        <member name="P:OpenTap.IIconAnnotation.IconName">
            <summary> The name of the Icon. e.g OpenFile </summary>
        </member>
        <member name="T:OpenTap.IconAnnotationAttribute">
            <summary> Icon Annotation attribute. for attaching icon information to a setting. </summary>
        </member>
        <member name="P:OpenTap.IconAnnotationAttribute.IconName">
            <summary> The name of the Icon. </summary>
        </member>
        <member name="M:OpenTap.IconAnnotationAttribute.#ctor(System.String)">
            <summary> Create a new instance of IconAnnotationAttribute. </summary>
            <param name="iconName"></param>
        </member>
        <member name="T:OpenTap.IInteractiveIconAnnotation">
            <summary>
            For interactive icons that should be advertised on annotation collections.
            </summary>
        </member>
        <member name="P:OpenTap.IInteractiveIconAnnotation.Action">
            <summary> Reads the sub annotation representing the interactive icon action. It should contain an IMethodAnnotation. </summary>
        </member>
        <member name="T:OpenTap.ISettingReferenceIconAnnotation">
            <summary> Specialization of <see cref="T:OpenTap.IIconAnnotation"/> that represents a reference to a setting on another TestStep.</summary>
        </member>
        <member name="P:OpenTap.ISettingReferenceIconAnnotation.TestStepReference">
            <summary>
            The TestStep that holds the setting beeing referenced
            </summary>
        </member>
        <member name="P:OpenTap.ISettingReferenceIconAnnotation.MemberName">
            <summary>
            The name of the setting being referenced
            </summary>
        </member>
        <member name="P:OpenTap.ParameterizedIconAnnotation.IsEnabled">
            <summary> Parameterized properties are disabled is controlled by the parent parameter </summary>
        </member>
        <member name="P:OpenTap.InputIconAnnotation.IsEnabled">
            <summary> Inputs are disabled in the GUI and is controlled by the output parameter </summary>
        </member>
        <member name="T:OpenTap.AssemblyData">
            <summary>
            Representation of an assembly including its dependencies. Part of the object model used in the PluginManager
            </summary>
        </member>
        <member name="P:OpenTap.AssemblyData.Name">
            <summary>
            The name of the assembly. This is the same as the filename without extension
            </summary>
        </member>
        <member name="P:OpenTap.AssemblyData.Location">
            <summary>
            The file from which this assembly can be loaded. The information contained in this AssemblyData object comes from this file.
            </summary>
        </member>
        <member name="P:OpenTap.AssemblyData.Attributes">
            <summary> Gets the attributes of this .net assembly. </summary>
        </member>
        <member name="P:OpenTap.AssemblyData.PluginAssemblyAttribute">
            <summary>
            <see cref="P:OpenTap.AssemblyData.PluginAssemblyAttribute"/> decorating assembly, if included
            </summary>
        </member>
        <member name="P:OpenTap.AssemblyData.References">
            <summary>
            A list of Assemblies that this Assembly references.
            </summary>
        </member>
        <member name="P:OpenTap.AssemblyData.PluginTypes">
            <summary>
            Gets a list of plugin types that this Assembly defines
            </summary>
        </member>
        <member name="P:OpenTap.AssemblyData.Status">
            <summary> The loaded state of the assembly. </summary>
        </member>
        <member name="P:OpenTap.AssemblyData.Version">
            <summary>
            Gets the version of this Assembly. This will return null if the version cannot be parsed.
            </summary>
        </member>
        <member name="P:OpenTap.AssemblyData.SemanticVersion">
            <summary>
            Gets the version of this Assembly as a <see cref="P:OpenTap.AssemblyData.SemanticVersion"/>. Will return null if the version is not well formatted.
            </summary>
        </member>
        <member name="P:OpenTap.AssemblyData.RawVersion">
            <summary> Raw version as set by the assembly. </summary>
        </member>
        <member name="F:OpenTap.AssemblyData.preloadedAssembly">
            <summary>  Optionally set for preloaded assemblies.  </summary>
        </member>
        <member name="M:OpenTap.AssemblyData.Load">
            <summary>
            Returns the System.Reflection.Assembly corresponding to this. 
            If the assembly has not yet been loaded, this call will load it.
            </summary>
        </member>
        <member name="M:OpenTap.AssemblyData.ToString">
            <summary> Returns name and version as a string. </summary>
        </member>
        <member name="M:OpenTap.AssemblyFinder.SyncFiles">
            <summary>
            Updates the dll file cache
            </summary>
        </member>
        <member name="T:OpenTap.Authentication.AuthenticationSettings">
            <summary>  This class stores information about the logged in client. </summary>
        </member>
        <member name="P:OpenTap.Authentication.AuthenticationSettings.Tokens">
            <summary>
            Token store containing access and refresh tokens.
            These tokens are used in the HttpClients returned by <see cref="M:OpenTap.Authentication.AuthenticationSettings.GetClient(System.String,System.Boolean)"/> to authenticate requests.
            </summary>
        </member>
        <member name="M:OpenTap.Authentication.AuthenticationSettings.GetClient(System.String,System.Boolean)">
            <summary>
            Get preconfigured HttpClient with AuthenticationClientHandler.
            It is up to the caller of this method to control the lifetime of the HttpClient
            </summary>
            <param name="domain">An access token will attempt to be included which are valid against this domain.</param>
            <param name="withRetryPolicy">If the request should be retried in case of transient errors.</param>
            <returns>HttpClient object</returns>
        </member>
        <member name="T:OpenTap.Authentication.TokenInfo">
            <summary> 
            Represents a set of Oauth2/OpenID Connect jwt tokens (access and possibly refresh token) that grants access to a given domain.
            </summary>
        </member>
        <member name="P:OpenTap.Authentication.TokenInfo.AccessToken">
            <summary>
            Raw access token string. This value can be used as a Bearer token. The HttpClient 
            returned from <see cref="M:OpenTap.Authentication.AuthenticationSettings.GetClient(System.String,System.Boolean)"/> will automatically do 
            this for requests that go to domains that match <see cref="P:OpenTap.Authentication.TokenInfo.Domain"/>.
            </summary>
        </member>
        <member name="P:OpenTap.Authentication.TokenInfo.RefreshToken">
            <summary>
            Raw refresh token string. May be null if no refresh token is available.
            </summary>
        </member>
        <member name="P:OpenTap.Authentication.TokenInfo.Domain">
            <summary> 
            The site this token is intended for. Used by the HttpClient 
            returned from <see cref="M:OpenTap.Authentication.AuthenticationSettings.GetClient(System.String,System.Boolean)"/> to determine which TokenInfo
            in the <see cref="P:OpenTap.Authentication.AuthenticationSettings.Tokens"/> list to use for a given request.
            </summary>
        </member>
        <member name="P:OpenTap.Authentication.TokenInfo.Claims">
            <summary>
            Claims contained in the <see cref="P:OpenTap.Authentication.TokenInfo.AccessToken"/>.
            </summary>
        </member>
        <member name="P:OpenTap.Authentication.TokenInfo.Expiration">
            <summary> Expiration date of the <see cref="P:OpenTap.Authentication.TokenInfo.AccessToken"/>. </summary>
        </member>
        <member name="M:OpenTap.Authentication.TokenInfo.#ctor">
            <summary>
            Constructor used by serializer, please use constructor with arguments from user code.
            </summary>
        </member>
        <member name="M:OpenTap.Authentication.TokenInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor from user code
            </summary>
            <param name="access_token">The raw jwt token string for the access token</param>
            <param name="refresh_token">Access, Refresh or ID type</param>
            <param name="domain">Domain name for which this token is valid</param>
        </member>
        <member name="M:OpenTap.Authentication.TokenInfo.FromResponse(System.String,System.String)">
            <summary> Creates a TokenInfo object based on the given OAuth response (json format). </summary>
        </member>
        <member name="T:OpenTap.AvailableValuesAttribute">
            <summary>
            Marks that a property should be selected from a list in the UI.
            Points to another property that contains the list of possible values.
            </summary>
        </member>
        <member name="P:OpenTap.AvailableValuesAttribute.PropertyName">
            <summary> Gets the name of the property with available values.</summary>
        </member>
        <member name="M:OpenTap.AvailableValuesAttribute.#ctor(System.String)">
            <summary>
            Creates a new AvailableValuesAttribute that points to a property by name.
            </summary>
            <param name="propertyName">The name of the property with the possible values.</param>
        </member>
        <member name="T:OpenTap.SuggestedValuesAttribute">
            <summary>
            Marks that a property can be selected from a list in the UI.
            Points to another property that contains the list of suggested values.
            </summary>
        </member>
        <member name="F:OpenTap.SuggestedValuesAttribute.PropertyName">
            <summary> Gets the name of the property with suggested values.</summary>
        </member>
        <member name="M:OpenTap.SuggestedValuesAttribute.#ctor(System.String)">
            <summary>
            Creates a new SuggestedValuesAttribute that points to a property by name.
            </summary>
            <param name="propertyName">The name of the property with the suggested values.</param>
        </member>
        <member name="T:OpenTap.BigFloat">
            <summary> Arbitrary precision floating point numbers for exact numeric computations for when performance is not an issue. </summary>
        </member>
        <member name="F:OpenTap.BigFloat.Numerator">
            <summary> The numerator as an arbitrarily sized integer. </summary>
        </member>
        <member name="F:OpenTap.BigFloat.Denominator">
            <summary> The denominator as an arbitrarily sized integer. </summary>
        </member>
        <member name="M:OpenTap.BigFloat.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary> Creates a new BigFloat from fractional values. </summary>
            <param name="nominator"></param>
            <param name="denominator"></param>
        </member>
        <member name="M:OpenTap.BigFloat.Normalize">
            <summary> Normalizes the fraction by dividing by greates common divisor. </summary>
            <returns>The normalized fraction.</returns>
        </member>
        <member name="M:OpenTap.BigFloat.ToString">
            <summary> Converts the fraction to a decimal string. </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.BigFloat.Equals(OpenTap.BigFloat)">
            <summary> Compares two numbers. </summary>
            <param name="other"></param>
            <returns> True if they are equal. </returns>
        </member>
        <member name="M:OpenTap.BigFloat.Equals(System.Object)">
            <summary>
            Compares this bigfloat with another object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.BigFloat.GetHashCode">
            <summary>
            Gets the hash code of this value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.BigFloat.CompareTo(OpenTap.BigFloat)">
            <summary> Compares two numbers. </summary>
            <param name="other"></param>
            <returns>-1 if other is less, 1 if other is greater and 0 if other is equal to this.</returns>
        </member>
        <member name="M:OpenTap.BigFloat.CompareTo(System.Object)">
            <summary>
            Converts obj before doing comparison using CompareTo. Throws an exception if obj cannot be compared to a BigFloat.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:OpenTap.BigFloat.One">
            <summary> Big float 1. </summary>
        </member>
        <member name="M:OpenTap.BigFloat.Parse(System.String,System.IFormatProvider)">
            <summary> Supports parsing BigFloat without throwing an exception. Returns an exception in case something went wrong otherwise it will return a BigFloat.</summary>
            <param name="value"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="F:OpenTap.BigFloat.Zero">
            <summary> Big float 0. </summary>
        </member>
        <member name="F:OpenTap.BigFloat.Infinity">
            <summary> Big float Infinity. </summary>
        </member>
        <member name="F:OpenTap.BigFloat.NegativeInfinity">
            <summary> Big float negative infinity. </summary>
        </member>
        <member name="F:OpenTap.BigFloat.NaN">
            <summary> Big float not a number. </summary>
        </member>
        <member name="M:OpenTap.BigFloat.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts this value to a string.
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.BigFloat.#ctor(System.Double)">
            <summary> Creates a BigFloat. </summary>
            <param name="value"></param>
        </member>
        <member name="T:OpenTap.BigFloatConverter">
            <summary> Converter for OpenTAP arbitrary precision number types. </summary>
        </member>
        <member name="M:OpenTap.BigFloatConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> returns  true if it can convert from </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.BigFloatConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from an object to a number.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.BigFloatConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to a number.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.BreakCondition">
            <summary>
            Test step break conditions. Can be used to define when a test step should issue a break due to it's own verdict.
            </summary>
        </member>
        <member name="F:OpenTap.BreakCondition.Inherit">
            <summary> Inherit behavior from parent or engine settings. </summary>
        </member>
        <member name="F:OpenTap.BreakCondition.BreakOnError">
            <summary> If a step completes with verdict 'Error', stop execution of any subsequent steps at this level, and return control to the parent step. </summary>
        </member>
        <member name="F:OpenTap.BreakCondition.BreakOnFail">
            <summary> If a step completes with verdict 'Fail', stop execution of any subsequent steps at this level, and return control to the parent step. </summary>
        </member>
        <member name="F:OpenTap.BreakCondition.BreakOnInconclusive">
            <summary> If a step completes with verdict 'Inconclusive', stop execution of any subsequent steps at this level, and return control to the parent step. </summary>
        </member>
        <member name="F:OpenTap.BreakCondition.BreakOnPass">
            <summary> If a step completes with verdict 'Pass', stop execution of any subsequent steps at this level, and return control to the parent step. </summary>
        </member>
        <member name="T:OpenTap.BreakConditionProperty">
            <summary>
            Break condition is an 'attached property' that can be attached to any implementor of ITestStep. This ensures that the API for ITestStep does not need to be modified to support the BreakConditions feature.
            </summary>
        </member>
        <member name="M:OpenTap.BreakConditionProperty.SetBreakCondition(OpenTap.ITestStepParent,OpenTap.BreakCondition)">
            <summary> Sets the break condition for a test step. </summary>
            <param name="step"> Which step to set it on.</param>
            <param name="condition"></param>
        </member>
        <member name="M:OpenTap.BreakConditionProperty.GetBreakCondition(OpenTap.ITestStepParent)">
            <summary> Gets the break condition for a given test step. </summary>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.IBreakConditionProvider">
            <summary> Internal interface to speed up setting and getting BreakConditions on core classes like TestStep. </summary>
        </member>
        <member name="T:OpenTap.IDescriptionProvider">
            <summary> Internal interface to speed up setting and getting Descriptions on core classes like TestStep. </summary>
        </member>
        <member name="T:OpenTap.IEnabledValueAnnotation">
            <summary> 
            Marks a setting that can be enabled/disabled by the user. UIs are expected to render a checkbox in front of the actual value. 
            Settings of type <see cref="T:OpenTap.Enabled`1"/> gets annotated with an annotation that implements this.
            </summary>
        </member>
        <member name="P:OpenTap.IEnabledValueAnnotation.IsEnabled">
            <summary>
            Indicates whether this setting is enabled.
            </summary>
        </member>
        <member name="P:OpenTap.IEnabledValueAnnotation.Value">
            <summary>
            Annotations describing the actual value.
            </summary>
        </member>
        <member name="F:OpenTap.BreakConditionsAnnotation.Values.BreakOnError">
            <summary> If a step completes with verdict 'Error', stop execution of any subsequent steps at this level, and return control to the parent step. </summary>
        </member>
        <member name="F:OpenTap.BreakConditionsAnnotation.Values.BreakOnFail">
            <summary> If a step completes with verdict 'Fail', stop execution of any subsequent steps at this level, and return control to the parent step. </summary>
        </member>
        <member name="F:OpenTap.BreakConditionsAnnotation.Values.BreakOnInconclusive">
            <summary> If a step completes with verdict 'Inclusive' the step should break execution.</summary>
        </member>
        <member name="F:OpenTap.BreakConditionsAnnotation.Values.BreakOnPass">
            <summary> If a step completes with verdict 'Pass' the step should break execution.</summary>
        </member>
        <member name="T:OpenTap.ChildItemVisibility">
            <summary>  Child item visibility implements the concept of showing or hiding a child item. This could for example be the child steps of a test step. </summary>
        </member>
        <member name="T:OpenTap.ChildItemVisibility.Visibility">
            <summary> Child item visibility.</summary>
        </member>
        <member name="F:OpenTap.ChildItemVisibility.Visibility.Visible">
            <summary> Child items are visible. This is the default state. </summary>
        </member>
        <member name="F:OpenTap.ChildItemVisibility.Visibility.Collapsed">
            <summary> Child items are collapsed.</summary>
        </member>
        <member name="M:OpenTap.ChildItemVisibility.SetVisibility(System.Object,OpenTap.ChildItemVisibility.Visibility)">
            <summary>  Set visibility to collapsed or Visible. </summary>
            <param name="obj">The object for which to set visibility.</param>
            <param name="visibility"> </param>
        </member>
        <member name="M:OpenTap.ChildItemVisibility.GetVisibility(System.Object)">
            <summary>  Sets the current collapsed or visible state. If not previously set it will return Visible. </summary>
            <param name="obj">The object from which to get visibility.</param>
        </member>
        <member name="M:OpenTap.Cli.CliActionTree.GetMaxCommandTreeLength(System.Int32)">
            <summary>
            This method calculates the max length in a command tree. Consider the tree outputted by tap help:
            run
            package
               create
               install  = Longest command (10 characters), this method would return the integer 10.
            </summary>
            <param name="levelPadding">How much is each level indenting? In the example above, the subcommands to 'package' is indented with 3 characters</param>
            <returns>Max character length of commands outputted</returns>
        </member>
        <member name="T:OpenTap.Cli.CliActionExecutor">
            <summary>
            Helper used to execute <see cref="T:OpenTap.Cli.ICliAction"/>s.
            </summary>
        </member>
        <member name="M:OpenTap.Cli.CliActionExecutor.Execute">
            <summary> 
            Used as command line interface of OpenTAP (PluginManager must have searched for assemblies before this method is called).
            This calls Execute with commandline arguments given to this environment and sets Environment.ExitCode. 
            </summary>
        </member>
        <member name="M:OpenTap.Cli.CliActionExecutor.Execute(System.String[])">
            <summary>
            Used as entrypoint for the command line interface of OpenTAP (PluginManager must have searched for assemblies before this method is called)
            </summary>
        </member>
        <member name="T:OpenTap.Cli.CommandLineArgumentAttribute">
            <summary>
            When used on a property inside a <see cref="T:OpenTap.Cli.ICliAction"/>, this attribute indicates a command line arugment or switch.
            </summary>
            <remarks>
            The property type can be: bool, string, or string[]. If it's bool the argument will not take an argument, but will instead set the property to true.
            If it's a string the value of the property will be set to the first occuring value set in the CLI arguments.
            If it's a string[] all values set in the CLI arguments will be concatenated into an array.
            </remarks>
        </member>
        <member name="P:OpenTap.Cli.CommandLineArgumentAttribute.Name">
            <summary>
            Indicates the long name of the command line argument.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.CommandLineArgumentAttribute.ShortName">
            <summary>
            Indicates the short name of the argument. This should be 1 character.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.CommandLineArgumentAttribute.Description">
            <summary>
            Human readable description of the argument.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.CommandLineArgumentAttribute.Visible">
            <summary>
            Indicates whether this will be shown when writing CLI usage information.
            </summary>
        </member>
        <member name="M:OpenTap.Cli.CommandLineArgumentAttribute.#ctor(System.String)">
            <summary>
            Primary constructor.
            </summary>
            <param name="name">Long name of the argument.</param>
        </member>
        <member name="T:OpenTap.Cli.UnnamedCommandLineArgument">
            <summary>
            Used on properties of a <see cref="T:OpenTap.Cli.ICliAction"/> to define an unnamed arguments on the CLI. These can be ordered to handle cases where some values are required and others can occur multiple times.
            The property type will indicate how many will be consumed. The type can be either string or string[]. In case of string[] all the remaining arguments will be assigned to this property.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.UnnamedCommandLineArgument.Order">
            <summary>
            Order or the arguments. The lowest value comes first.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.UnnamedCommandLineArgument.Name">
            <summary>
            The name of the property. This will be shown in the CLI usage output.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.UnnamedCommandLineArgument.Required">
            <summary>
            Indicates whether this argument is required or optional. If it's a string[] and required then this indicates that it needs at least one value.
            </summary>
        </member>
        <member name="M:OpenTap.Cli.UnnamedCommandLineArgument.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:OpenTap.Cli.ExitCodeException">
            <summary>
            Thrown from <see cref="M:OpenTap.Cli.ICliAction.Execute(System.Threading.CancellationToken)"/> to set a specific exit code
            </summary>
        </member>
        <member name="P:OpenTap.Cli.ExitCodeException.ExitCode">
            <summary>
            Exit code to set when ending the process.
            </summary>
        </member>
        <member name="M:OpenTap.Cli.ExitCodeException.#ctor(System.Int32,System.String)">
            <summary>
            Instantiates a new <see cref="T:OpenTap.Cli.ExitCodeException"/>
            </summary>
            <param name="exitcode"> Exit code to set when ending the process</param>
            <param name="message">Exception message to print in the log</param>
        </member>
        <member name="T:OpenTap.Cli.ExitCodes">
            <summary>
            ExitCodes reserved by OpenTAP. Uses range 192 to 255. OpenTAP Plugins should use positive numbers between 1 and 191 for custom error codes.
            For best cross platform compatibility all exitcodes should be positive and between 0 and 255.
            </summary>
        </member>
        <member name="F:OpenTap.Cli.ExitCodes.Success">
            <summary>
            CLI action completed successfully
            </summary>
        </member>
        <member name="F:OpenTap.Cli.ExitCodes.UserCancelled">
            <summary>
            User cancelled CLI action
            </summary>
        </member>
        <member name="F:OpenTap.Cli.ExitCodes.GeneralException">
            <summary>
            CLI action threw an unhandled exception
            </summary>
        </member>
        <member name="F:OpenTap.Cli.ExitCodes.UnknownCliAction">
            <summary>
            No CLI action found matching commands
            </summary>
        </member>
        <member name="F:OpenTap.Cli.ExitCodes.LicenseError">
            <summary>
            CLI action missing a license
            </summary>
        </member>
        <member name="F:OpenTap.Cli.ExitCodes.ArgumentParseError">
            <summary>
            Unable to parse one or more arguments
            </summary>
        </member>
        <member name="F:OpenTap.Cli.ExitCodes.ArgumentError">
            <summary>
            One or more arguments is incorrect
            </summary>
        </member>
        <member name="F:OpenTap.Cli.ExitCodes.NetworkError">
            <summary>
            Network error occurred
            </summary>
        </member>
        <member name="T:OpenTap.Cli.ICliAction">
            <summary>
            Plugin type that defines a sub command for the OpenTAP CLI (tap.exe). 
            Deriving from this, and annotating the class and any public properties with <see cref="T:OpenTap.Cli.CommandLineArgumentAttribute"/> and <see cref="T:OpenTap.Cli.UnnamedCommandLineArgument"/> attributes
            will allow it to be called from the OpenTAP CLI.
            </summary>
        </member>
        <member name="M:OpenTap.Cli.ICliAction.Execute(System.Threading.CancellationToken)">
            <summary>
            The code to be executed by the action.
            </summary>
            <returns>Return 0 to indicate success. Otherwise return a custom errorcode that will be set as the exitcode from the CLI.</returns>
        </member>
        <member name="M:OpenTap.Cli.ICliActionExecuteHelper.Execute(OpenTap.Cli.ICliAction,System.String[])">
            <summary>
            Logs the assembly name and version then executes the action with the given parameters.
            </summary>
            <param name="action">The action to be executed.</param>
            <param name="parameters">The parameters for the action.</param>
            <returns>Return 0 to indicate success. Otherwise return a custom errorcode that will be set as the exitcode from the CLI.</returns>
        </member>
        <member name="T:OpenTap.Cli.RunCliAction">
            <summary>
            Test plan run CLI action. Execute a test plan with 'tap.exe run test.TapPlan'
            </summary>
        </member>
        <member name="P:OpenTap.Cli.RunCliAction.Settings">
            <summary>
            Specify a bench settings profile from which to load the bench settings. The parameter given here should correspond to the name of a subdirectory of %TAP_PATH%/Settings/Bench. If not specified, %TAP_PATH%/Settings/Bench/Default is used.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.RunCliAction.Search">
            <summary>
            Additional directories to be searched for plugins. This option may be used multiple times, e.g., --search dir1 --search dir2.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.RunCliAction.Metadata">
            <summary>
            Set a resource metadata parameter. Use the syntax parameter=value, e.g., --metadata dut-id=5. This option may be used multiple times.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.RunCliAction.NonInteractive">
            <summary>
            Never prompt for user input.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.RunCliAction.External">
            <summary>
            Set an external test plan parameter. Use the syntax parameter=value, e.g., -e delay=1.0. This option may be used multiple times, or a .csv file containing a \"parameter, value\" pair on each line can be specified as -e file.csv.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.RunCliAction.TryExternal">
            <summary>
            Try setting an external test plan parameter, ignoring errors if it does not exist in the test plan. Use the syntax parameter=value, e.g., -t delay=1.0. This option may be used multiple times
            </summary>
        </member>
        <member name="P:OpenTap.Cli.RunCliAction.ListExternal">
            <summary>
            List the available external test plan parameters.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.RunCliAction.Results">
            <summary>
            Enable a subset of the currently configured result listeners given as a comma-separated list, e.g., --results SQLite,CSV. To disable all result listeners use --results \"\".
            </summary>
        </member>
        <member name="P:OpenTap.Cli.RunCliAction.IgnoreLoadErrors">
            <summary>
            Ignore the errors for deserialization of test plan
            </summary>
        </member>
        <member name="P:OpenTap.Cli.RunCliAction.TestPlanPath">
            <summary>
            Location of test plan to be executed.
            </summary>
        </member>
        <member name="F:OpenTap.Cli.RunCliAction.log">
            <summary>
            Log to write debug/trace messages to
            </summary>
        </member>
        <member name="M:OpenTap.Cli.RunCliAction.Execute(System.Threading.CancellationToken)">
            <summary>
            Executes test plan
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.Cli.ArgumentsParser">
            <summary>
            Parser for command line arguments. Supports --,-,/ based argument options 
            as well as unnamed options mixed with named ones.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.Argument.ShortName">
            <summary>
            Optional. Used with one '-' or a '/'.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.Argument.LongName">
            <summary>
            Non optional. used with '--' or '/'. Also used for argument lookup.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.Argument.NeedsArgument">
            <summary>
            If an argument is required for this option.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.Argument.Value">
            <summary>
            Argument given to this option.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.Argument.Values">
            <summary>
            Argument given to this option. Also used as a default.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.Argument.Description">
            <summary>
            Short description for this option.
            </summary>
        </member>
        <member name="P:OpenTap.Cli.Argument.IsVisible">
            <summary>
            Indicates if an argument should be shown in "--help" output.
            </summary>
        </member>
        <member name="M:OpenTap.Cli.Argument.#ctor(System.String,System.Char,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the Option class.
            </summary>
        </member>
        <member name="M:OpenTap.Cli.Argument.Clone(System.String)">
            <summary>
            Clones the option with a new argument
            </summary>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.Cli.ArgumentCollection">
            <summary>
            A collection of options optionally with arguments.
            Also includes Unnamed arguments and in case of errors unknown options and missing arguments
            This class is used both as and input and output to option parsing.
            </summary>
        </member>
        <member name="M:OpenTap.Cli.ArgumentCollection.TakeOption(System.String,OpenTap.Cli.ArgumentCollection)">
            <summary>
            Transfers an option from one
            </summary>
            <param name="optionName"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Cli.ArgumentCollection.ToString">
            <summary>
            Converts the ArgumentCollection to a help-string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.Cli.ICliActionExtensions">
            <summary>
            Helper class that enhances the <see cref="T:OpenTap.Cli.ICliAction">ICliAction</see> with extra extensions methods.
            </summary>
        </member>
        <member name="M:OpenTap.Cli.ICliActionExtensions.PerformExecute(OpenTap.Cli.ICliAction,System.String[])">
            <summary>
            Executes the action with the given parameters.
            </summary>
            <param name="action">The action to be executed.</param>
            <param name="parameters">The parameters for the action.</param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.ColumnDisplayNameAttribute">
            <summary>
            Indicates that a property on a <see cref="T:OpenTap.TestStep"/> (a step setting) should be visible within a Test Plan editor UI.
            </summary>
        </member>
        <member name="P:OpenTap.ColumnDisplayNameAttribute.ColumnName">
            <summary>
            The header name of the column.
            </summary>
        </member>
        <member name="P:OpenTap.ColumnDisplayNameAttribute.Order">
            <summary>
            Used for managing the order in which the columns appear.
            </summary>
        </member>
        <member name="P:OpenTap.ColumnDisplayNameAttribute.IsReadOnly">
            <summary>
            Whether the property as a column is read-only.
            </summary>
        </member>
        <member name="M:OpenTap.ColumnDisplayNameAttribute.#ctor(System.String,System.Double,System.Boolean)">
            <summary> 
            Create a new instance of ColumnDisplayNameAttribute. 
            To be used on TestStep properties to show that they should appear in the test plan editor.
            </summary>
            <param name="ColumnName">The header name of the column.</param>
            <param name="Order">Used for managing the order in which the columns appear.</param>
            <param name="IsReadOnly">Whether the property as a column is read-only.</param>
        </member>
        <member name="T:OpenTap.SettingsGroupAttribute">
            <summary>
            <see cref="T:OpenTap.ComponentSettings"/> with this attribute belong to a group with a specified name. 
            They can be marked as profile groups, enabling selectable profiles for settings in that group.
            </summary>
        </member>
        <member name="P:OpenTap.SettingsGroupAttribute.GroupName">
            <summary>
            Name of the settings group.
            </summary>
        </member>
        <member name="P:OpenTap.SettingsGroupAttribute.Profile">
            <summary>
            Specifies whether this settings group uses profiles.  
            </summary>
        </member>
        <member name="M:OpenTap.SettingsGroupAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for <see cref="T:OpenTap.SettingsGroupAttribute"/> 
            </summary>
            <param name="GroupName">The name of the settings group.</param>
            <param name="Profile">If this settings group should use profiles.</param>
        </member>
        <member name="T:OpenTap.FixedSettingsListAttribute">
            <summary>
            Attribute that determines if the settings list should be fixed.
            </summary>
        </member>
        <member name="M:OpenTap.IComponentSettingsList.GetRemovedAliveResources">
            <summary> Return the objects which have been removed but still alive (non-GC'd) resources.
            This requires using a list of WeakReferences.</summary>
        </member>
        <member name="T:OpenTap.ComponentSettingsList">
            <summary>
             Contains some extra functionality for the ComponentSettingsList.
             Created so that it is possible to know which (generic) ComponentSettingsList
             contains a given type.
             </summary>
        </member>
        <member name="M:OpenTap.ComponentSettingsList.getGetCurrentMethodForContainer(System.Type)">
            <summary>
            Gets the GetCurrent method for the container for type T.
            Null if no such container.
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList.GetContainer(System.Type)">
            <summary>
            Finds a ComponentSettingsList containing instances of T.
            </summary>
            <param name="T"></param>
            <returns>A List of type T. Null if no ComponentSettingsList exists containing T.</returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList.HasContainer(System.Type)">
            <summary>
            For checking if there is a ComponentSettings for T without evaluating GetCurrent.
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList.GetItems``1">
            <summary>
            Gets the ComponentSettings list for T and filters the instances that are not T.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList.GetItems(System.Type)">
            <summary>
            (non-generic) Gets the ComponentSettings list for T and filters the instances that are not T.
            </summary>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.ComponentSettingsList`2">
            <summary>
            ComponentSettingsList is a collection of objects. This is the case for DutSettings, for instance.
            Uses IObservableCollection so that changes can be monitored.
            </summary>
            <typeparam name="DerivedType"></typeparam>
            <typeparam name="ContainedType"></typeparam>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.GetDefault``1">
            <summary>
            Gets the first or default instance in the component settings list.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.GetDefaultOf``1">
            <summary>
            Static Get first or default instance in the component settings list. (uses GetCurrent)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.#ctor">
            <summary>
            Initializes the list.
            </summary>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.Add(`1)">
            <summary>
            Adds an element to the collection.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.Contains(`1)">
            <summary>
            Determines if the collection contains the specified element.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the collection to a compatible array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:OpenTap.ComponentSettingsList`2.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:OpenTap.ComponentSettingsList`2.IsReadOnly">
            <summary>
            Determines if the collection is read only.
            </summary>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.Remove(`1)">
            <summary>
            Removes the first occurrence of a specified element from the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.IndexOf(`1)">
            <summary>
            Returns the index of the first occurrences of a specified element in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.Insert(System.Int32,`1)">
            <summary>
            Insert an element into the collection at the specified index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.RemoveAt(System.Int32)">
            <summary>
            Removes an element at a specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:OpenTap.ComponentSettingsList`2.Item(System.Int32)">
            <summary>
            List interface
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="E:OpenTap.ComponentSettingsList`2.CollectionChanged">
            <summary>
            Invoked when collection is changed.
            </summary>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.Add(System.Object)">
            <summary>
            Adds an element to the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.Contains(System.Object)">
            <summary>
            Determines if the collection contains the specified element.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.IndexOf(System.Object)">
            <summary>
            Returns the index of the first occurrences of a specified element in the collection.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.Insert(System.Int32,System.Object)">
            <summary>
            Insert an element into the collection at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="P:OpenTap.ComponentSettingsList`2.IsFixedSize">
            <summary>
            Determines if the collection is fixed size.
            </summary>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specified element from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:OpenTap.ComponentSettingsList`2.System#Collections#IList#Item(System.Int32)">
            <summary>
            List interface
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsList`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to a compatible array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:OpenTap.ComponentSettingsList`2.IsSynchronized">
            <summary>
            Determines if the collection is synchronized.
            </summary>
        </member>
        <member name="P:OpenTap.ComponentSettingsList`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access the collection.
            </summary>
        </member>
        <member name="T:OpenTap.ComponentSettings`1">
            <summary>
            It is recommended to inherit from this class when implementing component settings. 
            This class uses a recurrent template pattern to exhibit a kind of "static reflection".
            </summary>
            <remarks>
            It is also possible implement a component setting by inherriting from the non-generic <see cref="T:OpenTap.ComponentSettings"/> 
            or <see cref="T:OpenTap.IComponentSettings"/> it is just not recommended.
            </remarks>
            <typeparam name="T">The inheriting class.</typeparam>
        </member>
        <member name="M:OpenTap.ComponentSettings`1.GetCurrent">
            <summary>
             Gets the current setting of a specific type.
             </summary>
             <returns></returns>
        </member>
        <member name="P:OpenTap.ComponentSettings`1.Current">
            <summary>
            Get the currently loaded ComponentSettings instance for this class.
            </summary>
        </member>
        <member name="T:OpenTap.IComponentSettings">
            <summary>
            Specifies the ComponentSettings class to be a OpenTAP plugin.
            </summary>
            <remarks>
            It is recommended to inherit from <see cref="T:OpenTap.ComponentSettings`1"/> when possible.
            </remarks>
        </member>
        <member name="T:OpenTap.ComponentSettings">
            <summary>
            An abstract class to implement general settings for a component. 
            This class provides methods to load and save the settings to/from an XML file using TapSerializer.
            </summary>
            <remarks>
            It is recommended to inherit from <see cref="T:OpenTap.ComponentSettings`1"/> when possible.
            </remarks>
        </member>
        <member name="P:OpenTap.ComponentSettings.GroupName">
            <summary> Settings group of this settings class. </summary>
        </member>
        <member name="E:OpenTap.ComponentSettings.CacheInvalidated">
            <summary>
            Invokes when the cache for this settings item is invalidated for this item.
            The way to handle it is usually to fetch the new instance using ComponentSettings.GetCurrent(sender.GetType()).
            </summary>
        </member>
        <member name="P:OpenTap.ComponentSettings.SettingsDirectoryRoot">
            <summary>
            Where settings files are located. 
            Usually this is at "[Executable location]\Settings", but it can be set to different locations. 
            Setting this will invalidate loaded settings.
            </summary>
        </member>
        <member name="M:OpenTap.ComponentSettings.GetSettingsDirectory(System.String,System.Boolean)">
            <summary> The directory where the settings are loaded from / saved to. </summary>
            <param name="groupName">Name of the settings group.</param>
            <param name="isProfile">If the settings group uses profiles, we load the default profile.</param>
        </member>
        <member name="M:OpenTap.ComponentSettings.EnsureSettingsDirectoryExists(System.String,System.Boolean)">
            <summary>
            Ensures that the Settings directory exists and that the specified groupName sub directory exists.
            This might throw an exception if the settings directory was configured to something invalid. Like 'AUX', 'NUL', ....
            </summary>
            <param name="groupName">Name of the settings group.</param>
            <param name="isProfile">Determines if the settings group uses profiles.</param>
        </member>
        <member name="F:OpenTap.ComponentSettings.PersistSettingGroups">
            <summary> Gets or sets if settings groups should be persisted between processes.</summary>
        </member>
        <member name="M:OpenTap.ComponentSettings.SetSettingsProfile(System.String,System.String)">
            <summary> Sets the directory in which settings groups are loaded from / saved to. </summary>
            <param name="groupName">Name of the settings group.</param>
            <param name="profileName">Name of the selected settings profile.</param>
        </member>
        <member name="M:OpenTap.ComponentSettings.InvalidateAllSettings">
            <summary> Invalidates all loaded settings. Next time a ComponentSettings is accessed, it will be read from an XML file. </summary>
        </member>
        <member name="M:OpenTap.ComponentSettings.Save">
            <summary>
            Saves the settings held by this class to an XML file in the <see cref="M:OpenTap.ComponentSettings.SetSettingsProfile(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:OpenTap.ComponentSettings.SaveAllCurrentSettings">
            <summary> Saves all ComponentSettings objects that have been loaded. </summary>
        </member>
        <member name="M:OpenTap.ComponentSettings.Invalidate">
            <summary>
            Invalidates the cache of this type of component setting.
            </summary>
        </member>
        <member name="M:OpenTap.ComponentSettings.Reload">
            <summary>
            Forces the reload of this type of component setting from the XML file the next time the setting is used.
            </summary>
        </member>
        <member name="M:OpenTap.ComponentSettings.Initialize">
            <summary>
            Called if a new ComponentSettings is instantiated and there are no corresponding settings XML.
            </summary>
        </member>
        <member name="M:OpenTap.ComponentSettings.GetSaveFilePath(System.Type)">
            <summary> Gets the current file location where a ComponentSettings type is saved. </summary>
            <param name="type"> Must be a ComponentSettings sub-class. </param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettings.GetCurrent``1">
            <summary>
            Gets current settings for a specified component. This is either an instance of the settings class previously loaded, or a new instance loaded from the associated file. 
            </summary>
            <typeparam name="T">The type of the component settings requested (this type must be a descendant of <see cref="T:OpenTap.ComponentSettings"/>).</typeparam>
            <returns>Returns the loaded components settings. Null if it was not able to load the settings type.</returns>
        </member>
        <member name="M:OpenTap.ComponentSettings.GetCurrent(System.Type)">
            <summary>
            Gets current settings for a specified component. This is either an instance of the settings class previously loaded, or a new instance loaded from the associated file.
            </summary>
            <param name="settingsType">The type of the component settings requested (this type must be a descendant of <see cref="T:OpenTap.ComponentSettings"/>).</param>
            <returns>Returns the loaded components settings. Null if it was not able to load the settings type.</returns>
        </member>
        <member name="M:OpenTap.ComponentSettings.SetCurrent(System.IO.Stream)">
            <summary>
            Sets current settings for a component setting based on a stream of the file contents of a ComponentSettings XML file.
            </summary>
            <param name="xmlFileStream">The component settings stream to be set</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettings.GetCurrent(OpenTap.ITypeData)">
            <summary>
            Gets current settings for a specified component. This is either an instance of the settings class previously loaded, or a new instance loaded from the associated file.
            </summary>
            <param name="settingsType">The type of the component settings requested (this type must be a descendant of <see cref="T:OpenTap.ComponentSettings"/>).</param>
            <returns>Returns the loaded components settings. Null if it was not able to load the settings type.</returns>
        </member>
        <member name="M:OpenTap.ComponentSettings.GetCurrentFromCache(System.Type)">
            <summary>
            Gets current settings for a specified component from cache.
            </summary>
            <param name="settingsType">The type of the component settings requested (this type must be a descendant of <see cref="T:OpenTap.ComponentSettings"/>).</param>
            <returns>Returns the loaded components settings. Null if it was not able to load the settings type or if it was not cached.</returns>
        </member>
        <member name="P:OpenTap.ComponentSettingsContext.SettingsDirectoryRoot">
            <summary> Directory root for platform settings. </summary>    
        </member>
        <member name="M:OpenTap.ComponentSettingsContext.GetSettingsDirectory(System.String,System.Boolean)">
            <summary>
            The directory where the settings are loaded from / saved to.
            </summary>
            <param name="groupName">Name of the settings group.</param>
            <param name="isProfile">If the settings group uses profiles, we load the default profile.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ComponentSettingsContext.Load(System.Type)">
            <summary>
            Loads a new instance of the settings for a given component.
            </summary>
            <param name="settingsType">The type of the component settings to load (this type must be a descendant of <see cref="T:OpenTap.ComponentSettings"/>).</param>
            <returns>Returns the settings.</returns>
        </member>
        <member name="T:OpenTap.ConsoleTraceListener">
            <summary>
            A class that prints trace messages to the console.
            </summary>
        </member>
        <member name="M:OpenTap.ConsoleTraceListener.SetStartupTime(System.DateTime)">
            <summary>
            Set logs startup time, this will affect timestamp of all log messages.
            </summary>
            <param name="time"></param>
        </member>
        <member name="P:OpenTap.ConsoleTraceListener.IsVerbose">
            <summary>
            Show verbose/debug level log messages.
            </summary>
        </member>
        <member name="P:OpenTap.ConsoleTraceListener.IsQuiet">
            <summary>
            Hide debug and information level log messages.
            </summary>
        </member>
        <member name="P:OpenTap.ConsoleTraceListener.IsColor">
            <summary>
            Color messages according to their level.
            </summary>
        </member>
        <member name="M:OpenTap.ConsoleTraceListener.Flush">
            <summary>
            Waits for the messages to be written to the console.
            </summary>
        </member>
        <member name="M:OpenTap.ConsoleTraceListener.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of the ConsoleTraceListener that can be used to output log messages in consoles.
            </summary>
            <param name="isVerbose"></param>
            <param name="isQuiet"></param>
            <param name="isColor"></param>
        </member>
        <member name="M:OpenTap.ConsoleTraceListener.TraceEvents(System.Collections.Generic.IEnumerable{OpenTap.Diagnostic.Event})">
            <summary>
            Prints all log messages to the console.
            </summary>
            <param name="events"></param>
        </member>
        <member name="T:OpenTap.IDebugger">
            <summary> Debugger plugin interface for attaching custom debuggers. </summary>
        </member>
        <member name="M:OpenTap.IDebugger.AttachDebugger">
            <summary> Invoked when programs starts. </summary>
        </member>
        <member name="T:OpenTap.DebuggerAttacher">
            <summary> Class for managing debuggers. Set the OPENTAP_DEBUGGER_ASSEMBLY environment variable to make it possible to attach debuggers. 
            The environment variable should contain paths to assemblies with IDebugger implementations. </summary>
            <remarks>
            To use this feature with Visual Studio, first install the Visual Studio SDK:
               C:\git\opentap\bin\Debug\tap package install "Visual Studio SDK"
            Then set the environment variable to the location of the debugger dll in that package:
               $env:OPENTAP_DEBUGGER_ASSEMBLY="C:\git\opentap\bin\Debug\Packages\Visual Studio SDK\OpenTap.VSSdk.Debugger.dll"
            </remarks>
        </member>
        <member name="M:OpenTap.DebuggerAttacher.TryAttach">
            <summary> Attaches the debugger. </summary>
        </member>
        <member name="T:OpenTap.DefaultDisplayAttribute">
            <summary>
            The default display attribute is used to mark when the display attribute is not specifically added, but just autogenerated
            instead of putting a null value.
            </summary>
        </member>
        <member name="M:OpenTap.DefaultDisplayAttribute.IsDefaultAttribute">
            <summary> Always true for this class. </summary>
        </member>
        <member name="T:OpenTap.DeserializeInPlaceAttribute">
            <summary>
            This attribute marks that an object should not be overwritten during serialization, but instead the
            value existing in the property should be used.
            </summary>
        </member>
        <member name="T:OpenTap.DirectoryPathAttribute">
            <summary>
            Identifies a string as a directory path.
            </summary>
        </member>
        <member name="T:OpenTap.DisplayAttribute">
            <summary>
            Defines how a property, class, enum, or other item is presented to the user. 
            Also configures the description and allows items to be grouped and ordered.
            </summary>
        </member>
        <member name="P:OpenTap.DisplayAttribute.Description">
            <summary> Optional text that provides a description of the item. 
            Consider using HelpLinkAttribute if a link to documentation is needed. 
            </summary>
        </member>
        <member name="P:OpenTap.DisplayAttribute.Group">
            <summary> Optional text used to group displayed items. 
            Use 'Groups' if more than one level of grouping is needed.
            </summary>
        </member>
        <member name="P:OpenTap.DisplayAttribute.Name">
            <summary> Name displayed by the UI.</summary>
        </member>
        <member name="P:OpenTap.DisplayAttribute.Order">
            <summary> Optional integer that ranks items and groups in ascending order relative to other items/groups. 
            Default is -10000. For a group, the order is the average order of the elements inside the group. 
            Any double value is allowed. Items with same order are ranked alphabetically.
            </summary>
            <remarks>
            This applies only to properties.  Classes will ignore this setting and be ordered alphabetically.
            </remarks>
        </member>
        <member name="P:OpenTap.DisplayAttribute.Collapsed">
            <summary> Boolean setting that indicates whether a group's default appearance is collapsed. 
            Default is 'false' (group is expanded).
            </summary>
        </member>
        <member name="M:OpenTap.DisplayAttribute.GetFullName">
            <summary> Gets the Group (or Groups) and Name concatenated with a backslash (\).</summary>
        </member>
        <member name="F:OpenTap.DisplayAttribute.DefaultOrder">
            <summary>
            The default order for display attribute. This is set in this way to highlight the fact that
             an order is not set and out of the range of normally selected order values. '0' for example
             is a commonly selected value for order, so it could not be that.
            </summary>
        </member>
        <member name="M:OpenTap.DisplayAttribute.#ctor(System.String,System.String,System.String,System.Double,System.Boolean,System.String[])">
            <summary>
            Creates a new instance of <see cref="T:OpenTap.DisplayAttribute"/>.  Ensures that Name is never null.
            </summary>
            <param name="Name">Name displayed by the UI.</param>
            <param name="Description"> Optional text that provides a description of the item. Consider using HelpLinkAttribute if a link to documentation is needed. </param>
            <param name="Group"> Optional text used to group displayed items. Use 'Groups' if more than one level of grouping is needed. </param>
            <param name="Order"> Optional integer that ranks items and groups in ascending order relative to other items/groups. Default is defined by DisplayAttribute.DefaultOrder. 
            For a group, the order is the average order of the elements inside the group. Any double value is allowed. Items with same order are ranked alphabetically. </param>
            <param name="Collapsed"> Boolean setting that indicates whether a group's default appearance is collapsed. Default is 'false' (group is expanded). </param>
            <param name="Groups"> Optional array of text strings to specify multiple levels of grouping. Use 'Group' if only one level of grouping is needed. </param>
        </member>
        <member name="M:OpenTap.DisplayAttribute.Equals(System.Object)">
            <summary> Overriding Equals to fix strange equality issues between instances of DisplayAttribute. </summary>
        </member>
        <member name="M:OpenTap.DisplayAttribute.GetHashCode">
            <summary> Generates a hash code based on the display attribute values.</summary> 
        </member>
        <member name="T:OpenTap.Dut">
            <summary>
            Base class for DUT drivers. 
            </summary>
        </member>
        <member name="M:OpenTap.Dut.#ctor">
            <summary>
            Sets the Name of the DUT.
            </summary>
        </member>
        <member name="P:OpenTap.Dut.ID">
            <summary>
            Identifier that uniquely identifies the DUT, such as its serial number. 
            </summary>
        </member>
        <member name="P:OpenTap.Dut.Comment">
            <summary>
            User-supplied comment about DUT. Entered in the Bench Settings > Instrument dialog in the OpenTAP GUI.
            </summary>
        </member>
        <member name="T:OpenTap.DutSettings">
            <summary>
            Settings related to the DUTs currently available. 
            </summary>
        </member>
        <member name="T:OpenTap.IDynamicMembersProvider">
            <summary>  This interface speeds up accessing dynamic members as it avoids having to access a global table to store the information. </summary>
        </member>
        <member name="T:OpenTap.ParameterExtensions">
            <summary>  Extensions for parameter operations. </summary>
        </member>
        <member name="M:OpenTap.ParameterExtensions.Parameterize(OpenTap.IMemberData,System.Object,System.Object,System.String)">
            <summary> Parameterizes a member from one object unto another.
            If the name matches an existing parameter, the member will be added to that. </summary>
            <param name="target"> The object on which to add a new member. </param>
            <param name="member"> The member to forward. </param>
            <param name="source"> The owner of the forwarded member. </param>
            <param name="name"> The name of the new property. If null, the name of the source member will be used.</param>
            <returns>The parameterization of the member..</returns>
        </member>
        <member name="M:OpenTap.ParameterExtensions.Unparameterize(OpenTap.IMemberData,OpenTap.ParameterMemberData,System.Object)">
            <summary> Removes a parameterization of a member. </summary>
            <param name="parameterizedMember"> The parameterized member owned by the source. </param>
            <param name="parameter"> The parameter to remove it from.</param>
            <param name="source"> The source of the member. </param>
        </member>
        <member name="M:OpenTap.ParameterExtensions.GetParameter(OpenTap.IMemberData,System.Object,System.Object)">
            <summary>
            Finds the parameter that parameterizes this member on 'source'. If no parameter is found null is returned.
            </summary>
            <param name="target"> The object owning the parameter.</param>
            <param name="source"> The source of the member. </param>
            <param name="parameterizedMember"> The parameterized member owned by the source. </param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.ParameterMemberData">
            <summary>
            A member that represents a parameter. The parameter controls the value of a set of parameterized members.
            Parameterized members can be added/removed using IMemberData.Parameterize() and IMemberData.Unparameterize() 
            </summary>
            <remarks>
            The first member have special meaning since it decides which attributes the parameter will have.
            If the member is later removed from the parameter (unparameterized), the first additional member will take its place.
            </remarks>
        </member>
        <member name="P:OpenTap.ParameterMemberData.Attributes">
            <summary> Gets the attributes on this member. </summary>
        </member>
        <member name="P:OpenTap.ParameterMemberData.Target">
            <summary> The target object to which this member is added.
            This should always be the same as the argument to GetValue/SetValue. </summary>
        </member>
        <member name="M:OpenTap.ParameterMemberData.GetValue(System.Object)">
            <summary>  Gets the value of this member. </summary>
        </member>
        <member name="M:OpenTap.ParameterMemberData.SetValue(System.Object,System.Object)">
            <summary> Sets the value of this member on the owner. </summary>
        </member>
        <member name="P:OpenTap.ParameterMemberData.ParameterizedMembers">
            <summary>  The members and objects that make up the aggregation of this parameter. </summary>
        </member>
        <member name="P:OpenTap.ParameterMemberData.DeclaringType">
            <summary> The target object type. </summary>
        </member>
        <member name="P:OpenTap.ParameterMemberData.TypeDescriptor">
            <summary>  The declared type of this property. This is the type of the first member added to the parameter.
            Subsequent members does not need to have the same type, but they should be conversion compatible. e.g
            if the first member is an int, subsequent members can be other numeric types or string as well. </summary>
        </member>
        <member name="P:OpenTap.ParameterMemberData.Writable">
            <summary> If this member is writable. Usually true for parameters.</summary>
        </member>
        <member name="P:OpenTap.ParameterMemberData.Readable">
            <summary> If this member is readable. Usually true for parameters. </summary>
        </member>
        <member name="P:OpenTap.ParameterMemberData.Name">
            <summary> The declared name of this parameter. This parameter can be referred to by this name. It may contain spaces etc. </summary>
        </member>
        <member name="M:OpenTap.ParameterMemberData.RemoveMember(OpenTap.IMemberData,System.Object)">
            <summary>
            Removes a forwarded member. If it was the original member, the first additional member will be used.
            If no additional members are present, then true will be returned, signalling that the forwarded member no longer exists.
            </summary>
            <param name="delMember">The forwarded member.</param>
            <param name="delSource">The object owning 'delMember'</param>
            <returns>True if the last member/source pair has been removed. If this happens the parameter should be removed
            from the target object.</returns>
        </member>
        <member name="M:OpenTap.DynamicMember.#ctor(OpenTap.DynamicMember)">
            <summary> This overload allows two DynamicMembers to share the same Get/Set value backing field.</summary>
            <param name="base"></param>
        </member>
        <member name="M:OpenTap.DynamicMember.GetPlanFor(System.Object)">
            <summary> the test plan stores a hashset of all current parameterizations, so this can be used
            to check if something is allready parameterized.</summary>
        </member>
        <member name="M:OpenTap.DynamicMember.IsParameterized(OpenTap.IMemberData,System.Object)">
            <summary>
            Returns true if the member/object combination is parameterized. Note, this only work if they are child steps of a test plan.
            </summary>
        </member>
        <member name="F:OpenTap.DynamicMemberTypeDataProvider.TestStepTypeData.TestPlanBreakConditions">
            <summary>
            This is slightly different from normal BreakConditions as the Display attribute is different.
            </summary>
        </member>
        <member name="T:OpenTap.IParameterMemberData">
            <summary> An IMemberData that represents a parameter. The parameter controls the value of a set of parameterized members.</summary>
        </member>
        <member name="P:OpenTap.IParameterMemberData.ParameterizedMembers">
            <summary> The members controlled by this parameter. </summary>
        </member>
        <member name="T:OpenTap.EmbedPropertiesAttribute">
            <summary> 
            This attribute is used to dynamically embed the properties of an object into another object.
            </summary>
            <remarks> 
            A property of type PT declared on a type DT decorated with this attribute will not be visible in reflection information (ITypeData) for DT.
            Instead all properties declared on PT will be visible on DT as though they had been declared there.
            </remarks>
        </member>
        <member name="P:OpenTap.EmbedPropertiesAttribute.PrefixPropertyName">
            <summary> 
            When true, property name of the owning property is used as prefix for embedded properties. E.g., the name will be 'EmbeddedProperty.X'.
            A prefix can help prevent name-clashing issues if multiple properties gets the same name. 
            </summary>
        </member>
        <member name="P:OpenTap.EmbedPropertiesAttribute.Prefix">
            <summary> 
            Custom prefix for embedded properties. This will overwrite PrefixPropertyName. 
            A prefix can help prevent name-clashing issues if multiple properties gets the same name. 
            </summary>
        </member>
        <member name="M:OpenTap.EmbeddedMemberData.loadAndTransformAttributes">
            <summary>
            Loads and transform the list of attributes.
            Some attributes are sensitive to naming, the known ones are AvailableValuesAttribute,
            SuggestedValueAttribute, and EnabledIf. Others might exist, but they are, for now, not supported.
            When NoPrefix is set on EmbedProperties, then there is no issue, but with the prefix, those names also needs
            to be transformed.
            Additionally, there is some special behavior wanted for Display, for usability and to avoid name clashing:
              - If a Display name/group is set on the owner property, that should turn into a group for the embedded properties.
              - If there is no display name, use the prefix name for the group.
              - If there is no prefix name, don't touch DisplayAttribute.
            </summary>
        </member>
        <member name="T:OpenTap.IEnabled">
            <summary>
            Interface for types that can be enabled.
            </summary>
        </member>
        <member name="P:OpenTap.IEnabled.IsEnabled">
            <summary>
            Gets whether a type is enabled.
            </summary>
        </member>
        <member name="T:OpenTap.Enabled`1">
            <summary>
            A value that can be enabled or disabled.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:OpenTap.Enabled`1.Value">
            <summary>
            Value of the member.
            </summary>
        </member>
        <member name="P:OpenTap.Enabled`1.IsEnabled">
            <summary>
            Gets or sets if the member is enabled. 
            </summary>
        </member>
        <member name="M:OpenTap.Enabled`1.ToString">
            <summary>
            Writes a special string if the value is not enabled. Otherwise just returns Value.ToString.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Enabled`1.Clone">
            <summary>
            Creates a clone of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.EnabledIfAttribute">
            <summary>
            Identifies settings, properties, or methods that should only be valid/enabled when another property or setting has a certain value. 
            </summary>
        </member>
        <member name="P:OpenTap.EnabledIfAttribute.HideIfDisabled">
            <summary>
            Gets or sets if the property should be hidden when disabled.
            </summary>
        </member>
        <member name="P:OpenTap.EnabledIfAttribute.Flags">
            <summary> Gets or sets if the enabling value is individual flags from an enum. </summary>
        </member>
        <member name="P:OpenTap.EnabledIfAttribute.Invert">
            <summary>  Gets or sets if the value should enable or disable(inverted) the setting. </summary>
        </member>
        <member name="P:OpenTap.EnabledIfAttribute.PropertyName">
            <summary>
            Name of the property to enable. Must exactly match a name of a property in the current class. 
            </summary>
        </member>
        <member name="P:OpenTap.EnabledIfAttribute.PropertyValues">
            <summary>
            Value(s) the property must have for the item to be valid/enabled. If multiple values are specified, the item is enabled if just one value is equal. 
            If no values are specified, 'true' is the assumed value.
            </summary>
        </member>
        <member name="M:OpenTap.EnabledIfAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Identifies settings, properties, or methods that are only valid/enabled when another property or setting has a certain value. 
            </summary>
            <param name="propertyName">Name of the property to enable. Must exactly match a name of a property in the current class. </param>
            <param name="propertyValues">Value(s) the property must have for the item to be valid/enabled. If multiple values are specified, the item is enabled if just one value is equal. 
            If no values are specified, 'true' is the assumed value.</param>
        </member>
        <member name="M:OpenTap.EnabledIfAttribute.IsEnabled(OpenTap.IMemberData,System.Object,OpenTap.IMemberData@,System.IComparable@,System.Boolean@)">
            <summary> Returns true if a member is enabled. </summary>
        </member>
        <member name="M:OpenTap.EnabledIfAttribute.calcEnabled2(OpenTap.EnabledIfAttribute,System.Object)">
            <summary> Calculate if an enabled if is enabled by a given value. </summary>
        </member>
        <member name="M:OpenTap.EnabledIfAttribute.IsEnabled(OpenTap.EnabledIfAttribute,System.Object)">
            <summary>
            Checks whether a given property is enabled according to the <see cref="T:OpenTap.EnabledIfAttribute"/>.
            </summary>
            <param name="at">The attribute enabling this property.</param>
            <param name="instance">Instance of the object that has 'property'.</param>
            <returns>true if property dependent property has the correct value.</returns>
        </member>
        <member name="M:OpenTap.EnabledIfAttribute.IsEnabled(OpenTap.IMemberData,System.Object)">
            <summary>
            Checks whether a given property is enabled according to the <see cref="T:OpenTap.EnabledIfAttribute"/>.
            </summary>
            <param name="instance">Instance that has property.</param>
            <param name="property">Property to be checked for if it is enabled.</param>
            <returns>True if property is enabled.</returns>
        </member>
        <member name="T:OpenTap.EngineSettings">
            <summary>
            Settings class containing user-configurable platform options.
            </summary>
        </member>
        <member name="T:OpenTap.EngineSettings.AbortTestPlanType">
            <summary>
            Enum to represent choices for <see cref="P:OpenTap.EngineSettings.AbortTestPlan"/> setting.
            </summary>
        </member>
        <member name="F:OpenTap.EngineSettings.AbortTestPlanType.Step_Fail">
            <summary> If a step completes with verdict 'Fail', the test plan execution should be aborted.</summary>
        </member>
        <member name="F:OpenTap.EngineSettings.AbortTestPlanType.Step_Error">
            <summary> If a step completes with verdict 'Error', the test plan execution should be aborted.</summary>
        </member>
        <member name="F:OpenTap.EngineSettings.AbortTestPlanType.Step_Inconclusive">
            <summary> If a step completes with verdict 'Inconclusive', the test plan execution should be aborted. </summary>
        </member>
        <member name="F:OpenTap.EngineSettings.AbortTestPlanType.Step_Pass">
            <summary> If a step completes with verdict 'Pass', the test plan execution should be aborted. </summary>
        </member>
        <member name="P:OpenTap.EngineSettings.SessionLogPath">
            <summary>
            Where the session logs are saved. Must be a valid path.
            </summary>
        </member>
        <member name="P:OpenTap.EngineSettings.PromptForMetaData">
            <summary>
            Controls whether the engine should propagate a request for metadata.
            </summary>
        </member>
        <member name="P:OpenTap.EngineSettings.AbortTestPlan">
            <summary>
            Configures the engine to stop the test plan run if a step fails or causes an error.  
            </summary>
        </member>
        <member name="P:OpenTap.EngineSettings.OperatorName">
            <summary>
            Name of the operator. This name will be saved along with the results.
            </summary>
        </member>
        <member name="P:OpenTap.EngineSettings.StationName">
            <summary>
            Name of the test station. This name will be saved along with the results.
            </summary>
        </member>
        <member name="P:OpenTap.EngineSettings.ResultLatencyLimit">
            <summary>
            Gets or sets the maximum allowed latency for result propagation. When the limit is reached, the test plan run pauses while the results are propagated to the Result Listeners. 
            Result processing time is an estimated value based on previous processing delays.
            </summary>
        </member>
        <member name="P:OpenTap.EngineSettings.HasMultipleTimestampers">
            <summary>
            True, if there is more than one log timestamping type.
            </summary>
        </member>
        <member name="P:OpenTap.EngineSettings.LogTimestamper">
            <summary>
            Sets the log timestamp mechanism.
            </summary>
        </member>
        <member name="M:OpenTap.EngineSettings.#ctor">
            <summary>
            Sets up some default values for the various settings.
            User code should use EngineSettings.Current to access the singleton instead of constructing a new object.
            </summary>
        </member>
        <member name="P:OpenTap.EngineSettings.StartupDir">
            <summary> Where the test executive was started from. </summary>
        </member>
        <member name="P:OpenTap.EngineSettings.ResourceManagerType">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenTap.EngineSettings.LoadWorkingDirectory(System.String)">
            <summary> Loads a new working directory and sets up environment variables important to OpenTAP.</summary>
            <param name="newWorkingDirectory"></param>
        </member>
        <member name="T:OpenTap.EventTraceListener">
            <summary>
            A class that listens to trace messages and raises an event when a message occurs.
            </summary>
        </member>
        <member name="T:OpenTap.EventTraceListener.LogMessageDelegate">
            <summary>
            Delegate for the log messages.
            </summary>
            <param name="Events"></param>
        </member>
        <member name="E:OpenTap.EventTraceListener.MessageLogged">
            <summary>
            Event for when messages are logged.
            </summary>
        </member>
        <member name="M:OpenTap.EventTraceListener.TraceEvents(System.Collections.Generic.IEnumerable{OpenTap.Diagnostic.Event})">
            <summary>
            Invokes the MessageLogged event with the new events.
            </summary>
            <param name="events"></param>
        </member>
        <member name="M:OpenTap.EventTraceListener.TraceEvent(System.String,OpenTap.LogEventType,System.Int32,System.String)">
            <summary>
            Invokes the MessageLogged event with the new event from the legacy TraceEvent system.
            </summary>
            <param name="source"></param>
            <param name="eventType"></param>
            <param name="id"></param>
            <param name="text"></param>
        </member>
        <member name="M:OpenTap.EventTraceListener.#ctor">
            <summary>Constructor of the EventTraceListener.</summary>
        </member>
        <member name="T:OpenTap.ExceptionCustomStackTrace">
            <summary>
            Used to rethrow, adding more exception info but without generating a lot of extra stack lines.
            </summary>
        </member>
        <member name="T:OpenTap.ExternalParameterAttribute">
            <summary>
            Indicates that a property on a <see cref="T:OpenTap.TestStep"/> (a step setting) should be a External Parameter by default when added into Test Plan editor UI.
            </summary>
        </member>
        <member name="P:OpenTap.ExternalParameterAttribute.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="M:OpenTap.ExternalParameterAttribute.#ctor(System.String)">
            <summary> 
            Create a new instance of ExternalParameterAttribute. 
            To be used on TestStep properties to indicates that it will be automatically added into External Parameter list when TestStep added into the test plan editor.
            </summary>
            <param name="Name">The name of the parameter.</param>
        </member>
        <member name="T:OpenTap.ExternalParameter">
            <summary> Represent an external test plan parameters that can be defined when a test plan is loaded. </summary>
        </member>
        <member name="P:OpenTap.ExternalParameter.Name">
            <summary> The name of this parameter. </summary>
        </member>
        <member name="P:OpenTap.ExternalParameter.Properties">
            <summary> Maps test step to member data. </summary>
        </member>
        <member name="P:OpenTap.ExternalParameter.PropertyInfos">
            <summary> Gets the list of PropertyInfos associated with this mask entry. </summary>
        </member>
        <member name="P:OpenTap.ExternalParameter.Value">
            <summary>
            Gets or sets the value of the combined properties. This requires the types to be the same or IConvertibles.
            </summary>
        </member>
        <member name="M:OpenTap.ExternalParameter.GetProperties(OpenTap.ITestStep)">
            <summary> Gets the property that is bound by the step with ID step. </summary>
            <param name="step"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ExternalParameter.#ctor(OpenTap.TestPlan,System.String)">
            <summary> Constructor for the ExternalParameter. </summary>
            <param name="Plan"></param>
            <param name="Name"></param>
        </member>
        <member name="M:OpenTap.ExternalParameter.Add(OpenTap.ITestStep,OpenTap.IMemberData)">
            <summary> Adds a property to the external parameters. </summary>
            <param name="step"></param>
            <param name="property"></param>
        </member>
        <member name="M:OpenTap.ExternalParameter.Remove(OpenTap.ITestStep)">
            <summary> Removes a step from the external parameters. </summary>
            <param name="step"></param>
        </member>
        <member name="T:OpenTap.ExternalParameters">
            <summary> External test plan parameters. </summary>
        </member>
        <member name="P:OpenTap.ExternalParameters.Entries">
            <summary> Gets the list of external test plan parameters. </summary>
        </member>
        <member name="M:OpenTap.ExternalParameters.#ctor(OpenTap.TestPlan)">
            <summary> Constructor for the ExternalParameters. </summary>
            <param name="plan"></param>
        </member>
        <member name="M:OpenTap.ExternalParameters.Add(OpenTap.ITestStep,OpenTap.IMemberData,System.String)">
            <summary> Adds a step property to the external test plan parameters. </summary>
            <param name="step"></param>
            <param name="setting"></param>
            <param name="Name"></param>
        </member>
        <member name="M:OpenTap.ExternalParameters.Remove(OpenTap.ITestStep,OpenTap.IMemberData,System.String)">
            <summary> Removes a step property from the external parameters. </summary>
            <param name="step">The step owning the property. </param>
            <param name="propertyInfo"> The property to remove. </param>
            <param name="name">Un-used parameter. </param>
        </member>
        <member name="M:OpenTap.ExternalParameters.Clean">
            <summary> Ensures that each entry test step is also present the test plan. </summary>
        </member>
        <member name="M:OpenTap.ExternalParameters.Get(System.String)">
            <summary> Gets an entry by name. </summary>
            <param name="externalParameterName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ExternalParameters.Find(OpenTap.ITestStep,OpenTap.IMemberData)">
            <summary>
            Finds the external parameter that is defined by 'step' and 'property'. If no external parameter is found null is returned.
            </summary>
            <param name="step"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.FileDependencyAttribute">
            <summary>
            Marking a property with the <see cref="T:OpenTap.FileDependencyAttribute"/> attribute indicates that the property specifies a file.
            Files specified by this property are included as dependencies during serialization.
            </summary>
        </member>
        <member name="T:OpenTap.FilePathAttribute">
            <summary>
            Identifies a string as a file path.
            </summary>
        </member>
        <member name="P:OpenTap.FilePathAttribute.FileExtension">
            <summary>
             Default file extension for this file path.
             </summary>
        </member>
        <member name="P:OpenTap.FilePathAttribute.OverwritePrompt">
            <summary>
            Boolean setting. When true, raises a prompt for permission to overwrite the file if it already exists. 
            If false, no prompt is raised and the file is overwritten.
            </summary>
        </member>
        <member name="P:OpenTap.FilePathAttribute.Behavior">
            <summary>
            The behavior of the file path dialog associated with this file path.
            </summary>
        </member>
        <member name="M:OpenTap.FilePathAttribute.#ctor">
            <summary>Constructor for the FilePathAttribute.</summary>
            <remarks>Provided for backward compatibility.</remarks>
        </member>
        <member name="M:OpenTap.FilePathAttribute.#ctor(OpenTap.FilePathAttribute.BehaviorChoice,System.String)">
            <summary>Constructor that takes BehaviourChoice and fileExtension parameters for the FilePathAttribute.</summary>
            <param name="behavior"></param>
            <param name="fileExtension">File extension or filter. Simple file extensions can be used like this: txt, csv, .... Or a filter extression can be used, for example "Text Document (*.txt) | *.txt. See examples for more info."  </param>
        </member>
        <member name="T:OpenTap.FilePathAttribute.BehaviorChoice">
            <summary>
            Describes how the file should be used on access.
            </summary>
        </member>
        <member name="F:OpenTap.FilePathAttribute.BehaviorChoice.Open">
            <summary>
            Opens the file.
            </summary>
        </member>
        <member name="F:OpenTap.FilePathAttribute.BehaviorChoice.Save">
            <summary>
            Saves the file. Provides a warning if file already exists.
            </summary>
        </member>
        <member name="T:OpenTap.FileTraceListener">
            <summary>
            TraceListener to be used in the App.Config file of the executable to write trace/log data to
            a file.
            </summary>
        </member>
        <member name="P:OpenTap.FileTraceListener.IsRelative">
            <summary>
            If the log should be written with absolute or relative time.
            </summary>
        </member>
        <member name="M:OpenTap.FileTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FileTraceListener class.
            </summary>
            <param name="fileName">Name of the file to write to.</param>
        </member>
        <member name="F:OpenTap.FileTraceListener.FileSizeLimit">
            <summary> Installs a file limit. When the limit is reached FileSIzeLimitReached is invoked. </summary>
        </member>
        <member name="M:OpenTap.FileTraceListener.#ctor(System.IO.Stream)">
            <summary>
             Initializes a new instance of the <see cref="T:OpenTap.FileTraceListener"/>
             class, using the stream as the recipient of the debugging and tracing output.
            </summary>
            <param name="stream">A System.IO.Stream that represents the stream the System.Diagnostics.TextWriterTraceListener writes to.</param>
        </member>
        <member name="T:OpenTap.HelpLinkAttribute">
            <summary> Defines a help link for an object.</summary>
            <remarks>General behavior is to search up the visual tree, until the first HelpLink is found.</remarks>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="P:OpenTap.HelpLinkAttribute.HelpLink">
            <summary>
            The HelpLink specified in this attribute.
            </summary>
        </member>
        <member name="M:OpenTap.HelpLinkAttribute.#ctor(System.String)">
            <summary>
            Sets the help link for this object.
            </summary>
            <param name="helpLink"></param>
        </member>
        <member name="M:OpenTap.HelpLinkAttribute.#ctor">
            <summary> 
            Creates a HelpLink without a specified link.
            This can be used if information about this item exists in the help for a parent scope. 
            </summary>
        </member>
        <member name="M:OpenTap.HybridStream.#ctor">
            <summary> Create a new instance with default parameters. </summary>
        </member>
        <member name="T:OpenTap.DeviceAddressAttribute">
            <summary>
            Specifies the device address used to establish a connection. Use inheritance to define a custom device address. />. 
            </summary>
        </member>
        <member name="T:OpenTap.IDeviceDiscovery">
            <summary>   Interface for defining a custom device address discovery system. Implement this along with a specialization of <see cref="T:OpenTap.DeviceAddressAttribute"/>.  </summary>
        </member>
        <member name="M:OpenTap.IDeviceDiscovery.CanDetect(OpenTap.DeviceAddressAttribute)">
            <summary> Returns true if this IDeviceDiscovery can look up addresses for the type of device address supplied.   </summary>
            <param name="DeviceAddress"> The device address kind. </param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.IDeviceDiscovery.DetectDeviceAddresses(OpenTap.DeviceAddressAttribute)">
            <summary> Looks up all the device addresses available for a given device address type. </summary>
            <param name="AddressType">  Type of the address. </param>
            <returns>   A string[]. </returns>
        </member>
        <member name="T:OpenTap.VisaAddressAttribute">
            <summary> 
            Identifies a string as a VISA address and finds a list of discovered VISA addresses. 
            </summary>
        </member>
        <member name="T:OpenTap.IDut">
            <summary>
            Base interface for DUT drivers. 
            </summary>
        </member>
        <member name="T:OpenTap.IDynamicMemberData">
            <summary>  A dynamic member data is a member data that can be detached from the owner member. </summary>
        </member>
        <member name="P:OpenTap.IDynamicMemberData.IsDisposed">
            <summary>  Returns true once the member can be safely ignored. </summary>
        </member>
        <member name="T:OpenTap.IDynamicStep">
            <summary>
            Interface to facilitate the dynamic generation of TestStep types when loading the TestPlan from XML. 
            </summary>
        </member>
        <member name="M:OpenTap.IDynamicStep.GetStepFactoryType">
            <summary>
            Returns the type of the class that can create the dynamic step. The Type returned should implement IDynamicStep.
            </summary>
        </member>
        <member name="M:OpenTap.IDynamicStep.GetStep">
            <summary> Returns itself or a new step to be exchanged with itself in the test plan. Must never return null. </summary>
        </member>
        <member name="T:OpenTap.IExternalTestPlanParameterExport">
            <summary>
            Custom handler for exporting external parameters from a TestPlan to a file.
            </summary>
        </member>
        <member name="P:OpenTap.IExternalTestPlanParameterExport.Extension">
            <summary>
            The extension of the imported file including the '.'. For example '.zip'.
            </summary>
        </member>
        <member name="P:OpenTap.IExternalTestPlanParameterExport.Name">
            <summary>
            Name of the file format. Shown when the user selects the format in the GUI.
            For example, Compressed Using Zip.
            </summary>
        </member>
        <member name="M:OpenTap.IExternalTestPlanParameterExport.ExportExternalParameters(OpenTap.TestPlan,System.String)">
            <summary>
            Exports currently configured external parameters and values to a file
            </summary>
            <param name="testPlan">The currently loaded TestPlan</param>
            <param name="parameterFilePath">Location of the file</param>
        </member>
        <member name="T:OpenTap.IExternalTestPlanParameterImport">
            <summary>
            Custom handler for importing external parameters from a file.
            </summary>
        </member>
        <member name="P:OpenTap.IExternalTestPlanParameterImport.Extension">
            <summary>
            The extension of the imported file including the '.'. For example '.zip'.
            </summary>
        </member>
        <member name="P:OpenTap.IExternalTestPlanParameterImport.Name">
            <summary>
            Name of the file format. Shown when the user selects the format in the GUI.
            For example, Compressed Using Zip.
            </summary>
        </member>
        <member name="M:OpenTap.IExternalTestPlanParameterImport.ImportExternalParameters(OpenTap.TestPlan,System.String)">
            <summary>
            Imports the values of a file into the external parameter values.
            TestPlan must already contain definitions for the external parameters found in the file.
            </summary>
            <param name="testPlan">The TestPlan to import the values into</param>
            <param name="parameterFilePath">Path of the file containing the values</param>
            <remarks>
            Exceptions should be thrown from here, when necessary.
            </remarks>
        </member>
        <member name="T:OpenTap.IInstrument">
            <summary>
            Base interface for all instruments.
            </summary>
        </member>
        <member name="T:OpenTap.ResourceReference">
            <summary>
            Represents a reference to a resource. A reference is defined as something in the TestPlan that references a Resource, and thus causes it to get opened. Used by <see cref="T:OpenTap.IResourceReferences"/>
            </summary>
        </member>
        <member name="P:OpenTap.ResourceReference.Instance">
            <summary>
            The TestStep or other Resource that is using some Resource
            </summary>
        </member>
        <member name="P:OpenTap.ResourceReference.Property">
            <summary>
            The property on <see cref="P:OpenTap.ResourceReference.Instance"/> that references the Resource
            </summary>
        </member>
        <member name="P:OpenTap.ResourceReference.Member">
            <summary> The property that references the Resource. </summary>
        </member>
        <member name="M:OpenTap.ResourceReference.#ctor(System.Object,System.Reflection.PropertyInfo)">
            <summary> Creates an immutable instance of this class. </summary>
        </member>
        <member name="M:OpenTap.ResourceReference.#ctor(System.Object,OpenTap.IMemberData)">
            <summary> Creates an immutable instance of this class. </summary>
        </member>
        <member name="T:OpenTap.IResourceReferences">
            <summary>
            Used in <see cref="T:OpenTap.ILockManager"/> to represents a resource and its references
            </summary>
        </member>
        <member name="P:OpenTap.IResourceReferences.Resource">
            <summary>
            The resource this item represents.
            </summary>
        </member>
        <member name="P:OpenTap.IResourceReferences.References">
            <summary>
            References to <see cref="P:OpenTap.IResourceReferences.Resource"/> from TestSteps (or other Resources). These references are the reason this resources needs to be opened when running a TestPlan.
            </summary>
        </member>
        <member name="T:OpenTap.ILockManager">
            <summary>
            Implementing this interface will enable hooks before and after resources are opened and closed.
            </summary>
        </member>
        <member name="M:OpenTap.ILockManager.BeforeOpen(System.Collections.Generic.IEnumerable{OpenTap.IResourceReferences},System.Threading.CancellationToken)">
            <summary>
            This hook is triggered before <see cref="M:OpenTap.IResource.Open"/> is executed. Only called once when e.g. a TestStep with mulitple resources starts.
            </summary>
            <param name="resources">The resources that will be opened.</param>
            <param name="abortToken">A token that will be signalled if the locking action should be cancelled.</param>
        </member>
        <member name="M:OpenTap.ILockManager.AfterClose(System.Collections.Generic.IEnumerable{OpenTap.IResourceReferences},System.Threading.CancellationToken)">
            <summary>
            This hook is triggered after the TestStep or TestPlan is done executing. If triggered by a TestStep, defered actions may still be running.
            </summary>
            <param name="resources">This will contain the same resources as given to <see cref="M:OpenTap.ILockManager.BeforeOpen(System.Collections.Generic.IEnumerable{OpenTap.IResourceReferences},System.Threading.CancellationToken)"/>".</param>
            <param name="abortToken">A token that will be signalled if the locking action should be cancelled.</param>
        </member>
        <member name="T:OpenTap.INotifyActivity">
            <summary>
            Notifies clients that the object is active.
            </summary>
        </member>
        <member name="E:OpenTap.INotifyActivity.Activity">
            <summary>
            Invoked on activity.
            </summary>
        </member>
        <member name="M:OpenTap.INotifyActivity.OnActivity">
            <summary>
            Triggers the ActivityStateChanged event.
            </summary>
        </member>
        <member name="T:OpenTap.IInput">
            <summary>   Interface for TestStep input properties. </summary>
        </member>
        <member name="P:OpenTap.IInput.Step">
            <summary>   Gets or sets the TestStep that has the output property to which this Input is connected. </summary>
        </member>
        <member name="P:OpenTap.IInput.Property">
            <summary>   Describes the <see cref="T:OpenTap.OutputAttribute"/> property on the <see cref="P:OpenTap.IInput.Step"/> to which this Input is connected.   </summary>
        </member>
        <member name="T:OpenTap.IInputTypeRestriction">
            <summary>
            Input type restriction for IInput.
            </summary>
        </member>
        <member name="M:OpenTap.IInputTypeRestriction.SupportsType(OpenTap.ITypeData)">
            <summary> returns true if the concrete type is supported. </summary>
            <param name="concreteType"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.Input`1">
            <summary>   
            A generic type that specifies input properties for a TestStep. The user can link this property to properties on other TestSteps that are marked with the <see cref="T:OpenTap.OutputAttribute"/>
            When used in a TestStep, Input value should always be set in the constructor.
            </summary>
            <typeparam name="T"> Generic type parameter. </typeparam>
        </member>
        <member name="P:OpenTap.Input`1.Property">
            <summary> 
            Describes the output property on the <see cref="P:OpenTap.Input`1.Step"/> to which this Input is connected.  
            </summary>
        </member>
        <member name="P:OpenTap.Input`1.PropertyName">
            <summary> Gets or sets the name of the property to which this Input is connected. Used for serialization. </summary>
        </member>
        <member name="P:OpenTap.Input`1.Step">
            <summary>   Gets or sets the TestStep that has the output property to which this Input is connected. </summary>
        </member>
        <member name="P:OpenTap.Input`1.Value">
            <summary>   Gets the value of the connected output property. </summary>
            <exception cref="T:System.Exception">    Thrown when this Input does not contain a reference to a TestStep output. </exception>
        </member>
        <member name="M:OpenTap.Input`1.ToString">
            <summary> Converts the value of this instance to its equivalent string representation. </summary>
            <returns> The string representation of the value of this instance. </returns>
        </member>
        <member name="M:OpenTap.Input`1.Equals(System.Object)">
            <summary> Compares one Input to another. </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Input`1.GetHashCode">
            <summary> Gets the hash code.</summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Input`1.SupportsType(OpenTap.ITypeData)">
            <summary> Returns true if this input supports the concrete type. </summary>
            <param name="concreteType"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Input`1.op_Equality(OpenTap.Input{`0},OpenTap.Input{`0})">
            <summary> Compares two Input for equality.</summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Input`1.op_Inequality(OpenTap.Input{`0},OpenTap.Input{`0})">
            <summary> Compares two Input for inequality.</summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.IInputOutputRelations">
            <summary> Accelerating structure for inputs / outputs owners. Note, it is recommended to implement this explicitly. </summary>
        </member>
        <member name="P:OpenTap.IInputOutputRelations.Inputs">
            <summary> Relations to the object ('this'). </summary>
        </member>
        <member name="P:OpenTap.IInputOutputRelations.Outputs">
            <summary>  Relations from the object('this'); </summary>
        </member>
        <member name="T:OpenTap.InputOutputRelation">
            <summary> Relations between two object and a pair of their members. </summary>
        </member>
        <member name="P:OpenTap.InputOutputRelation.OutputObject">
            <summary> The object that owns the output member. </summary>
        </member>
        <member name="P:OpenTap.InputOutputRelation.InputObject">
            <summary> The object that owns the input member.</summary>
        </member>
        <member name="P:OpenTap.InputOutputRelation.OutputMember">
            <summary> The member which the output value is read from. </summary>
        </member>
        <member name="P:OpenTap.InputOutputRelation.InputMember">
            <summary> The Member which the input value is read from. </summary>
        </member>
        <member name="M:OpenTap.InputOutputRelation.IsInput(OpenTap.ITestStepParent,OpenTap.IMemberData)">
            <summary> Returns true if member on object is assigned to an output / is an input. </summary>
        </member>
        <member name="M:OpenTap.InputOutputRelation.IsOutput(OpenTap.ITestStepParent,OpenTap.IMemberData)">
            <summary> Returns true if member on object is assigned to an input / is an output. </summary>
        </member>
        <member name="M:OpenTap.InputOutputRelation.Assign(OpenTap.ITestStepParent,OpenTap.IMemberData,OpenTap.ITestStepParent,OpenTap.IMemberData)">
            <summary> Create a relation between two members on two different objects. </summary>
        </member>
        <member name="M:OpenTap.InputOutputRelation.Unassign(OpenTap.InputOutputRelation)">
            <summary> Unassign an input/output relation. </summary>
            <param name="relation"></param>
        </member>
        <member name="M:OpenTap.InputOutputRelation.Unassign(OpenTap.ITestStepParent,OpenTap.IMemberData,OpenTap.ITestStepParent,OpenTap.IMemberData)">
            <summary> Unassign an input/output relation . </summary>
        </member>
        <member name="M:OpenTap.InputOutputRelation.UpdateInputs(OpenTap.ITestStepParent)">
            <summary> Updates the input of 'target' by reading the value of the source output.  </summary>
        </member>
        <member name="M:OpenTap.InputOutputRelation.SetOutputRelations(OpenTap.ITestStepParent,OpenTap.InputOutputRelation[])">
            <summary> Sets all the output relations from an object. </summary>
        </member>
        <member name="M:OpenTap.InputOutputRelation.GetInputRelations(OpenTap.ITestStepParent)">
            <summary> Gets a list of all the input relations to an object. </summary>
        </member>
        <member name="M:OpenTap.InputOutputRelation.GetOutputRelations(OpenTap.ITestStepParent)">
            <summary> Gets a list of all the output relations from an object. </summary>
        </member>
        <member name="M:OpenTap.InputOutputRelation.GetRelations(OpenTap.ITestStepParent)">
            <summary> Get input/output relations to/from a test step. </summary>
        </member>
        <member name="M:OpenTap.InputOutputRelation.SetInputRelations(OpenTap.ITestStepParent,OpenTap.InputOutputRelation[])">
            <summary> Sets a list of all the input relations to an object. </summary>
        </member>
        <member name="T:OpenTap.Instrument">
            <summary>
            Base class for all instruments. 
            Also see <seealso cref="T:OpenTap.ScpiInstrument"/>.
            </summary>
        </member>
        <member name="M:OpenTap.Instrument.#ctor">
            <summary>
            Sets the name of the instrument.
            </summary>
        </member>
        <member name="T:OpenTap.InstrumentSettings">
            <summary>
            ComponentSettings that contains an expandable list of instruments.
            </summary>
        </member>
        <member name="T:OpenTap.IInvokable">
            <summary> Similar to Action, but this can be implemented by other classes. </summary>
        </member>
        <member name="T:OpenTap.IInvokable`1">
            <summary>  Similar to Action(T), but this can be implemented by some class. </summary>
        </member>
        <member name="T:OpenTap.IInvokable`2">
            <summary> Similar to Action(T,T2), but this can be implemented by some class. </summary>
        </member>
        <member name="T:OpenTap.Invokable`1">
            <summary> Action(T) IInvokable. </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenTap.Invokable`1.AddArg``1">
            <summary> Add an ignored argument. </summary>
        </member>
        <member name="T:OpenTap.Invokable`2">
            <summary> Action(T) IInvokable. </summary>
        </member>
        <member name="T:OpenTap.IParameterizedMembersCache">
            <summary>
             for reverse caching of parameters. (source/member => parameter).f
            </summary>
        </member>
        <member name="T:OpenTap.ParameterizedMembersCache">
            <summary>
            For accessing IParameterizedMembersCaches.
            </summary>
        </member>
        <member name="T:OpenTap.IPictureDataProvider">
            <summary>
            A mechanism for retrieving <see cref="T:OpenTap.IPicture"/> data with <see cref="T:OpenTap.PictureDataExtensions"/>
            </summary>
        </member>
        <member name="P:OpenTap.IPictureDataProvider.Order">
            <summary>
            The order in which IPictureDataProviders will be tested. Lowers numbers go first
            </summary>
        </member>
        <member name="M:OpenTap.IPictureDataProvider.GetStream(OpenTap.IPicture)">
            <summary>
            Get a stream of the picture data
            </summary>
            <param name="picture"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.IPictureDataProvider.GetFormat(OpenTap.IPicture)">
            <summary>
            Get a string specifying the picture format
            </summary>
            <param name="picture"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.DefaultPictureDataProvider">
            <summary>
            Picture data provider for URI sources.
            </summary>
        </member>
        <member name="M:OpenTap.DefaultPictureDataProvider.normalizeSource(System.String)">
            <summary>
            Relative URIs are poorly supported in dotnet core. Ensure we only use absolute URIs by normalizing path strings to absolute paths.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.PictureDataExtensions">
            <summary>
            Provide <see cref="T:OpenTap.IPicture"/> data from <see cref="T:OpenTap.IPictureDataProvider"/> implementations.
            </summary>
        </member>
        <member name="M:OpenTap.PictureDataExtensions.GetStream(OpenTap.IPicture)">
            <summary>
            Get a stream of the picture from the first <see cref="T:OpenTap.IPictureDataProvider"/> which returns a non-null.
            </summary>
            <param name="picture"></param>
        </member>
        <member name="M:OpenTap.PictureDataExtensions.GetFormat(OpenTap.IPicture)">
            <summary>
            Get the format of the picture from the first <see cref="T:OpenTap.IPictureDataProvider"/> which returns a non-null.
            </summary>
            <param name="picture"></param>
        </member>
        <member name="T:OpenTap.IResource">
            <summary>
            Base interface for resources. Specializations include Dut, Instrument and ResultListener.
            </summary>
        </member>
        <member name="P:OpenTap.IResource.Name">
            <summary>
            A short name to display in the user interface in areas with limited space.
            </summary>
        </member>
        <member name="M:OpenTap.IResource.Open">
            <summary>
            When overridden in a derived class, opens a connection to the resource represented by this class.
            </summary>
        </member>
        <member name="M:OpenTap.IResource.Close">
            <summary>
            When overridden in a derived class, closes the connection made to the resource represented by this class.
            </summary>
        </member>
        <member name="P:OpenTap.IResource.IsConnected">
            <summary>
            Indicates whether this DUT is currently connected.
            This value should be set by Open() and Close().
            </summary>
        </member>
        <member name="T:OpenTap.IEnabledResource">
            <summary>
            Resources that can be enabled and disabled. Currently this is only supported for ResultListeners.
            </summary>
        </member>
        <member name="P:OpenTap.IEnabledResource.IsEnabled">
            <summary>
            Gets or sets if this resources is enabled.
            </summary>
        </member>
        <member name="T:OpenTap.IResultListener">
            <summary>
            Interface forming the basis for all ResultListeners.
            </summary>
        </member>
        <member name="M:OpenTap.IResultListener.OnTestPlanRunStart(OpenTap.TestPlanRun)">
            <summary>
            Called just when test plan starts.
            </summary>
            <param name="planRun">Test plan run parameters.</param>
        </member>
        <member name="M:OpenTap.IResultListener.OnTestPlanRunCompleted(OpenTap.TestPlanRun,System.IO.Stream)">
            <summary>
            Called when test plan finishes. At this point no more result will be sent 
            to the result listener from said test plan run.
            </summary>
            <param name="planRun">Test plan run parameters.</param>
            <param name="logStream">The log file from the test plan run as a stream.</param>
        </member>
        <member name="M:OpenTap.IResultListener.OnTestStepRunStart(OpenTap.TestStepRun)">
            <summary>
            Called just before a test step is started.
            </summary>
            <param name="stepRun">Step run parameters.</param>
        </member>
        <member name="M:OpenTap.IResultListener.OnTestStepRunCompleted(OpenTap.TestStepRun)">
            <summary>
            Called when a test step run is completed.
            Result might still be propagated to the result listener after this event.
            </summary>
            <param name="stepRun">Step run parameters.</param>
        </member>
        <member name="M:OpenTap.IResultListener.OnResultPublished(System.Guid,OpenTap.ResultTable)">
            <summary>
            Called when a result is received.
            </summary>
            <param name="stepRunID"> Step run parameters.</param>
            <param name="result">Result structure.</param>
        </member>
        <member name="T:OpenTap.StepState">
            <summary>
            An enum containing the execution states of a step.
            </summary>
        </member>
        <member name="F:OpenTap.StepState.Idle">
            <summary>
            The step is not running.
            </summary>
        </member>
        <member name="F:OpenTap.StepState.PrePlanRun">
            <summary>
            The step is executing its PrePlanRun code.
            </summary>
        </member>
        <member name="F:OpenTap.StepState.Running">
            <summary>
            The step is executing its Run code.
            </summary>
        </member>
        <member name="F:OpenTap.StepState.Deferred">
            <summary>
            The step is executing deferred actions after Run.
            </summary>
        </member>
        <member name="F:OpenTap.StepState.PostPlanRun">
            <summary>
            The step is executing its PostPlanRun code.
            </summary>
        </member>
        <member name="T:OpenTap.IExecutionListener">
            <summary>
            Interface to listen to when steps execute what.
            </summary>
        </member>
        <member name="M:OpenTap.IExecutionListener.OnTestStepExecutionChanged(System.Guid,OpenTap.TestStepRun,OpenTap.StepState,System.Int64)">
            <summary>
            Called whenever a step changes its execution state.
            </summary>
            <param name="stepId">The given step</param>
            <param name="stepRun">The given step run. For PrePlanRun and PostPlanRun this is null.</param>
            <param name="newState">The state that the teststep transitioned into.</param>
            <param name="changeTime">The precise timestamp of when the change happened.</param>
        </member>
        <member name="T:OpenTap.IResultSink">
            <summary>
            Object used to indicate that a TestStep is interested in results from another TestStep. 
            A public property of this type should exist on the interested TestStep.
            Methods defined in this interface are called on all instances found as properties on TestSteps in the TestPlan.
            </summary>
        </member>
        <member name="M:OpenTap.IResultSink.OnResultPublished(OpenTap.TestStepRun,OpenTap.ResultTable)">
            <summary>
            Called when a TestStep publishes results. This is happening in a background thread.
            </summary>
        </member>
        <member name="M:OpenTap.IResultSink.OnTestStepRunStart(OpenTap.TestStepRun)">
            <summary>
            Called when a TestStep is starting. This is happening in a background thread.
            </summary>
        </member>
        <member name="M:OpenTap.IResultSink.OnTestStepRunCompleted(OpenTap.TestStepRun)">
            <summary>
            Called when a TestStep is completed. This is happening in a background thread. ResultPublished will not be called anymore with this TestStepRun after this.
            </summary>
        </member>
        <member name="M:OpenTap.IResultSink.OnTestPlanRunStart(OpenTap.TestPlanRun)">
            <summary>
            Called when a TestPlan starts running. This is happening in a background thread.
            </summary>
        </member>
        <member name="M:OpenTap.IResultSink.OnTestPlanRunCompleted(OpenTap.TestPlanRun)">
            <summary>
            Called when a TestPlan run is completed. This is happening in a background thread. 
            </summary>
        </member>
        <member name="T:OpenTap.ScalarResultSink`1">
            <summary>
            ResultSink that will provide the first result from a given result column published by a given TestStep.
            When SourceTestStep is inside a loop step, only results from the last iteration of SourceTestStep is accessible.
            </summary>
        </member>
        <member name="P:OpenTap.ScalarResultSink`1.SourceTestStep">
            <summary>
            The ID of the source TestStep that we are interested in results from.
            </summary>
        </member>
        <member name="P:OpenTap.ScalarResultSink`1.ResultColumnName">
            <summary>
            The name of the result column to get the result from.
            </summary>
        </member>
        <member name="M:OpenTap.ScalarResultSink`1.#ctor(OpenTap.ITestStep)">
             <summary>
             Creates an instance. This should probably be called from the constructor of the TestStep.
             </summary>
             <example>
             <code>
            public class ListeningStepExample : TestStep
            {
                public ITestStep SourceStep { get => Sink.SourceTestStep; set => Sink.SourceTestStep = value; }
                public ScalarResultSink&lt;double&gt; Sink { get; set; }
            
                public ListeningStepExample()
                {
                    Sink = new ScalarResultSink&lt;double&gt;(this);
                }
            
                public override void Run()
                {
                    log.Debug("Result was: {0}", Sink.GetResult(TapThread.Current.AbortToken));
                }
            }
             </code>
             </example>
             <param name="listeningStep"></param>
        </member>
        <member name="M:OpenTap.ScalarResultSink`1.GetResult(System.Threading.CancellationToken)">
            <summary>
            Called by TestSteps when the result is needed. Blocks until a result is available.
            </summary>
        </member>
        <member name="M:OpenTap.ScalarResultSink`1.TryGetResult(`0@)">
            <summary>
            Called by TestSteps when the result is needed. Returns true if a result is available.
            </summary>
        </member>
        <member name="M:OpenTap.ScalarResultSink`1.OnTestStepRunStart(OpenTap.TestStepRun)">
            <summary>
            Resets result collection when a new run of the <see cref="P:OpenTap.ScalarResultSink`1.SourceTestStep"/> is started.
            </summary>
        </member>
        <member name="M:OpenTap.ScalarResultSink`1.OnTestStepRunCompleted(OpenTap.TestStepRun)">
            <summary>
            Called when a TestStep is completed.
            </summary>
        </member>
        <member name="M:OpenTap.ScalarResultSink`1.OnResultPublished(OpenTap.TestStepRun,OpenTap.ResultTable)">
            <summary>
            Called by OpenTAP when the source TestStep publishes results. This is happening in a background thread.
            </summary>
        </member>
        <member name="M:OpenTap.ScalarResultSink`1.OnTestPlanRunStart(OpenTap.TestPlanRun)">
            <summary> Initializes this instance. </summary>
        </member>
        <member name="M:OpenTap.ScalarResultSink`1.OnTestPlanRunCompleted(OpenTap.TestPlanRun)">
            <summary> Cleans up after this instance </summary>
        </member>
        <member name="T:OpenTap.IAttributedObject">
            <summary>
            A named object.
            </summary>
        </member>
        <member name="P:OpenTap.IAttributedObject.Name">
            <summary>
            Name of this object.  
            </summary>
        </member>
        <member name="P:OpenTap.IAttributedObject.ObjectType">
            <summary>
            String describing this object.  
            </summary>
        </member>
        <member name="T:OpenTap.IParameter">
            <summary>
            A named parameter.
            </summary>
        </member>
        <member name="P:OpenTap.IParameter.Group">
            <summary>
            Optional name of the group of parameters to which this parameter belongs.  
            </summary>
        </member>
        <member name="P:OpenTap.IParameter.Value">
            <summary>
            Value of this parameter.  
            </summary>
        </member>
        <member name="T:OpenTap.IParameters">
            <summary>
            A list of parameters, with a string indexer.
            </summary>
        </member>
        <member name="P:OpenTap.IParameters.Item(System.String)">
            <summary>
            Get a parameter by name. This can be the ObjectType or Name of a parameter. e.g "OpenTap.Unit" or just "Unit".
            </summary>
            <returns>Null if the parameter was not found</returns>
        </member>
        <member name="T:OpenTap.IData">
            <summary>
            An object in a hierarchy with a name and some named properties.
            </summary>
        </member>
        <member name="P:OpenTap.IData.Parent">
            <summary>
            Parent of this object. 
            </summary>
        </member>
        <member name="P:OpenTap.IData.Parameters">
            <summary>
            All parameters that describes this object.
            </summary>
        </member>
        <member name="M:OpenTap.IData.GetID">
            <summary>
            Returns an ID that identifies this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.IResultTable">
            <summary>
            Contains data that has the same table name, column names, and result data types as a <see cref="T:OpenTap.ResultTable"/>.
            </summary>
        </member>
        <member name="P:OpenTap.IResultTable.Columns">
            <summary>
            Array containing the result columns.  
            </summary>
        </member>
        <member name="T:OpenTap.IResultColumn">
            <summary>
            Interface to store <see cref="T:OpenTap.IResultTable"/> column data.
            </summary>
        </member>
        <member name="P:OpenTap.IResultColumn.Data">
            <summary>
            Data in the column.  
            </summary>
        </member>
        <member name="T:OpenTap.AttachmentType">
            <summary>
            An "extensible Enum" that can be used to describe attachments.
            </summary>
        </member>
        <member name="M:OpenTap.AttachmentType.#ctor(System.String)">
            <summary>
            Creates an attachment type object.
            </summary>
        </member>
        <member name="M:OpenTap.AttachmentType.System#IEquatable{OpenTap#AttachmentType}#Equals(OpenTap.AttachmentType)">
            <summary>
            Compares this object to another.
            </summary>
        </member>
        <member name="M:OpenTap.AttachmentType.Equals(System.Object)">
            <summary>
            Compares this object to another.
            </summary>
        </member>
        <member name="M:OpenTap.AttachmentType.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
        </member>
        <member name="P:OpenTap.AttachmentType.LogFile">
            <summary>
            A log file.
            </summary>
        </member>
        <member name="P:OpenTap.AttachmentType.TestPlan">
            <summary>
            A TestPlan XML file.
            </summary>
        </member>
        <member name="T:OpenTap.ComparisonOperator">
            <summary>
            The operation for <see cref="T:OpenTap.SearchParameterValue"/>.
            </summary>
        </member>
        <member name="F:OpenTap.ComparisonOperator.Equal">
            <summary>Two specified values must be the same.</summary>
        </member>
        <member name="F:OpenTap.ComparisonOperator.NotEqual">
            <summary>Two specified values must be different.</summary>
        </member>
        <member name="F:OpenTap.ComparisonOperator.Less">
            <summary>Parameter must be less than.</summary>
        </member>
        <member name="F:OpenTap.ComparisonOperator.LessEqual">
            <summary>Parameter must be less than or equal.</summary>
        </member>
        <member name="F:OpenTap.ComparisonOperator.Greater">
            <summary>Parameter must be greater than.</summary>
        </member>
        <member name="F:OpenTap.ComparisonOperator.GreaterEqual">
            <summary>Parameter must be greater than or equal.</summary>
        </member>
        <member name="F:OpenTap.ComparisonOperator.Like">
            <summary>Parameter must be similar to the value.</summary>
            <remarks>This is guaranteed to be true if the two values are equal, but is not otherwise guaranteed to work in any specific way.</remarks>
        </member>
        <member name="F:OpenTap.ComparisonOperator.Exists">
            <summary>
            Value must exist as a parameter name or value. 
            </summary>
        </member>
        <member name="T:OpenTap.LogicalOperator">
            <summary>
            Operation for <see cref="T:OpenTap.SearchCombinator"/>.
            </summary>
        </member>
        <member name="F:OpenTap.LogicalOperator.And">
            <summary>
            Specifies that both conditions must be satisfied.
            </summary>
        </member>
        <member name="F:OpenTap.LogicalOperator.Or">
            <summary>
            Specifies that at least one of the two conditions must be satisfied.
            </summary>
        </member>
        <member name="T:OpenTap.SearchOperand">
            <summary>
            The basic search operand from which the other search operands are derived. 
            </summary>
        </member>
        <member name="T:OpenTap.SearchChildrenOf">
            <summary> Matches all children of the specified parents. </summary>
        </member>
        <member name="P:OpenTap.SearchChildrenOf.Parents">
            <summary>
            The list of elements to match the children of.
            </summary>
        </member>
        <member name="M:OpenTap.SearchChildrenOf.#ctor(System.Collections.Generic.List{OpenTap.IData})">
            <summary> Matches all children of the specified parents. </summary>
            <param name="parents"></param>
        </member>
        <member name="T:OpenTap.SearchLastRun">
            <summary>
            Matches the last test plan run.
            </summary>
        </member>
        <member name="P:OpenTap.SearchLastRun.Count">
            <summary>
            Number of the last runs to select.
            </summary>
        </member>
        <member name="M:OpenTap.SearchLastRun.#ctor(System.Int32)">
            <summary>
            Matches the last test plan run.
            </summary>
        </member>
        <member name="T:OpenTap.SearchCombinator">
            <summary> A binary operation between two other operations. </summary>
        </member>
        <member name="P:OpenTap.SearchCombinator.A">
            <summary>
            Left-side operand.  
            </summary>
        </member>
        <member name="P:OpenTap.SearchCombinator.Operator">
            <summary>
            Operation to perform.  
            </summary>
        </member>
        <member name="P:OpenTap.SearchCombinator.B">
            <summary>
            Right-side operand.  
            </summary>
        </member>
        <member name="M:OpenTap.SearchCombinator.#ctor(OpenTap.SearchOperand,OpenTap.LogicalOperator,OpenTap.SearchOperand)">
            <summary> A binary operation between two other operations. </summary>
        </member>
        <member name="T:OpenTap.SearchParameterValue">
            <summary>
            Comparison between a named parameter and a value.
            </summary>
        </member>
        <member name="P:OpenTap.SearchParameterValue.Scope">
            <summary>
            Scope of the parameter to match ("", "plan", or "step").  
            </summary>
        </member>
        <member name="P:OpenTap.SearchParameterValue.Group">
            <summary>
            GroupName of the parameter to match (leave empty to match any group).  
            </summary>
        </member>
        <member name="P:OpenTap.SearchParameterValue.Parameter">
            <summary>
            Name of the parameter to match.  
            </summary>
        </member>
        <member name="P:OpenTap.SearchParameterValue.CompareOperator">
            <summary>
            Operation to perform.  
            </summary>
        </member>
        <member name="P:OpenTap.SearchParameterValue.Value">
            <summary>
            Value to compare against the right-side value.  
            </summary>
        </member>
        <member name="M:OpenTap.SearchParameterValue.#ctor(System.String,OpenTap.ComparisonOperator,System.IConvertible,System.String,System.String)">
            <summary> Comparison between a named parameter and a value. </summary>
            <param name="parameter"></param>
            <param name="compareOperator"></param>
            <param name="value"></param>
            <param name="group"></param>
            <param name="scope"></param>
        </member>
        <member name="T:OpenTap.SearchRange">
            <summary>
            Comparison between a named parameter and a value.
            </summary>
        </member>
        <member name="P:OpenTap.SearchRange.Scope">
            <summary>
            The scope of the parameter to match. Could be "plan" or "step".
            </summary>
        </member>
        <member name="P:OpenTap.SearchRange.Parameter">
            <summary>
            The name of the parameter to match.
            </summary>
        </member>
        <member name="P:OpenTap.SearchRange.Value">
            <summary>
            The value to compare against as the right-hand side.
            </summary>
        </member>
        <member name="T:OpenTap.SearchCondition">
            <summary>
            The conditions for what to search for.
            </summary>
        </member>
        <member name="P:OpenTap.SearchCondition.GetParents">
            <summary>
            When true, specifies that any matched tree nodes automatically match all parents of that <see cref="T:OpenTap.IData"/> element.  
            </summary>
        </member>
        <member name="P:OpenTap.SearchCondition.GetChildren">
            <summary>
            When true, specifies that a matched tree root node automatically matches all children of that given <see cref="T:OpenTap.IData"/> element.  
            </summary>
        </member>
        <member name="P:OpenTap.SearchCondition.Operation">
            <summary>
            The tree of <see cref="T:OpenTap.SearchOperand"/> conditions to match for.  
            </summary>
        </member>
        <member name="M:OpenTap.SearchCondition.All">
            <summary>
            Condition that will match all elements in the result store.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.SearchCondition.ChildrenOf(System.Collections.Generic.IEnumerable{OpenTap.IData})">
            <summary>
            Condition that will match any elements in a list as well as all children of those elements.  
            </summary>
            <param name="testPlanRunIds"></param>
        </member>
        <member name="M:OpenTap.SearchCondition.LastRun">
            <summary>
            Condition that will match all elements in the result store.  
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.LimitSet">
            <summary>
            A structure containing limit set data.
            </summary>
        </member>
        <member name="P:OpenTap.LimitSet.Name">
            <summary>
            The friendly name of the limit set.
            </summary>
        </member>
        <member name="P:OpenTap.LimitSet.Limits">
            <summary>
            The limits in this limit set.
            </summary>
        </member>
        <member name="M:OpenTap.LimitSet.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.LimitSet"/> class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:OpenTap.Limit">
            <summary>
            A single limit from a limit set.
            </summary>
        </member>
        <member name="P:OpenTap.Limit.ResultName">
            <summary>
            The result name to match.
            </summary>
        </member>
        <member name="P:OpenTap.Limit.ColumnName">
            <summary>
            The result column to which the limits are applied.
            </summary>
        </member>
        <member name="P:OpenTap.Limit.LowerLimit">
            <summary>
            The lower limit to apply to the result.
            </summary>
        </member>
        <member name="P:OpenTap.Limit.UpperLimit">
            <summary>
            The upper limit to apply to the result.
            </summary>
        </member>
        <member name="P:OpenTap.Limit.Conditions">
            <summary>
            The conditions that have to apply for this limit.
            </summary>
        </member>
        <member name="M:OpenTap.Limit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.Limit"/> class.
            </summary>
        </member>
        <member name="T:OpenTap.LimitCondition">
            <summary>
            A condition for a specific limit that must be satisfied for the limit to apply.
            </summary>
        </member>
        <member name="P:OpenTap.LimitCondition.ColumnName">
            <summary>
            The result column name that this condition applies to.
            </summary>
        </member>
        <member name="P:OpenTap.LimitCondition.LowerLimit">
            <summary>
            The lower limit for this condition.
            </summary>
        </member>
        <member name="P:OpenTap.LimitCondition.UpperLimit">
            <summary>
            The upper limit for this condition.
            </summary>
        </member>
        <member name="M:OpenTap.LimitCondition.ToString">
            <summary>
            Returns a string describing this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.LimitCondition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.LimitCondition"/> class.
            </summary>
        </member>
        <member name="T:OpenTap.IResultStore">
            <summary>
            Interface to results storage plugins.
            </summary>
        </member>
        <member name="M:OpenTap.IResultStore.GetProperties(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get list of properties on entries in the database which starts with a given string.
            The returned properties should be ordered by their frequency of use in the dataset.
            </summary>
            <param name="scope">Only consider parameters from this scope. Could be "plan" or "step", or empty to consider all scopes.</param>
            <param name="group">Only consider parameters from this parameter group. Can be empty to match any group.</param>
            <param name="startsWith"></param>
            <param name="limit"></param>
        </member>
        <member name="M:OpenTap.IResultStore.GetEntries(OpenTap.SearchCondition,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Gets all <see cref="T:OpenTap.IData"/> elements which match a given search condition.
            </summary>
            <param name="cond"></param>
            <param name="limitsets"></param>
            <param name="withResults"></param>
        </member>
        <member name="M:OpenTap.IResultStore.DeleteEntries(System.Collections.Generic.IEnumerable{OpenTap.IData})">
            <summary>
            Tries to delete the given entries and all sub entries.
            </summary>
            <param name="entries">Entries to delete.</param>
        </member>
        <member name="M:OpenTap.IResultStore.GetLimitSets">
            <summary>
            Returns all registered limit sets.
            </summary>
        </member>
        <member name="M:OpenTap.IResultStore.AddLimitSet(OpenTap.LimitSet)">
            <summary>
            Adds a limit set to the results store.
            </summary>
            <param name="limitSet"></param>
        </member>
        <member name="M:OpenTap.IResultStore.DeleteLimitSet(System.String)">
            <summary>
            Deletes a limit set from the database.
            </summary>
            <param name="Name">The name of the limit set to delete.</param>
        </member>
        <member name="M:OpenTap.IResultStore.GetAttachment(OpenTap.IData,OpenTap.AttachmentType)">
            <summary>
            Returns the binary data for the given objects attachment, or null if it could not be found.
            </summary>
            <param name="entry"></param>
            <param name="attachmentType"></param>
        </member>
        <member name="M:OpenTap.IResultStore.GetValidAttachments(OpenTap.IData)">
            <summary>
            Gets a list of attachments on the given object.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:OpenTap.IResultStore.GetAverageDuration(OpenTap.TestStepRun,System.Int32)">
            <summary>
            Returns the average duration of the last <paramref name="averageCount"/> step runs with similar settings.
            </summary>
            <param name="step"></param>
            <param name="averageCount"></param>
        </member>
        <member name="M:OpenTap.IResultStore.GetAverageDuration(OpenTap.TestPlanRun,System.Int32)">
            <summary>
            Returns the average duration of the last <paramref name="averageCount"/> PlanRuns runs with a similar plan.
            </summary>
            <param name="plan"></param>
            <param name="averageCount"></param>
        </member>
        <member name="T:OpenTap.IAttachmentStream">
            <summary>
            IResultStore that supports attachment streams.
            </summary>
        </member>
        <member name="M:OpenTap.IAttachmentStream.GetAttachmentStream(OpenTap.IData,OpenTap.AttachmentType)">
            <summary>
            Returns a stream that can read a given attachment entry. The returned stream must be disposed.
            </summary>
            <param name="entry"></param>
            <param name="attachmentType"></param>
        </member>
        <member name="T:OpenTap.IResultTagging">
            <summary>
            Interface to support result tagging in the OpenTAP Results Viewer.
            </summary>
        </member>
        <member name="M:OpenTap.IResultTagging.AddTestPlanRunParameter(System.Collections.Generic.IEnumerable{OpenTap.IData},System.String,System.String,System.IConvertible)">
            <summary>
            Add a TestPlan parameter to a number of TestPlans.
            </summary>
        </member>
        <member name="M:OpenTap.IResultTagging.DeleteTestPlanRunParameter(System.Collections.Generic.IEnumerable{OpenTap.IData},System.String,System.String,System.IConvertible)">
            <summary>
            Delete a TestPlan parameter from a number of TestPlans.
            </summary>
        </member>
        <member name="M:OpenTap.IResultTagging.GetTestPlanRunParameterValues(System.String,System.String,System.String,System.Int32)">
            <summary>
            Get distinct TestPlan parameter values ordered by popularity (number of uses). Optionally limited to Limit values, scope and group.
            </summary>
        </member>
        <member name="T:OpenTap.ResultUpdateEvent">
            <summary>
            Delegate that triggers notification updates when results are added to the store.
            </summary>
        </member>
        <member name="T:OpenTap.IResultStoreNotification">
            <summary>
            Interface to add notifications when the Results Viewer gets new data.
            </summary>
        </member>
        <member name="E:OpenTap.IResultStoreNotification.ResultUpdated">
            <summary>
            Event triggered when results are added to the store.
            </summary>
        </member>
        <member name="E:OpenTap.IResultStoreNotification.RunsUpdated">
            <summary>
            Event triggered when TestPlan or TestStep runs are added to the store.
            </summary>
        </member>
        <member name="M:OpenTap.IResultStoreNotification.EnableUpdateEvents">
            <summary>
            Enables the Updated events.
            </summary>
        </member>
        <member name="M:OpenTap.IResultStoreNotification.DisableUpdateEvents">
            <summary>
            Disables the Updated events.
            </summary>
        </member>
        <member name="T:OpenTap.IFileResultStore">
            <summary>
            When implemented along with <see cref="T:OpenTap.IResultStore"/>, this interface allows files with a given extension to be opened using your <see cref="T:OpenTap.ResultListener"/>. 
            It also can be used to allow the export of results to a file. 
            </summary>
        </member>
        <member name="P:OpenTap.IFileResultStore.FilePath">
            <summary>
            Gets or sets the currently chosen file.
            </summary>
        </member>
        <member name="P:OpenTap.IFileResultStore.DefaultExtension">
            <summary>
            Default extension without the dot (.) that files must match in order to load a file's results to Results Viewer (e.g. TapResults, not .TapResults).  
            </summary>
        </member>
        <member name="T:OpenTap.ScpiIOResult">
            <summary>
            Error codes from the IScpiIO methods
            </summary>
        </member>
        <member name="F:OpenTap.ScpiIOResult.Success">
            <summary>
            Indicates successful completion.
            </summary>
        </member>
        <member name="F:OpenTap.ScpiIOResult.Success_MaxCount">
            <summary>
            Indicates successful completion because the requested amount of bytes were read/written.
            </summary>
        </member>
        <member name="F:OpenTap.ScpiIOResult.Success_TermChar">
            <summary>
            Indicates successful completion because a terminating character was found.
            </summary>
        </member>
        <member name="F:OpenTap.ScpiIOResult.Error_General">
            <summary>
            General unspecified error.
            </summary>
        </member>
        <member name="F:OpenTap.ScpiIOResult.Error_ResourceLocked">
            <summary>
            The call failed due to another client having a lock on the instrument.
            </summary>
        </member>
        <member name="F:OpenTap.ScpiIOResult.Error_Timeout">
            <summary>
            Indicates that the call timed out.
            </summary>
        </member>
        <member name="F:OpenTap.ScpiIOResult.Error_ConnectionLost">
            <summary>
            Indicates that the connection to the instrument was lost.
            </summary>
        </member>
        <member name="F:OpenTap.ScpiIOResult.Error_ResourceNotFound">
            <summary>
            The resource could not be found.
            </summary>
        </member>
        <member name="T:OpenTap.ScpiLockType">
            <summary>
            Types of VISA locks.
            </summary>
        </member>
        <member name="F:OpenTap.ScpiLockType.Exclusive">
            <summary>
            Indicates that the client should get an exclusive lock.
            </summary>
        </member>
        <member name="F:OpenTap.ScpiLockType.Shared">
            <summary>
            Indicates that a client should get a shared lock.
            </summary>
        </member>
        <member name="T:OpenTap.IScpiIO">
            <summary>
            Represents low-level IO primitives for a given SCPI instrument.
            </summary>
        </member>
        <member name="M:OpenTap.IScpiIO.DeviceClear">
            <summary>
            Clears the SCPI state, including any errors in the error queue.
            </summary>
        </member>
        <member name="M:OpenTap.IScpiIO.ReadSTB(System.Byte@)">
            <summary>
            Reads the status byte of the instrument.
            </summary>
            <param name="stb">The current status byte.</param>
        </member>
        <member name="M:OpenTap.IScpiIO.Read(System.ArraySegment{System.Byte},System.Int32,System.Boolean@,System.Int32@)">
            <summary>
            Reads a number of bytes from the instrument.
            </summary>
            <param name="buffer">The target buffer to read to.</param>
            <param name="count">The number of bytes to read.</param>
            <param name="eoi">This will indicate whether an EOI indicator was received.</param>
            <param name="read">The number of bytes that was actually read if succesful.</param>
        </member>
        <member name="M:OpenTap.IScpiIO.Write(System.ArraySegment{System.Byte},System.Int32,System.Int32@)">
            <summary>
            Writes a number of bytes to the instrument.
            </summary>
            <remarks>The returned error code will indicate whether the EOI was sent.</remarks>
            <param name="buffer">The buffer to write from.</param>
            <param name="count">The number of bytes to read.</param>
            <param name="written">The number of bytes that was actually written if succesful.</param>
        </member>
        <member name="M:OpenTap.IScpiIO.Lock(OpenTap.ScpiLockType,System.String)">
            <summary>
            Try to acquire a lock on the instrument.
            </summary>
            <param name="lockType">Indicates which kind of lock should be acquired.</param>
            <param name="sharedKey">In case the type of lock is </param>
        </member>
        <member name="M:OpenTap.IScpiIO.Unlock">
            <summary>
            Unlock an instrument.
            </summary>
        </member>
        <member name="P:OpenTap.IScpiIO.SendEnd">
            <summary>
            Indicates whether a <see cref="M:OpenTap.IScpiIO.Write(System.ArraySegment{System.Byte},System.Int32,System.Int32@)"/> should generate an end-of-message indicator when writing its last byte.
            </summary>
        </member>
        <member name="P:OpenTap.IScpiIO.IOTimeoutMS">
            <summary>
            Indicates the timeout in milliseconds for any of the IO operations.
            </summary>
        </member>
        <member name="P:OpenTap.IScpiIO.LockTimeoutMS">
            <summary>
            Indicates the timeout in milliseconds for acquiring a lock.
            </summary>
        </member>
        <member name="P:OpenTap.IScpiIO.TerminationCharacter">
            <summary>
            Sets the termination character, if any.
            </summary>
        </member>
        <member name="P:OpenTap.IScpiIO.UseTerminationCharacter">
            <summary>
            Controls whether the IO operations should use a termination character.
            </summary>
        </member>
        <member name="P:OpenTap.IScpiIO.ResourceClass">
            <summary>
            Returns the resource class of the connected instrument.
            </summary>
        </member>
        <member name="T:OpenTap.IScpiIO2">
            <summary>
            Represents low-level IO primitives for a given SCPI instrument. IScpiIO2 is the full interface needed to specify a VISA connection.
            </summary>
        </member>
        <member name="M:OpenTap.IScpiIO2.Open(System.String,System.Boolean)">
            <summary> Opens a connection to the instrument. </summary>
            <param name="visaAddress">Visa address of the instrument.</param>
            <param name="lock">if the instrument should be locked when the connection is established.</param>
            <returns>Visa error code.</returns>
        </member>
        <member name="M:OpenTap.IScpiIO2.Close">
            <summary> Close the connection to the instrument. </summary>
            <returns>Visa Error code.</returns>
        </member>
        <member name="P:OpenTap.IScpiIO2.ID">
            <summary> Resource ID attached to this instrument. </summary>
        </member>
        <member name="E:OpenTap.IScpiIO2.SRQ">
            <summary> Callback from SRQ instrument events. </summary>
        </member>
        <member name="M:OpenTap.IScpiIO2.OpenSRQ">
            <summary>  Open SRQ Callback handling. </summary>
        </member>
        <member name="M:OpenTap.IScpiIO2.CloseSRQ">
            <summary> Close SRQ Callback handling. </summary>
        </member>
        <member name="T:OpenTap.ScpiIOSrqDelegate">
            <summary> SCPI IO SRQ Event Delegate </summary>
            <param name="sender"></param>
        </member>
        <member name="T:OpenTap.IScpiInstrument">
            <summary> 
            Represents a connection to talk to any SCPI-enabled instrument.
            </summary>
        </member>
        <member name="P:OpenTap.IScpiInstrument.IO">
            <summary>
            Get access to the low-level primitives of the connection.
            </summary>
        </member>
        <member name="M:OpenTap.IScpiInstrument.ScpiCommand(System.String)">
            <summary>
            Sends a SCPI command to the instrument.
            </summary>
            <param name="command">The command to send.</param>
            <remarks>Non-blocking.</remarks>
        </member>
        <member name="M:OpenTap.IScpiInstrument.ScpiQuery(System.String,System.Boolean)">
            <summary>
            Sends a SCPI query to the instrument and waits for a response.
            </summary>
            <param name="query">The SCPI query to send.</param>
            <param name="isSilent">True to suppress log messages.</param>
            <returns>The response from the instrument.</returns>
        </member>
        <member name="M:OpenTap.IScpiInstrument.ScpiIEEEBlockCommand(System.String,System.Byte[])">
            <summary>
            Sends a IEEE Block SCPI command to the instrument.
            </summary>
        </member>
        <member name="M:OpenTap.IScpiInstrument.ScpiQueryBlock(System.String)">
            <summary>
            Sends a IEEE Block SCPI query to the instrument and waits for a response. The response is assumed to be IEEE block data.
            </summary>
            <param name="query">The SCPI query to send.</param>
            <returns>The response from the instrument.</returns>
        </member>
        <member name="T:OpenTap.IStringConvertProvider">
            <summary>
            Plugin interface for string convert providers.
            </summary>
            <remarks>
            FromString(GetString(value), value.GetType()) shall always return a non-null value, if GetString(value) returns a non-null value.
            </remarks>
        </member>
        <member name="M:OpenTap.IStringConvertProvider.GetString(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns a string when the implementation supports converting the value. Otherwise, returns null.
            </summary>
            <param name="value">Cannot be null.</param>
            <param name="culture">The culture used for the conversion.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.IStringConvertProvider.FromString(System.String,OpenTap.ITypeData,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Creates an object from stringdata. The returned object should be of type 'type'. Returns null if it cannot convert stringdata to type.
            </summary>
            <param name="stringdata"></param>
            <param name="type"></param>
            <param name="contextObject">The object on which the value is set.</param>
            <param name="culture">The culture used for the conversion. This value can will default to InvariantCulture if nothing else is selected.</param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.StringConvertProvider">
            <summary>
            Helper methods for converting to/from strings.
            </summary>
        </member>
        <member name="M:OpenTap.StringConvertProvider.GetString(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Turn value to a string if an IStringConvertProvider plugin supports the value. Returns null if the input value is null.
            </summary>
            <param name="value">The value to be converted to a string.</param>
            <param name="culture">If null, invariant culture is used.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.StringConvertProvider.TryGetString(System.Object,System.String@,System.Globalization.CultureInfo)">
            <summary>
            Try get a string from an object value.
            </summary>
            <param name="value"></param>
            <param name="str"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.StringConvertProvider.FromString(System.String,OpenTap.ITypeData,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Turn stringdata back to an object of type 'type', if an IStringConvertProvider plugin supports the string/type.
            </summary>
            <param name="stringdata"></param>
            <param name="type"></param>
            <param name="contextObject"></param>
            <param name="culture">If null, invariant culture is used.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.StringConvertProvider.TryFromString(System.String,OpenTap.ITypeData,System.Object,System.Object@,System.Globalization.CultureInfo)">
            <summary>
            Turn stringdata back to an object of type 'type', if an IStringConvertProvider plugin supports the string/type. returns true if the parsing was successful.
            </summary>
            <param name="stringdata"></param>
            <param name="type"></param>
            <param name="contextObject"></param>
            <param name="result">The result of the operation.</param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.Plugins.ConvertibleStringConvertProvider">
            <summary> String Convert probider for IConvertible. </summary>
        </member>
        <member name="M:OpenTap.Plugins.ConvertibleStringConvertProvider.FromString(System.String,OpenTap.ITypeData,System.Object,System.Globalization.CultureInfo)">
            <summary> Returns an IConvertible if applicable. </summary>
        </member>
        <member name="M:OpenTap.Plugins.ConvertibleStringConvertProvider.GetString(System.Object,System.Globalization.CultureInfo)">
            <summary> Turns an IConvertible into a string. </summary>
        </member>
        <member name="T:OpenTap.Plugins.EnabledStringConvertProvider">
            <summary> String Convert for Enabled of T. </summary>
        </member>
        <member name="M:OpenTap.Plugins.EnabledStringConvertProvider.FromString(System.String,OpenTap.ITypeData,System.Object,System.Globalization.CultureInfo)">
            <summary> Creates an Enabled from a string. </summary>
        </member>
        <member name="M:OpenTap.Plugins.EnabledStringConvertProvider.GetString(System.Object,System.Globalization.CultureInfo)">
            <summary> Turns Enabled into a string. </summary>
        </member>
        <member name="T:OpenTap.Plugins.EnumStringConvertProvider">
            <summary> String Convert for enums. </summary>
        </member>
        <member name="M:OpenTap.Plugins.EnumStringConvertProvider.FromString(System.String,OpenTap.ITypeData,System.Object,System.Globalization.CultureInfo)">
            <summary> Creates an enum from a string. </summary>
        </member>
        <member name="M:OpenTap.Plugins.EnumStringConvertProvider.getString(System.Enum)">
            <summary> Turns an enum into a string. Usually just ToString unless flags. </summary>
        </member>
        <member name="T:OpenTap.Plugins.ListStringConvertProvider">
            <summary> String convert for list/IEnumerable types. </summary>
        </member>
        <member name="M:OpenTap.Plugins.ListStringConvertProvider.FromString(System.String,OpenTap.ITypeData,System.Object,System.Globalization.CultureInfo)">
            <summary> Creates a sequence from string. </summary>
        </member>
        <member name="M:OpenTap.Plugins.ListStringConvertProvider.GetString(System.Object,System.Globalization.CultureInfo)">
            <summary> Turns a value into a string, </summary>
        </member>
        <member name="T:OpenTap.Plugins.ResourceStringConvertProvider">
            <summary>
            String convert for IResource types.
            </summary>
        </member>
        <member name="M:OpenTap.Plugins.ResourceStringConvertProvider.FromString(System.String,OpenTap.ITypeData,System.Object,System.Globalization.CultureInfo)">
            <summary> Finds a IResource based on strings. Only works on things loaded in Component Settings. </summary>
        </member>
        <member name="M:OpenTap.Plugins.ResourceStringConvertProvider.GetString(System.Object,System.Globalization.CultureInfo)">
            <summary> Turns a resource into a string. </summary>
        </member>
        <member name="T:OpenTap.Plugins.MacroStringConvertProvider">
            <summary> String convert provider for MacroString types.</summary>
        </member>
        <member name="M:OpenTap.Plugins.MacroStringConvertProvider.FromString(System.String,OpenTap.ITypeData,System.Object,System.Globalization.CultureInfo)">
            <summary> Creates a new MacroString, using the contextObject if its a ITestStep.</summary>
        </member>
        <member name="M:OpenTap.Plugins.MacroStringConvertProvider.GetString(System.Object,System.Globalization.CultureInfo)">
            <summary> Extracts the text component of a macro string. </summary>
        </member>
        <member name="T:OpenTap.Plugins.SecureStringConvertProvider">
            <summary> String convert provider for SecureString </summary>
        </member>
        <member name="M:OpenTap.Plugins.SecureStringConvertProvider.FromString(System.String,OpenTap.ITypeData,System.Object,System.Globalization.CultureInfo)">
            <summary> Creates a new SecureString</summary>
        </member>
        <member name="M:OpenTap.Plugins.SecureStringConvertProvider.GetString(System.Object,System.Globalization.CultureInfo)">
            <summary> Extracts the text component of a SecureString. </summary>
        </member>
        <member name="T:OpenTap.Plugins.TestStepConvertProvider">
            <summary> String convert provider for TestStep </summary>
        </member>
        <member name="M:OpenTap.Plugins.TestStepConvertProvider.FromString(System.String,OpenTap.ITypeData,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets a TestStep from a string value. This will be a step from the test plan context object.
            </summary>
            <param name="stringdata"></param>
            <param name="type"></param>
            <param name="contextObject"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Plugins.TestStepConvertProvider.GetString(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets the ID of a step.
            </summary>
            <param name="value"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.Plugins.InputStringConvertProvider">
            <summary> Supports converting Inputs to a string and back. Requires the context to be an ITestStep.</summary>
        </member>
        <member name="M:OpenTap.Plugins.InputStringConvertProvider.FromString(System.String,OpenTap.ITypeData,System.Object,System.Globalization.CultureInfo)">
            <summary> Creates an Input from a string. contextObject must be an ITestStep.</summary>
            <param name="stringdata"></param>
            <param name="type"></param>
            <param name="contextObject"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Plugins.InputStringConvertProvider.GetString(System.Object,System.Globalization.CultureInfo)">
            <summary> Turns an IInput into a string. </summary>
            <param name="value"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.Plugins.BoolConverter">
            <summary> Supports converting Inputs to a string and back.</summary>
        </member>
        <member name="M:OpenTap.Plugins.BoolConverter.FromString(System.String,OpenTap.ITypeData,System.Object,System.Globalization.CultureInfo)">
            <summary> Creates a bool from a string. </summary>
        </member>
        <member name="M:OpenTap.Plugins.BoolConverter.GetString(System.Object,System.Globalization.CultureInfo)">
            <summary> Gets the string representation of a bool. </summary>
        </member>
        <member name="T:OpenTap.Plugins.CollectionSerializer">
            <summary> Serializer implementation for Collections. </summary>
        </member>
        <member name="P:OpenTap.Plugins.CollectionSerializer.Order">
            <summary> Order of this serializer.   </summary>
        </member>
        <member name="M:OpenTap.Plugins.CollectionSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary> Deserialization implementation. </summary>
        </member>
        <member name="M:OpenTap.Plugins.CollectionSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary> Serialization implementation. </summary>
        </member>
        <member name="T:OpenTap.Plugins.ConstResourceSerializer">
            <summary> Serializer implementation for IConstResourceProperty items. </summary>
        </member>
        <member name="P:OpenTap.Plugins.ConstResourceSerializer.Order">
            <summary> The order of this serializer. </summary>
        </member>
        <member name="M:OpenTap.Plugins.ConstResourceSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary> Deserialization implementation. </summary>
        </member>
        <member name="F:OpenTap.Plugins.ConstResourceSerializer.checkRentry">
            <summary> For avoiding recursive Serialize calls. </summary>
        </member>
        <member name="M:OpenTap.Plugins.ConstResourceSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary> Serialization implementation. </summary>
        </member>
        <member name="T:OpenTap.Plugins.DefaultValueSerializer">
            <summary> Serializer implementation for default value attributes. </summary>
        </member>
        <member name="P:OpenTap.Plugins.DefaultValueSerializer.Order">
            <summary> The order of this serializer. </summary>
        </member>
        <member name="M:OpenTap.Plugins.DefaultValueSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary> Deserialization implementation. </summary>
        </member>
        <member name="M:OpenTap.Plugins.DefaultValueSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary> Serialization implementation. </summary>       
        </member>
        <member name="T:OpenTap.Plugins.DynamicStepSerializer">
            <summary> Serializer implementation for IDynamicStep. </summary>
            It needs to act like an object serializer, which is why it inherits from it.
            It implementes TapSerializerPlugin, so it can explicitly override serializer behavior.
        </member>
        <member name="P:OpenTap.Plugins.DynamicStepSerializer.Order">
            <summary> The order of this serializer. </summary>
        </member>
        <member name="M:OpenTap.Plugins.DynamicStepSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary>
            Serializes a dynamic step.
            </summary>
            <param name="elem"></param>
            <param name="obj"></param>
            <param name="expectedType"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Plugins.DynamicStepSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary> Deserialization implementation. </summary>
        </member>
        <member name="T:OpenTap.Plugins.EventsSerializerPlugin">
            <summary> Serializer implementation for default value attributes. </summary>
        </member>
        <member name="M:OpenTap.Plugins.EventsSerializerPlugin.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary> Deserialize an Event object. </summary>
        </member>
        <member name="M:OpenTap.Plugins.EventsSerializerPlugin.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary> Serializes an Event object. </summary>
        </member>
        <member name="T:OpenTap.Plugins.ExternalParameterSerializer">
            <summary> Serializer implementation for parameters. </summary>
        </member>
        <member name="T:OpenTap.Plugins.ExternalParameterSerializer.ExternalParamData">
            <summary>
            Structure for holding data about <see cref="P:OpenTap.TestPlan.ExternalParameters"/>
            </summary>
        </member>
        <member name="F:OpenTap.Plugins.ExternalParameterSerializer.ExternalParamData.Object">
            <summary>
            The object
            </summary>
        </member>
        <member name="F:OpenTap.Plugins.ExternalParameterSerializer.ExternalParamData.Property">
            <summary>
            The external param property.
            </summary>
        </member>
        <member name="F:OpenTap.Plugins.ExternalParameterSerializer.ExternalParamData.Name">
            <summary>
             The name of the external test plan parameter.
            </summary>
        </member>
        <member name="P:OpenTap.Plugins.ExternalParameterSerializer.Order">
            <summary> The order of this serializer. </summary>
        </member>
        <member name="F:OpenTap.Plugins.ExternalParameterSerializer.UnusedExternalParamData">
            <summary>
            Stores the data if a test plan was not serialized but the external keyword was used. 
            </summary>
        </member>
        <member name="F:OpenTap.Plugins.ExternalParameterSerializer.PreloadedValues">
            <summary>
            Pre-Loaded external parameter Name/Value sets.
            </summary>
        </member>
        <member name="M:OpenTap.Plugins.ExternalParameterSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary> Deserialization implementation. </summary>
        </member>
        <member name="F:OpenTap.Plugins.ExternalParameterSerializer.parameterReverseLookup">
            <summary>
            This dictionary is used to cache which parent steps point to which child test steps via a parameter.
            Hence it maps (step,member) to (parent, member).
            </summary>
        </member>
        <member name="M:OpenTap.Plugins.ExternalParameterSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary> Serialization implementation. </summary>
        </member>
        <member name="T:OpenTap.Plugins.InputOutputRelationSerializer">
            <summary>
            Serializes input/output relations. It does so by adding a collection of inputs to the step XML while serializing.
            This is done because some of the properties might be read-only or XML ignore and in these cases we might still want
            to serialize the relation ship between them, even though the values are not themselves serialized.
            </summary>
        </member>
        <member name="M:OpenTap.Plugins.InputOutputRelationSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary> Deserialize input/output relations </summary>
        </member>
        <member name="M:OpenTap.Plugins.InputOutputRelationSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary> Serialize input/output relations </summary>
        </member>
        <member name="T:OpenTap.Plugins.KeyValuePairSerializer">
            <summary> For serializing/deserializing KeyValuePairs (mostly for use with Dictionaries). 
            It requires that the generic arguments of the KeyValuePair can be serialized.</summary>
        </member>
        <member name="M:OpenTap.Plugins.KeyValuePairSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary> Creates a Key and a Value node in the XML.</summary>
        </member>
        <member name="M:OpenTap.Plugins.KeyValuePairSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary> Looks for a Key and a Value node in the XML. </summary>
        </member>
        <member name="T:OpenTap.Plugins.MacroStringSerializer">
            <summary> Serializer for MacroString values. </summary>
        </member>
        <member name="M:OpenTap.Plugins.MacroStringSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary> Tries to deserialize a MacroString. This is just a simple string value XML element, but it tries to find the step context for the MacroString.</summary>
        </member>
        <member name="M:OpenTap.Plugins.MacroStringSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary> Serializes a MacroString. it just sets the text as the value. MacroString should be compatible with string in XML.</summary>
        </member>
        <member name="T:OpenTap.Plugins.IConstructingSerializer">
            <summary>
            Implemented by serializer plugins that creates and populates members of an object.
            </summary>
        </member>
        <member name="P:OpenTap.Plugins.IConstructingSerializer.Object">
            <summary> The object currently being serialized/deserialized. </summary>
        </member>
        <member name="P:OpenTap.Plugins.IConstructingSerializer.CurrentMember">
            <summary> Optionally set to indicate which member of Object is being serialized/deserialized. </summary>
        </member>
        <member name="T:OpenTap.Plugins.ObjectSerializer">
            <summary>
            Default object serializer.
            </summary>
        </member>
        <member name="P:OpenTap.Plugins.ObjectSerializer.CurrentMember">
            <summary>
            Gets the member currently being serialized.
            </summary>
        </member>
        <member name="P:OpenTap.Plugins.ObjectSerializer.Order">
            <summary>
            Specifies order. Minimum order should  be -1 as this is the most basic serializer.  
            </summary>
        </member>
        <member name="P:OpenTap.Plugins.ObjectSerializer.Object">
            <summary> The currently serializing or deserializing object. </summary>
        </member>
        <member name="M:OpenTap.Plugins.ObjectSerializer.TryDeserializeObject(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object},System.Object,System.Boolean)">
            <summary>
            Tries to deserialize an object from an XElement.
            </summary>
            <param name="element"></param>
            <param name="t"></param>
            <param name="setter"></param>
            <param name="newobj"></param>
            <param name="logWarnings">Whether warning messages should be emitted in case of missing properties.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:OpenTap.Plugins.ObjectSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary>
            Deserializes an object from XML.
            </summary>
            <param name="element"></param>
            <param name="t"></param>
            <param name="setter"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Plugins.ObjectSerializer.containsOnlyReversibleTapXmlChars(System.String)">
            <summary>
            Checks if the string can be turned into an XML string. 
            This should return true only if the transformation to/from xml is reversible.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Plugins.ObjectSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary>
            Serializes an object to XML.
            </summary>
            <param name="elem"></param>
            <param name="obj"></param>
            <param name="expectedType"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.Plugins.ResourceSerializer">
            <summary> Serializer implementation for Resources. </summary>
        </member>
        <member name="P:OpenTap.Plugins.ResourceSerializer.TestPlanChanged">
            <summary>
            True if there was an change caused by a mismatch of resource names in the tesplan and names in the bench settings
            </summary>
        </member>
        <member name="P:OpenTap.Plugins.ResourceSerializer.Order">
            <summary> The order of this serializer. </summary>
        </member>
        <member name="M:OpenTap.Plugins.ResourceSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary> Deserialization implementation. </summary>
        </member>
        <member name="M:OpenTap.Plugins.ResourceSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary> Serialization implementation. </summary>
        </member>
        <member name="T:OpenTap.Plugins.SecureStringSerializer">
            <summary> Serializer implementation for SecureStrings. </summary>
        </member>
        <member name="M:OpenTap.Plugins.SecureStringSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary> Deserialization implementation for SecureString. </summary>
            <param name="node"></param>
            <param name="targetType"></param>
            <param name="setResult"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Plugins.SecureStringSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary>
            Serialization implementation for SecureString.
            </summary>
            <param name="elem"></param>
            <param name="obj"></param>
            <param name="expectedType"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.Plugins.TestPlanSerializer">
            <summary> Serializer implementation for TestPlans. </summary>
        </member>
        <member name="P:OpenTap.Plugins.TestPlanSerializer.Order">
            <summary> The order of this serializer. </summary>
        </member>
        <member name="M:OpenTap.Plugins.TestPlanSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary>
            Deserializes a test plan from XML.
            </summary>
            <param name="element"></param>
            <param name="_t"></param>
            <param name="setter"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Plugins.TestPlanSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary>
            Serializes an object to XML.
            </summary>
            <param name="element"></param>
            <param name="obj"></param>
            <param name="expectedType"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.Plugins.TestStepListSerializer">
            <summary> Serializer implementation for TestStepList. </summary>
        </member>
        <member name="P:OpenTap.Plugins.TestStepListSerializer.Order">
            <summary> The order of this serializer. </summary>
        </member>
        <member name="M:OpenTap.Plugins.TestStepListSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary> Deserialization implementation. </summary>
        </member>
        <member name="M:OpenTap.Plugins.TestStepListSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary> Serialization implementation. </summary>
        </member>
        <member name="T:OpenTap.Plugins.TestStepSerializer">
            <summary> Serializer implementation for TestStep. </summary>
        </member>
        <member name="P:OpenTap.Plugins.TestStepSerializer.Order">
            <summary> The order of this serializer. </summary>
        </member>
        <member name="M:OpenTap.Plugins.TestStepSerializer.FindStep(System.Guid)">
            <summary> Tries to find a step based on ID. </summary>
        </member>
        <member name="F:OpenTap.Plugins.TestStepSerializer.ignoredGuids">
            <summary>
            Guids where duplicate guids should be ignored. Useful when pasting to test plan.
            </summary>
        </member>
        <member name="M:OpenTap.Plugins.TestStepSerializer.AddKnownStepHeirarchy(OpenTap.ITestStepParent)">
            <summary>
            Adds known steps to the list of tests used for finding references in deserialization.
            </summary>
            <param name="stepParent"></param>
        </member>
        <member name="M:OpenTap.Plugins.TestStepSerializer.FixupStep(OpenTap.ITestStep,System.Boolean)">
            <summary>
            Ensures that duplicate step IDs are not present in the test plan and updates an ID->step mapping.
            </summary>
            <param name="step">the step to fix.</param>
            <param name="recurse"> true if child steps should also be 'fixed'.</param>
        </member>
        <member name="M:OpenTap.Plugins.TestStepSerializer.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary> Deserialization implementation. </summary>
        </member>
        <member name="M:OpenTap.Plugins.TestStepSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary> Serialization implementation. </summary>
        </member>
        <member name="T:OpenTap.ITapPlugin">
            <summary>
            Base type for all OpenTAP plugins.
            </summary>
        </member>
        <member name="T:OpenTap.TapPluginExtensions">
            <summary>
            Extension class for Type. 
            </summary>
        </member>
        <member name="M:OpenTap.TapPluginExtensions.GetPluginType(System.Type)">
            <summary>
            Gets the plugin types that a type implements.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.ITestPlanImport">
            <summary>
            Custom handler for importing TestPlan data.
            Which implementation of ITestPlanImport is used is based on the file type (ITestPlanExport.Extension).
            </summary>
            <remarks>
            The developer determines the content and complexity of classes that implement this type. 
            It might be as simple as unzipping a TestPlan, or as complex as reading a well-defined Excel file that represents some TestPlan data.
            </remarks>
        </member>
        <member name="P:OpenTap.ITestPlanImport.Extension">
            <summary>
            The extension of the imported file including the '.'. For example '.zip'.
            </summary>
        </member>
        <member name="P:OpenTap.ITestPlanImport.Name">
            <summary>
            Name of the file format. Shown when the user selects the format in the UI.
            For example, Compressed Using Zip.
            </summary>
        </member>
        <member name="M:OpenTap.ITestPlanImport.ImportTestPlan(System.String)">
            <summary>
            Imports a file. The contents of the file can be an entire TestPlan, or data to be inserted into a dynamically created TestPlan.  
            </summary>
            <param name="filePath">The absolute or relative path to file.</param>
            <returns>The test plan constructed as part of the Import. </returns>
        </member>
        <member name="T:OpenTap.ITestPlanExport">
            <summary>
            Custom handler for exporting TestPlan data.
            Which implementation of ITestPlanExport is used is based on the file type (ITestPlanExport.Extension).
            </summary>
            <remarks>
            The developer determines the content and complexity of classes that implement this type/>. 
            It might be as simple as unzipping a TestPlan, or as complex as reading a well-defined Excel file that represents some TestPlan data.
            </remarks>
        </member>
        <member name="P:OpenTap.ITestPlanExport.Extension">
            <summary>
            The extension of the exported file including the '.'. For example '.zip'.
            </summary>
        </member>
        <member name="P:OpenTap.ITestPlanExport.Name">
            <summary>
            Name of the file format. Shown when the user selects the format in the GUI.
            For example, Compressed Using Zip.
            </summary>
        </member>
        <member name="M:OpenTap.ITestPlanExport.ExportTestPlan(OpenTap.TestPlan,System.String)">
            <summary>
            Exports the test plan or TestPlan data to a file. 
            </summary>
            <param name="plan"> The plan.</param>
            <param name="filePath">The absolute or relative path to the file. </param>
        </member>
        <member name="T:OpenTap.ITestPlanImportCustomDialog">
            <summary>
            Custom GUI handler for importing TestPlan data.
            </summary>
            <remarks>
            In contrast to <see cref="T:OpenTap.ITestPlanImport"/> implementations of this provides their own custom GUI to allows user to select the TestPlan file/data.
            For example, using a GUI to load the plan from a database or virtual location such as Dropbox or AWS S3.
            </remarks>
        </member>
        <member name="M:OpenTap.ITestPlanImportCustomDialog.ImportTestPlan">
            <summary>
            Import TestPlan.
            </summary>
            <returns>The test plan contructed as part of the import</returns>
        </member>
        <member name="T:OpenTap.ITestPlanExportCustomDialog">
            <summary>
            Custom GUI handler for importing TestPlan data.
            </summary>
            <remarks>
            In contrast to <see cref="T:OpenTap.ITestPlanExport"/> implementations of this provides their own custom GUI to allows user to select the export destination.
            For example, using a GUI to save the plan into a database or virtual location such as Dropbox or AWS S3.
            </remarks>
        </member>
        <member name="M:OpenTap.ITestPlanExportCustomDialog.ExportTestPlan(OpenTap.TestPlan)">
            <summary>
            Exports the test plan or TestPlan data. 
            </summary>
            <param name="plan">The plan</param>
        </member>
        <member name="T:OpenTap.ITestPlanRunMonitor">
            <summary>
            Interface for use in pre/post test plan (for example, it can be used to lock a remote setup). Only supported on <see cref="T:OpenTap.ComponentSettings"/> types.
            </summary>
        </member>
        <member name="M:OpenTap.ITestPlanRunMonitor.EnterTestPlanRun(OpenTap.TestPlanRun)">
            <summary>
            Called before Test Plan is executed.
            </summary>
            <param name="plan"></param>
        </member>
        <member name="M:OpenTap.ITestPlanRunMonitor.ExitTestPlanRun(OpenTap.TestPlanRun)">
            <summary>
            Called after Test Plan is executed.
            </summary>
        </member>
        <member name="M:OpenTap.TestPlanRunMonitors.GetCurrent">
            <summary>
            Returns a list of the current access controllers. 
            These are ComponentSettings instances that inherits from ITestPlanRunMonitor.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.ITestStepParent">
            <summary>
            <see cref="T:OpenTap.TestPlan"/> or <see cref="T:OpenTap.TestStep"/>. Specifies that a class can be inserted into the test plan hierarchy.
            </summary>
        </member>
        <member name="P:OpenTap.ITestStepParent.Parent">
            <summary>
            Parent TestStep for this TestStep. Null if this TestStep is not a child of any other TestSteps. 
            Only guaranteed to be set during <see cref="M:OpenTap.TestPlan.Execute"/>. 
            </summary>
        </member>
        <member name="P:OpenTap.ITestStepParent.ChildTestSteps">
            <summary>
            Gets or sets a list of child TestSteps. (Inherited from <see cref="T:OpenTap.ITestStepParent"/>)
            </summary>
        </member>
        <member name="T:OpenTap.ITestStep">
            <summary>
            An interface for a <see cref="T:OpenTap.TestStep"/>. All TestSteps are instances of the ITestStep interface.
            
            <para>---------------------------------------------------------------------------------------------------</para>
            
            <para>The following attributes are mandatory</para>
            <para><seealso cref="P:OpenTap.ITestStepParent.Parent"/> [XmlIgnore]</para>
            
            <para>---------------------------------------------------------------------------------------------------</para>
            
            <para>The following attributes are recommended:</para>
            <para><seealso cref="P:OpenTap.ITestStepParent.ChildTestSteps"/> [XmlIgnore]</para>
            <para><seealso cref="P:OpenTap.ITestStep.Enabled"/> [Browsable(false)] [ColumnDisplayName("", Order = -101)]</para>
            <para><seealso cref="P:OpenTap.ITestStep.Id"/> [XmlAttribute("Id")] [Browsable(false)]</para>
            <para><seealso cref="P:OpenTap.ITestStep.PlanRun"/> [Browsable(false)]</para>
            <para><seealso cref="P:OpenTap.ITestStep.StepRun"/> [Browsable(false)]</para>
            <para><seealso cref="P:OpenTap.ITestStep.IsReadOnly"/> [XmlIgnore] attribute.</para>
            <para><seealso cref="P:OpenTap.ITestStep.TypeName"/> [ColumnDisplayName("Step Type", Order = 1)] [Browsable(false)]</para>
            <para><seealso cref="P:OpenTap.ITestStep.Verdict"/> [Browsable(false)] [ColumnDisplayName(Order = -99)] [XmlIgnore] [Output]</para>
            </summary>
        </member>
        <member name="P:OpenTap.ITestStep.Verdict">
            <summary>
            Gets or sets the verdict. Only available during <see cref="T:OpenTap.TestStep"/> run. 
            This property value is propagated to the <see cref="T:OpenTap.TestStepRun"/> when the step run completes.  
            </summary>
        </member>
        <member name="P:OpenTap.ITestStep.Name">
            <summary>
            Name of the step. Should be set by the user if using multiple instances of the same type.
            </summary>
        </member>
        <member name="P:OpenTap.ITestStep.Enabled">
            <summary>
            Gets or sets boolean value that indicates whether this step is enabled in the <see cref="T:OpenTap.TestPlan"/>.  
            </summary>
        </member>
        <member name="P:OpenTap.ITestStep.PlanRun">
            <summary>
            Gets or sets the current <see cref="T:OpenTap.TestPlanRun"/>.  
            </summary>
        </member>
        <member name="P:OpenTap.ITestStep.StepRun">
            <summary>
            Gets or sets the currently running and most recently started <see cref="T:OpenTap.TestStepRun"/>.
            </summary>
        </member>
        <member name="P:OpenTap.ITestStep.IsReadOnly">
            <summary>
            Gets or sets boolean value that indicates whether this step is read only in the <see cref="T:OpenTap.TestPlan"/>.  
            </summary>
        </member>
        <member name="P:OpenTap.ITestStep.TypeName">
            <summary>
            Name of this <see cref="T:OpenTap.TestStep"/> type.  
            </summary>
        </member>
        <member name="M:OpenTap.ITestStep.PrePlanRun">
            <summary>
            Called by TestPlan.Run() for each step in the test plan prior to calling the TestStepBase.Run() methods of each step.
            </summary>
        </member>
        <member name="M:OpenTap.ITestStep.Run">
            <summary>
            Called by TestPlan.Run() to run each TestStep. 
            If this step has children (ChildTestSteps.Count > 0), then these are executed instead.
            </summary>
        </member>
        <member name="M:OpenTap.ITestStep.PostPlanRun">
            <summary>
            Called by TestPlan.Run() after completing all TestStepBase.Run() methods in the TestPlan
            <remarks>Note that TestStep.PostPlan run is run in reverse order
                     For example, if you had three Tests (T1, T2, and T3), and T2 was disabled, then
                     PrePlanRun would run for T1 and T3 (in that order)
                     PostPlanRun would run for T3 and T1 (in that order)</remarks>
            </summary>
        </member>
        <member name="P:OpenTap.ITestStep.Id">
            <summary>
            Unique ID used for storing references to test steps.  
            </summary>
        </member>
        <member name="T:OpenTap.TestStepSearch">
            <summary>
            Search pattern to use while getting child steps.
            </summary>
        </member>
        <member name="F:OpenTap.TestStepSearch.All">
            <summary>
            All steps are wanted.
            </summary>
        </member>
        <member name="F:OpenTap.TestStepSearch.EnabledOnly">
            <summary>
            Only enabled steps are wanted.
            </summary>
        </member>
        <member name="F:OpenTap.TestStepSearch.NotEnabledOnly">
            <summary>
            Only disabled steps are wanted.
            </summary>
        </member>
        <member name="M:OpenTap.ITestStepParentExtensions.GetStepHierarchy(OpenTap.ITestStepParent)">
            <summary> Gets the step hierarchy starting from child to parent.
            Includes the test plan as the last item. </summary>
        </member>
        <member name="T:OpenTap.IValidatingObject">
            <summary>
            Provides the functionality to validate an element when the property changes. 
            </summary>
        </member>
        <member name="P:OpenTap.IValidatingObject.Rules">
            <summary>
            A collection of all the currently defined validation rules. Add new rules here in order to get runtime value validation. 
            </summary>
        </member>
        <member name="M:OpenTap.IValidatingObject.OnPropertyChanged(System.String)">
            <summary>
            Triggers the PropertyChanged event.
            </summary>
            <param name="propertyName">String name of which property has been changed.</param>
        </member>
        <member name="T:OpenTap.LoadStatus">
            <summary>
            The status of the loading operation for TypeData and AssemblyData.
            </summary>
        </member>
        <member name="F:OpenTap.LoadStatus.NotLoaded">
            <summary> Loading has not been done yet. </summary>
        </member>
        <member name="F:OpenTap.LoadStatus.Loaded">
            <summary> This has been loaded. </summary>
        </member>
        <member name="F:OpenTap.LoadStatus.FailedToLoad">
            <summary> It failed to load. </summary>
        </member>
        <member name="T:OpenTap.LogEventType">
            <summary>
            Identifies the type of event that is logged.
            </summary>
        </member>
        <member name="F:OpenTap.LogEventType.Error">
            <summary>
                Recoverable error.
            </summary>
        </member>
        <member name="F:OpenTap.LogEventType.Warning">
            <summary>
                Noncritical problem.
            </summary>
        </member>
        <member name="F:OpenTap.LogEventType.Information">
            <summary>
                Informational message.
            </summary>
        </member>
        <member name="F:OpenTap.LogEventType.Debug">
            <summary>
                Debugging trace.
            </summary>
        </member>
        <member name="T:OpenTap.TraceSource">
            <summary>
            Encapsulates the features of the OpenTAP logging infrastructure.
            </summary>
        </member>
        <member name="F:OpenTap.TraceSource.Owner">
            <summary> The object that owns this trace source. </summary>
        </member>
        <member name="M:OpenTap.TraceSource.Flush">
            <summary>
            Blocks until all messages posted up to this point have reached all TraceListeners.  
            </summary>
        </member>
        <member name="M:OpenTap.TraceSource.TraceEvent(OpenTap.LogEventType,System.Int32,System.String)">
            <summary>
            Register a single event.
            </summary>
        </member>
        <member name="M:OpenTap.TraceSource.TraceEvent(System.Int64,OpenTap.LogEventType,System.Int32,System.String,System.Object[])">
            <summary> Register a single event with formatting and duration. </summary>
        </member>
        <member name="M:OpenTap.TraceSource.TraceEvent(System.Int64,OpenTap.LogEventType,System.Int32,System.String)">
            <summary> Register a single event without formatting and duration. </summary>
        </member>
        <member name="M:OpenTap.TraceSource.TraceEvent(OpenTap.LogEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Register a single event with formatting
            </summary>
        </member>
        <member name="T:OpenTap.TraceListener">
            <summary>
            Base class for various listeners.
            </summary>
        </member>
        <member name="M:OpenTap.TraceListener.TraceEvents(System.Collections.Generic.IEnumerable{OpenTap.Diagnostic.Event})">
            <summary>
            Receives all log messages. The virtual method simply calls <see cref="M:OpenTap.TraceListener.TraceEvent(System.String,OpenTap.LogEventType,System.Int32,System.String)"/> directly.  
            </summary>
        </member>
        <member name="M:OpenTap.TraceListener.TraceEvent(System.String,OpenTap.LogEventType,System.Int32,System.String)">
            <summary>
            Empty TraceEvent method.
            </summary>
        </member>
        <member name="M:OpenTap.TraceListener.TraceEvent(System.String,OpenTap.LogEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Empty TraceEvent method.
            </summary>
        </member>
        <member name="M:OpenTap.TraceListener.Write(System.String)">
            <summary>
            Virtual method to match System.Diagnostics.TraceListener. Might be removed.
            </summary>
        </member>
        <member name="M:OpenTap.TraceListener.WriteLine(System.String)">
            <summary>
            Virtual method to match System.Diagnostics.TraceListener. Might be removed.
            </summary>
        </member>
        <member name="M:OpenTap.TraceListener.Flush">
            <summary>
            Waits until all sent log messages have been processed by this and all other TraceListeners.
            </summary>
        </member>
        <member name="T:OpenTap.TextWriterTraceListener">
            <summary>
            Simple TraceListener which outputs data to a TextWriter.
            </summary>
        </member>
        <member name="P:OpenTap.TextWriterTraceListener.Writer">
            <summary>
            The writer that is used as the output.
            </summary>
        </member>
        <member name="M:OpenTap.TextWriterTraceListener.#ctor(System.String)">
            <summary>
            Creates a new TextWriterTraceListener writing to the given filename.
            </summary>
        </member>
        <member name="M:OpenTap.TextWriterTraceListener.#ctor(System.IO.Stream)">
            <summary>
            Creates a new TextWriterTraceListener writing to the given stream.
            </summary>
        </member>
        <member name="M:OpenTap.TextWriterTraceListener.Write(System.String)">
            <summary>
            Writes a string to the current Writer.
            </summary>
        </member>
        <member name="M:OpenTap.TextWriterTraceListener.WriteLine(System.String)">
            <summary>
            Writes a string including a newline to the current Writer.
            </summary>
        </member>
        <member name="M:OpenTap.TextWriterTraceListener.Flush">
            <summary>
            Flushes the log system and the current Writer.
            </summary>
        </member>
        <member name="M:OpenTap.TextWriterTraceListener.Dispose">
            <summary>
            Frees up the writer.
            </summary>
        </member>
        <member name="T:OpenTap.Log">
            <summary>
            This class extends System.Diagnostics.Log to provide shorthand methods 
            for logging/tracing messages at different levels.
            </summary>
        </member>
        <member name="P:OpenTap.Log.Context">
            <summary> The current log context. </summary>
        </member>
        <member name="M:OpenTap.Log.AddListener(OpenTap.Diagnostic.ILogListener)">
            <summary> Makes a TraceListener start receiving log messages. </summary>
            <param name="listener">The TraceListener to add.</param>
        </member>
        <member name="M:OpenTap.Log.RemoveListener(OpenTap.Diagnostic.ILogListener)">
            <summary> Stops a specified TraceListener from receiving log messages. </summary>
            <param name="listener">The TraceListener to remove.</param>
        </member>
        <member name="M:OpenTap.Log.GetListeners">
            <summary>
            Gets all added TraceListeners.
            </summary>
            <returns>A readonly collection of TraceListeners.</returns>
        </member>
        <member name="M:OpenTap.Log.CreateSource(System.String)">
            <summary> Creates a new log source. </summary>
            <param name="name">The name of the Log.</param>
            <returns>The created Log.</returns>
        </member>
        <member name="M:OpenTap.Log.CreateSource(System.String,System.Object)">
            <summary> Creates a new owned log source. Note that any given object can only have one owned TraceSource.</summary>
            <param name="name">The name of the Log.</param>
            <param name="owner">The object owning the log. This is used to enable OpenTAP to emit log messages on behalf of the owner object. </param>
            <returns>The created Log.</returns>
        </member>
        <member name="M:OpenTap.Log.GetOwnedSource(System.Object)">
            <summary> Gets the source of a specified owner. </summary>
            <param name="owner"></param>
            <returns>returns the TraceSource or null if the owner owns no source.</returns>
        </member>
        <member name="M:OpenTap.Log.RemoveSource(OpenTap.TraceSource)">
            <summary>
            Removes a previously Created Log from the list of sources.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:OpenTap.Log.traceEvent(OpenTap.TraceSource,System.TimeSpan,OpenTap.LogEventType,System.String,System.Object[])">
            <summary>
            like traceEvent except it uses a stopwatch 'timer' to write formatted time after the message [{1:0}ms].
            Usually used to signal in the log how long an operation took.
            </summary>
            <param name="trace"></param>
            <param name="elapsed"></param>
            <param name="eventType"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenTap.Log.traceEvent(OpenTap.TraceSource,OpenTap.LogEventType,System.String,System.Object[])">
            <summary>
            Write a message to the log with a given trace level.
            </summary>
            <param name="trace"></param>
            <param name="eventType"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenTap.Log.TraceInformation(OpenTap.TraceSource,System.String)">
            <summary>
            Trace a message at level "Information" (<see cref="F:OpenTap.LogEventType.Information"/>).
            </summary>
            <param name="trace">this(extension method).</param>
            <param name="message">Message to write.</param>
        </member>
        <member name="M:OpenTap.Log.Debug(OpenTap.TraceSource,System.String,System.Object[])">
            <summary>
            Trace a message at level "Debug" (<see cref="F:OpenTap.LogEventType.Debug"/>).
            </summary>
            <param name="trace">this(extension method).</param>
            <param name="message">Message to write.</param>
            <param name="args">parameters (see <see cref="M:System.String.Format(System.String,System.Object)"/>).</param>
        </member>
        <member name="M:OpenTap.Log.Info(OpenTap.TraceSource,System.Diagnostics.Stopwatch,System.String,System.Object[])">
            <summary>
            Writes a message with the time measured by timer appended in the format [xx.x (m/u/n)s].
            if timer is a TimerToken it will be disposed.
            Information level log message.
            </summary>
            <param name="trace"></param>
            <param name="timer"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenTap.Log.Debug(OpenTap.TraceSource,System.Diagnostics.Stopwatch,System.String,System.Object[])">
            <summary>
            Writes a message with the time measured by timer appended in the format [xx.x (m/u/n)s].
            if timer is a TimerToken it will be disposed.
            Debug level end message.
            </summary>
            <param name="trace"></param>
            <param name="timer"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenTap.Log.Warning(OpenTap.TraceSource,System.Diagnostics.Stopwatch,System.String,System.Object[])">
            <summary>
            Writes a message with the time measured by timer appended in the format [xx.x (m/u/n)s].
            if timer is a TimerToken it will be disposed.
            Warning level end message.
            </summary>
            <param name="trace"></param>
            <param name="timer"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenTap.Log.Error(OpenTap.TraceSource,System.Diagnostics.Stopwatch,System.String,System.Object[])">
            <summary>
            Writes a message with the time measured by timer appended in the format [xx.x (m/u/n)s].
            if timer is a TimerToken it will be disposed.
            Error level end message.
            </summary>
            <param name="trace"></param>
            <param name="timer"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenTap.Log.Info(OpenTap.TraceSource,System.TimeSpan,System.String,System.Object[])">
            <summary>
            Writes a message with the time appended in the format [xx.x (m/u/n)s].
            if timer is a TimerToken it will be disposed.
            Information level log message.
            </summary>
            <param name="trace"></param>
            <param name="elapsed"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenTap.Log.Debug(OpenTap.TraceSource,System.TimeSpan,System.String,System.Object[])">
            <summary>
            Writes a message with the time appended in the format [xx.x (m/u/n)s].
            if timer is a TimerToken it will be disposed.
            Debug level end message.
            </summary>
            <param name="trace"></param>
            <param name="elapsed"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenTap.Log.Warning(OpenTap.TraceSource,System.TimeSpan,System.String,System.Object[])">
            <summary>
            Writes a message with the time appended in the format [xx.x (m/u/n)s].
            if timer is a TimerToken it will be disposed.
            Warning level end message.
            </summary>
            <param name="trace"></param>
            <param name="elapsed"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenTap.Log.Error(OpenTap.TraceSource,System.TimeSpan,System.String,System.Object[])">
            <summary>
            Writes a message with the time appended in the format [xx.x (m/u/n)s].
            if timer is a TimerToken it will be disposed.
            Error level end message.
            </summary>
            <param name="trace"></param>
            <param name="elapsed"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:OpenTap.Log.Info(OpenTap.TraceSource,System.String,System.Object[])">
            <summary>
            Trace a message at level "Information" (<see cref="F:OpenTap.LogEventType.Information"/>).
            </summary>
            <param name="trace">this(extension method).</param>
            <param name="message">Message to write.</param>
            <param name="args">parameters (see <see cref="M:System.String.Format(System.String,System.Object)"/>).</param>
        </member>
        <member name="M:OpenTap.Log.Warning(OpenTap.TraceSource,System.String,System.Object[])">
            <summary>
            Trace a message at level "Warning" (<see cref="F:OpenTap.LogEventType.Warning"/>).
            </summary>
            <param name="trace">this(extension method).</param>
            <param name="message">Message to write.</param>
            <param name="args">parameters (see <see cref="M:System.String.Format(System.String,System.Object)"/>).</param>
        </member>
        <member name="M:OpenTap.Log.Error(OpenTap.TraceSource,System.String,System.Object[])">
            <summary>
            Trace a message at level "Error" (<see cref="F:OpenTap.LogEventType.Error"/>).
            </summary>
            <param name="trace">this(extension method).</param>
            <param name="message">Message to write.</param>
            <param name="args">parameters (see <see cref="M:System.String.Format(System.String,System.Object)"/>).</param>
        </member>
        <member name="M:OpenTap.Log.Debug(OpenTap.TraceSource,System.Exception)">
            <summary>
            Write exception details (including stack trace) to the trace at level "Debug" (<see cref="F:OpenTap.LogEventType.Error"/>). 
            </summary>
            <param name="trace">this(extension method).</param>
            <param name="exception">Inputs error exception.</param>
        </member>
        <member name="M:OpenTap.Log.Error(OpenTap.TraceSource,System.Exception)">
            <summary>
            Write exception details (including stack trace) to the trace at level "Error" (<see cref="F:OpenTap.LogEventType.Error"/>). 
            </summary>
            <param name="trace">this(extension method).</param>
            <param name="exception">Inputs error exception.</param>
        </member>
        <member name="M:OpenTap.Log.Flush">
            <summary>
            Flushes all waiting log trace events.
            </summary>
        </member>
        <member name="M:OpenTap.Log.StartSync">
            <summary>
            Puts the current log context into synchronous mode.
            All TraceSources will now wait for their trace events to be handled by all TraceListeners before returning.
            </summary>
        </member>
        <member name="M:OpenTap.Log.StopSync">
            <summary>
            Ends synchronous mode. Must be called after <c ref="StartSync"/>.
            </summary>
        </member>
        <member name="T:OpenTap.ExceptionExtensions">
            <summary>
            Extension methods for Exception.
            </summary>
        </member>
        <member name="M:OpenTap.ExceptionExtensions.GetInnerMostExceptionMessage(System.Exception)">
            <summary>
            Finds the message of the inner most exception for this exception. If no inner exceptions are set, the message of this exception is returned.
            COMExceptions are ignored as their message is not very useful.
            </summary>
        </member>
        <member name="T:OpenTap.Diagnostic.AccurateStamper">
            <summary>
            Default timestamper.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.AccurateStamper.ToString">
            <summary> Prints a friendly name. </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.Diagnostic.ILog">
            <summary>
            Log source interface. Instances of this are always created by a corresponding ILogContext.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.ILog.LogEvent(System.Int32,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="EventType">Event type constant. Typically matches System.Diagnostics.TraceEventType.</param>
            <param name="Message">Message for the event.</param>
        </member>
        <member name="M:OpenTap.Diagnostic.ILog.LogEvent(System.Int32,System.String,System.Object[])">
            <summary>
            Logs an event.
            </summary>
            <param name="EventType">Event type constant. Typically matches System.Diagnostics.TraceEventType.</param>
            <param name="Message">Message for the event. Formatted with arguments in Args.</param>
            <param name="Args">Arguments for String.Format() call.</param>
        </member>
        <member name="M:OpenTap.Diagnostic.ILog.LogEvent(System.Int32,System.Int64,System.String)">
            <summary>
            Logs an event.
            </summary>
            <param name="EventType">Event type constant. Typically matches System.Diagnostics.TraceEventType.</param>
            <param name="DurationNS">Duration in nanoseconds of this event.</param>
            <param name="Message">Message for the event.</param>
        </member>
        <member name="M:OpenTap.Diagnostic.ILog.LogEvent(System.Int32,System.Int64,System.String,System.Object[])">
            <summary>
            Logs an event.
            </summary>
            <param name="EventType">Event type constant. Typically matches System.Diagnostics.TraceEventType.</param>
            <param name="DurationNS">Duration in nanoseconds of this event.</param>
            <param name="Message">Message for the event. Formatted with arguments in Args.</param>
            <param name="Args">Arguments for String.Format() call.</param>
        </member>
        <member name="P:OpenTap.Diagnostic.ILog.Source">
            <summary>
            Identifier name of this source.
            </summary>
        </member>
        <member name="T:OpenTap.Diagnostic.Event">
            <summary>
            A structure containing all information about an event.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.Event.#ctor(System.Int64,System.Int32,System.String,System.String,System.Int64)">
            <summary>
            Construct new <c ref="Event"/> structure.
            </summary>
            <param name="duration">The duration of the event in nanoseconds.  </param>
            <param name="eventType">The event type this event was logged with. </param>
            <param name="message">The message for the event.  </param>
            <param name="source">The log source identifier this event was logged from.  </param>
            <param name="timestamp">The timestamp for the event in system ticks.  </param>
        </member>
        <member name="F:OpenTap.Diagnostic.Event.EventType">
            <summary>
            The event type this event was logged with. Typically matches System.Diagnostics.TraceEventType.
            </summary>
        </member>
        <member name="F:OpenTap.Diagnostic.Event.Source">
            <summary>
            The log source identifier this event was logged from.
            </summary>
        </member>
        <member name="F:OpenTap.Diagnostic.Event.Timestamp">
            <summary>
            The Timestamp for the event in Ticks.
            </summary>
        </member>
        <member name="F:OpenTap.Diagnostic.Event.DurationNS">
            <summary>
            The duration of the event in nanoseconds.
            </summary>
        </member>
        <member name="F:OpenTap.Diagnostic.Event.Message">
            <summary>
            The message for the event.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.Event.ToString">
            <summary> Creates a string representation of this event structure. </summary>
        </member>
        <member name="T:OpenTap.Diagnostic.EventCollection">
            <summary>
            A collection class that provide posibility to iterate over an array of <see cref="T:OpenTap.Diagnostic.Event">events</see>
            </summary>
        </member>
        <member name="P:OpenTap.Diagnostic.EventCollection.Disposed">
            <summary>
            Returns a boolean indicating whether this instance has been disposed or not.
            </summary>
        </member>
        <member name="P:OpenTap.Diagnostic.EventCollection.Length">
            <summary>
            Gets the number of the elements in the collection
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.EventCollection.#ctor(OpenTap.Diagnostic.Event[])">
            <summary>
            Creates a new instance of <see cref="T:OpenTap.Diagnostic.EventCollection"/>.
            </summary>
            <param name="events">The event array that will be wrapped around by this class.</param>
        </member>
        <member name="M:OpenTap.Diagnostic.EventCollection.Dispose">
            <summary>
            Dispose this instance.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.EventCollection.GetEnumerator">
            <summary>
            An enumerator that can be used to enumerate this collection.
            </summary>
            <returns>An enumerator that can be used to enumerate this collection.</returns>
        </member>
        <member name="M:OpenTap.Diagnostic.EventCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            An enumerator that can be used to enumerate this collection.
            </summary>
            <returns>An enumerator that can be used to enumerate this collection.</returns>
        </member>
        <member name="T:OpenTap.Diagnostic.ILogListener">
            <summary>
            Interface a log listener must implement.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.ILogListener.EventsLogged(System.Collections.Generic.IEnumerable{OpenTap.Diagnostic.Event})">
            <summary>
            Message called when multiple events have been logged.  
            </summary>
            <param name="Events">Array containing a number of events.</param>
        </member>
        <member name="M:OpenTap.Diagnostic.ILogListener.Flush">
            <summary>
            Called when the log context requests that this listener must flush all of its output resources.  
            </summary>
        </member>
        <member name="T:OpenTap.Diagnostic.ILogTimestampProvider">
            <summary>
            The timestamping mechanism used by ILogContext.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.ILogTimestampProvider.Timestamp">
            <summary>
            Generates a timestamp for the current instant.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.ILogTimestampProvider.ConvertToTicks(System.Int64)">
            <summary>
            Converts a timestamp generated by the Timestamp method into Ticks.
            </summary>
            <param name="timestamp"></param>
        </member>
        <member name="T:OpenTap.Diagnostic.ILogContext">
            <summary>
            A log context that can have multiple log sources and <see cref="T:OpenTap.LogResultListener"/>. 
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.ILogContext.CreateLog(System.String)">
            <summary>
            Creates a log source with a given source identifier.
            </summary>
            <param name="Source">The source identifier of this log source.</param>
        </member>
        <member name="M:OpenTap.Diagnostic.ILogContext.RemoveLog(OpenTap.Diagnostic.ILog)">
            <summary>
            Removes a log source from the context.
            </summary>
            <param name="LogSource">The given log source.</param>
        </member>
        <member name="M:OpenTap.Diagnostic.ILogContext.AttachListener(OpenTap.Diagnostic.ILogListener)">
            <summary>
            Attaches a log listener.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.ILogContext.DetachListener(OpenTap.Diagnostic.ILogListener)">
            <summary>
            Detaches a log listener. Automatically flushes the context.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.ILogContext.Flush(System.Int32)">
            <summary>
            Flush all events received at the time instant this method is called, but only waits a number of milliseconds.
            </summary>
            <param name="TimeoutMS">Max time to wait for messages. If 0 it will wait infinitely.</param>
            <returns>True if it waited successfully, or false if a timeout occurred.</returns>
        </member>
        <member name="M:OpenTap.Diagnostic.ILogContext.Flush(System.TimeSpan)">
            <summary>
            Flush all events received at the time instant this method is called, but only waits a given duration.
            </summary>
            <param name="Timeout">Max time to wait for messages, or zero to wait infinitely.</param>
            <returns>True if it waited successfully, or false if a timeout occurred.</returns>
        </member>
        <member name="P:OpenTap.Diagnostic.ILogContext.Timestamper">
            <summary>
            Timestamp method to use for all subsequent logged events.
            </summary>
        </member>
        <member name="P:OpenTap.Diagnostic.ILogContext.Async">
            <summary>
            When true, sets the log context to an asynchronous mode (avoiding the potential synchronous mode problem of log sources returning from <see cref="M:OpenTap.Diagnostic.ILog.LogEvent(System.Int32,System.String)"/> calls before the events have been processed). 
            When false, log sources always wait until all log listeners have processed the events.  
            </summary>
        </member>
        <member name="P:OpenTap.Diagnostic.ILogContext.MessageBufferSize">
            <summary>
            Maximum number of outstanding events. Only relevant for <see cref="P:OpenTap.Diagnostic.ILogContext.Async"/> mode.  
            </summary>
        </member>
        <member name="T:OpenTap.Diagnostic.ILogContext2">
            <summary>
            Extended ILogContext interface.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.ILogContext2.AddEvent(OpenTap.Diagnostic.Event)">
            <summary> Registers a new event</summary>
            <param name="event"></param>
        </member>
        <member name="P:OpenTap.Diagnostic.ILogContext2.HasListeners">
            <summary> gets if the context has any listeners.</summary>
        </member>
        <member name="T:OpenTap.Diagnostic.LogFactory">
            <summary>
            Factory class that can create implementations of the ILogContext interface.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.LogFactory.CreateContext">
            <summary>
            Creates a new log context.
            </summary>
        </member>
        <member name="T:OpenTap.Diagnostic.LogFile">
            <summary>
            A simple log listener that writes events to a binary file.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.LogFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.Diagnostic.LogFile"/> class.
            Logs events to a given stream.
            </summary>
            <param name="st">The stream to use.</param>
        </member>
        <member name="M:OpenTap.Diagnostic.LogFile.EventsLogged(System.Collections.Generic.IEnumerable{OpenTap.Diagnostic.Event})">
            <summary>
            Implements the ILogListener method.
            </summary>
            <param name="logEvents">Events array.</param>
        </member>
        <member name="M:OpenTap.Diagnostic.LogFile.Close">
            <summary>
            This method must be called to close the stream.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.LogFile.Flush">
            <summary>
            Flush the current stream.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.LogFile.Dispose">
            <summary>
            Dispose method since BufferedStream implements IDisposable.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.LogFile.Dispose(System.Boolean)">
            <summary>
            Dispose method since BufferedStream implements IDisposable.
            </summary>
            <param name="cleanupScope">If false, cleanup native resources, if true, clean up native and managed.</param>
        </member>
        <member name="T:OpenTap.Diagnostic.BinaryLog">
            <summary>
            A simple log listener that writes events to a  binary file.
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.BinaryLog.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.Diagnostic.BinaryLog"/> class.
            Logs events to a given stream.
            </summary>
            <param name="st">The stream to use.</param>
        </member>
        <member name="M:OpenTap.Diagnostic.BinaryLog.Close">
            <summary>
            Method that must be called to properly close the stream.  
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.BinaryLog.Flush">
            <summary>
            Flushes the messages from the listener.  
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.BinaryLog.EventsLogged(System.Collections.Generic.IEnumerable{OpenTap.Diagnostic.Event})">
            <summary>
            Logs the events.  
            </summary>
            <param name="logEvents">List of events to log.</param>
        </member>
        <member name="M:OpenTap.Diagnostic.BinaryLog.Dispose">
            <summary>
            Resets and releases resources for this unmanaged class
            </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.BinaryLog.Dispose(System.Boolean)">
            <summary>
            Dispose method since BufferedStream implements IDisposable.
            </summary>
            <param name="cleanupScope">If false, cleanup native resources, if true, clean up native and managed.</param>
        </member>
        <member name="T:OpenTap.Diagnostic.LogQueue">
            <summary>
            Generic log message queue.
            </summary>
        </member>
        <member name="T:OpenTap.Diagnostic.LogQueue.LogBuffer">
            <summary>
            Fixed length log buffer allowing atomic lock-free insertion.
            </summary>
        </member>
        <member name="F:OpenTap.Diagnostic.LogQueue.LogBuffer.Capacity">
            <summary> How many log messages to make room for in the buffer.  </summary>
        </member>
        <member name="M:OpenTap.Diagnostic.LogQueue.maybeWaitForProcessing">
            <summary> Prevent too much data from being written to the buffer.</summary>
        </member>
        <member name="T:OpenTap.LogResultListener">
            <summary>
            Listens to events in the log and outputs them to a file. Can be configured with filters on the log verbosity level. 
            FilePath supports replacement of date and verdict. 
            </summary>
        </member>
        <member name="P:OpenTap.LogResultListener.FilePath">
            <summary>
            File path of log file.
            </summary>
        </member>
        <member name="T:OpenTap.LogResultListener.FilterOptionsType">
            <summary>
            FilterOptions for filtering on log message verbosity level.
            </summary>
        </member>
        <member name="F:OpenTap.LogResultListener.FilterOptionsType.Verbose">
            <summary>
            Debug messages.
            </summary>
        </member>
        <member name="F:OpenTap.LogResultListener.FilterOptionsType.Info">
            <summary>
            Information messages.
            </summary>
        </member>
        <member name="F:OpenTap.LogResultListener.FilterOptionsType.Warnings">
            <summary>
            Warning messages.
            </summary>
        </member>
        <member name="F:OpenTap.LogResultListener.FilterOptionsType.Errors">
            <summary>
            Error messages.
            </summary>
        </member>
        <member name="F:OpenTap.LogResultListener.logFilterOptionsLUT">
            <summary>
            to string converter LUT for filter options.
            </summary>
        </member>
        <member name="P:OpenTap.LogResultListener.FilterOptions">
            <summary>
            Contains the FilterOptions flags. Any combination of the four flags is allowed.
            </summary>
        </member>
        <member name="M:OpenTap.LogResultListener.#ctor">
            <summary>
            Sets default values.
            </summary>
        </member>
        <member name="M:OpenTap.LogResultListener.OnTestPlanRunCompleted(OpenTap.TestPlanRun,System.IO.Stream)">
            <summary>
            On test plan run completed the previously temporary file is moved to the location expanded by the macro path.
            </summary>
            <param name="planRun"></param>
            <param name="logStream"></param>
        </member>
        <member name="T:OpenTap.MacroExpansion">
            <summary>
            Converts a macro to its expanded string format. 
            </summary>
        </member>
        <member name="P:OpenTap.MacroExpansion.MacroName">
            <summary>
            Name of macro.
            </summary>
        </member>
        <member name="P:OpenTap.MacroExpansion.Description">
            <summary>
            Description read from attribute.
            </summary>
        </member>
        <member name="P:OpenTap.MacroExpansion.Origin">
            <summary>
            String to identify where the macro comes from. 
            </summary>
        </member>
        <member name="T:OpenTap.MacroString">
            <summary> a string that can be expanded with macros.</summary>
        </member>
        <member name="P:OpenTap.MacroString.Context">
            <summary> Optional context for macro strings that refers to a test step. This is used to find additional macro definitions such as TestPlanDir.</summary>
        </member>
        <member name="P:OpenTap.MacroString.Text">
            <summary> The text that can be expanded. </summary>
        </member>
        <member name="M:OpenTap.MacroString.#ctor(OpenTap.ITestStepParent)">
            <summary> Creates a new instance of MacroString with a context. </summary>
            <param name="context"></param>
        </member>
        <member name="M:OpenTap.MacroString.#ctor">
            <summary> Creates a new MacroString without a context. If a TestStep is used use that as context to get access to TestPlan related macros.</summary>
        </member>
        <member name="M:OpenTap.MacroString.Expand(OpenTap.TestPlanRun,System.Nullable{System.DateTime},System.String)">
            <summary> Expands the text. Macros are harvested from the optional TestPlanRun or the test step.</summary>
            <param name="run">A place to find additional metadata for macro expansion.</param>
            <param name="date">If no date was found in the metadata, this date will be used. If date is not supplied, DateTime.Now will be used.</param>
            <param name="testPlanDir">If no TestPlanDir was found in the metata, this TestPlanDir will be used.</param>
            <returns>The expanded string.</returns>
        </member>
        <member name="M:OpenTap.MacroString.Expand(OpenTap.TestPlanRun,System.Nullable{System.DateTime},System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary> Expands the text. Macros are harvested from the optional TestPlanRun or the test step.</summary>
            <param name="run">A place to find additional metadata for macro expansion.</param>
            <param name="date">If no date was found in the metadata, this date will be used. If date is not supplied, DateTime.Now will be used.</param>
            <param name="testPlanDir">If no TestPlanDir was found in the metata, this TestPlanDir will be used.</param>
            <param name="replacements">Overrides other macro parameters.</param>
            <returns>The expanded string.</returns>
        </member>
        <member name="M:OpenTap.MacroString.ToString">
            <summary> Expands the text.</summary>
        </member>
        <member name="M:OpenTap.MacroString.op_Implicit(OpenTap.MacroString)~System.String">
            <summary> Implicit to string conversion that expands the text of the macroString. This makes it possible to seamlessly switch between string and MacroString in implementation.</summary>
        </member>
        <member name="M:OpenTap.MacroString.ReplaceMacros(System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}},System.String)">
            <summary>
            Replaces macro strings with the strings in the macroDef dictionary.
            If the macro name does not exist in the expanders dictionary.
            </summary>
            <param name="userString">The string to replace macros in.</param>
            <param name="keyvaluepairs">The macro definitions.</param>
            <param name="macroDefault">Default value if MacroName is not in macroDef.</param>
            <returns>A string with macros expanded.</returns>
        </member>
        <member name="T:OpenTap.MacroString.macroLocation">
            <summary>
            To keep track of a macro in the user string.
            </summary>
        </member>
        <member name="F:OpenTap.MacroString.macroLocation.MacroName">
            <summary>
            Name of the macro.
            </summary>
        </member>
        <member name="F:OpenTap.MacroString.macroLocation.MacroBegin">
            <summary>
            Index of the first character of the macro.
            </summary>
        </member>
        <member name="P:OpenTap.MacroString.macroLocation.MacroTagBegin">
            <summary>
            The location of the first macro delimiter.
            </summary>
        </member>
        <member name="F:OpenTap.MacroString.macroLocation.MacroEnd">
            <summary>
            Location of the last macro delimiter.
            </summary>
        </member>
        <member name="P:OpenTap.MacroString.macroLocation.MacroTagLength">
            <summary>
            Length from delimiter to delimiter.
            </summary>
        </member>
        <member name="M:OpenTap.MacroString.macroLocation.GetMacroLocations(System.String)">
            <summary>
            Extract macro information from a string.
            </summary>
            <param name="suppliedString"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.MenuAnnotation">
            <summary>
            This annotation represents a context menu for a given setting. Multiple of these might be present in a single
            AnnotationCollection. 
            </summary>
        </member>
        <member name="M:OpenTap.MenuAnnotation.#ctor(OpenTap.IMemberData)">
            <summary> Creates a new instance. </summary>
            <param name="member"> Which member of an object should the menu be generated for</param>
        </member>
        <member name="F:OpenTap.MenuAnnotation.member">
            <summary> The model used to construct menu items. </summary>
        </member>
        <member name="P:OpenTap.MenuAnnotation.MenuItems">
            <summary> Gets the menu items associated with this Menu. </summary>
        </member>
        <member name="T:OpenTap.IMenuModelFactory">
            <summary> Factory class for build menus. This can be used to extend member with additional menu annotations.</summary>
        </member>
        <member name="M:OpenTap.IMenuModelFactory.CreateModel(OpenTap.IMemberData)">
            <summary> Create model should create exactly one IMenuItemModel whose members will be used in the MenuAnnotation. </summary>
            <param name="member">The member to show the menu for.</param>
            <returns>Shall return null if the model does not support the member.</returns>
        </member>
        <member name="T:OpenTap.IMenuModel">
            <summary>
            Base class for things in a menu item. 
            </summary>
        </member>
        <member name="P:OpenTap.IMenuModel.Source">
            <summary> The source for the menu item. This may be more than one element.
            It is strongly recommended to explicitly implement this property. </summary>
        </member>
        <member name="T:OpenTap.IMenuModelState">
            <summary>
            A MenuModel that can signal about it's current state (Enabled/Disabled). This is useful to dynamically disable the menu model.
            </summary>
        </member>
        <member name="P:OpenTap.IMenuModelState.Enabled">
            <summary> Gets if the menu model is enabled or disabled. </summary>
        </member>
        <member name="T:OpenTap.IconNames">
            <summary>
            Icon names defined here others might be defined by plugins. These names are used by IconAnnotationAttribute. 
            </summary>
        </member>
        <member name="F:OpenTap.IconNames.Parameterize">
            <summary> Parameterize command </summary>
        </member>
        <member name="F:OpenTap.IconNames.ParameterizeOnTestPlan">
            <summary> Parameterize command </summary>
        </member>
        <member name="F:OpenTap.IconNames.ParameterizeOnParent">
            <summary> Parameterize command </summary>
        </member>
        <member name="F:OpenTap.IconNames.Unparameterize">
            <summary> Unparameterize command </summary>
        </member>
        <member name="F:OpenTap.IconNames.EditParameter">
            <summary> Parameterize command </summary>
        </member>
        <member name="F:OpenTap.IconNames.Parameterized">
            <summary> Parameterized icon name.</summary>
        </member>
        <member name="F:OpenTap.IconNames.RemoveParameter">
            <summary> Remove Parameter Command.</summary>
        </member>
        <member name="F:OpenTap.IconNames.AssignOutput">
            <summary> Command to assign an output. </summary>
        </member>
        <member name="F:OpenTap.IconNames.UnassignOutput">
            <summary> Command to unassign an output. </summary>
        </member>
        <member name="F:OpenTap.IconNames.Output">
            <summary> This is an output.</summary>
        </member>
        <member name="F:OpenTap.IconNames.OutputAssigned">
            <summary> This is an output.</summary>
        </member>
        <member name="F:OpenTap.IconNames.Input">
            <summary> This is an input</summary>
        </member>
        <member name="T:OpenTap.NonMetaDataAttribute">
            <summary>
            Specifies that a property is does not constitute meta data for test plan runs. 
            </summary>
        </member>
        <member name="T:OpenTap.ICombinedNumberSequence">
            <summary>
            A number of combined number sequences.
            </summary>
        </member>
        <member name="P:OpenTap.ICombinedNumberSequence.Sequences">
            <summary>
            Inner values representing the sequence.
            </summary>
        </member>
        <member name="M:OpenTap.ICombinedNumberSequence.CastTo(System.Type)">
            <summary>
            Casts the number sequence to a specific type. Should be a numeric type, e.g. typeof(float).
            </summary>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.ICombinedNumberSequence`1">
            <summary>
            Generic number sequence type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenTap.ICombinedNumberSequence`1.CastTo``1">
            <summary>
            Casts this to a new number sequence type.
            </summary>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="T:OpenTap.ICombinedNumberSequenceExtension">
            <summary>
            Extensions for ICombinedNumberSequence.
            </summary>
        </member>
        <member name="M:OpenTap.ICombinedNumberSequenceExtension.CastTo``1(OpenTap.ICombinedNumberSequence)">
            <summary> Casts one type ICombinedNumberSequence to another. </summary>
            <typeparam name="T"></typeparam>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.NumberFormatter">
            <summary>
            Parser / back parser for numbers and sequences of numbers.
            </summary>
        </member>
        <member name="F:OpenTap.NumberFormatter.Format">
            <summary>
            Argument to string.Format.
            </summary>
        </member>
        <member name="F:OpenTap.NumberFormatter.Unit">
            <summary>
            Unit of the numbers (e.g. 'Hz').
            </summary>
        </member>
        <member name="F:OpenTap.NumberFormatter.UsePrefix">
            <summary>
            Boolean setting. When true, parse number into prefixes. For example, '10000 Hz' becomes '10 kHz'. 
            </summary>
        </member>
        <member name="F:OpenTap.NumberFormatter.PreScaling">
            <summary>
            Pre-scales numbers before converting.
            </summary>
        </member>
        <member name="F:OpenTap.NumberFormatter.UseRanges">
            <summary>
            Boolean setting. When true, numbers are parsed back into ranges. When false, separate values as used as their raw representation. 
            </summary>
        </member>
        <member name="F:OpenTap.NumberFormatter.IsCompact">
            <summary>
            Print using compact representation.
            </summary>
        </member>
        <member name="M:OpenTap.NumberFormatter.#ctor(System.Globalization.CultureInfo)">
            <summary> </summary>
            <param name="culture"> The culture used to parse/write numbers.</param>
        </member>
        <member name="M:OpenTap.NumberFormatter.#ctor(System.Globalization.CultureInfo,OpenTap.UnitAttribute)">
            <summary>
            Creates a number parser based on a UnitAttribute.
            </summary>
            <param name="culture"></param>
            <param name="unit"></param>
        </member>
        <member name="M:OpenTap.NumberFormatter.Parse(System.String)">
            <summary>
            Parses a string to a sequence of doubles.
            supports ranges, sequences, units and prefixes.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.NumberFormatter.FormatNumber(System.Object)">
            <summary>
            Parses a number back to a string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.NumberFormatter.ParseNumber(System.String,System.Type)">
            <summary>
            Parses a single number from a string.
            </summary>
            <param name="str"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.NumberFormatter.TryParseNumber(System.String,System.Type,System.Object@)">
            <summary>
            Try to parse a single number from a string.
            </summary>
            <param name="str">the string to parse.</param>
            <param name="t">the return type of value. must be numeric. </param>
            <param name="val">resulting value. Null if parsing failed.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.NumberFormatter.FormatRange(System.Collections.IEnumerable)">
            <summary>
            Parses a sequence of numbers back into a string.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.ObjectCloner">
            <summary>
            Class for generic cloning of values.
            This is done in multiple ways.
            - First check IStringValueConvert
            - Then check if its ICloneable
            - Finally check if its XML cloneable.
            </summary>
        </member>
        <member name="T:OpenTap.OutputAttribute">
            <summary>   
            Specifies that a <see cref="T:OpenTap.TestStep"/> property is an output parameter. This property is expected to be set by <see cref="M:OpenTap.TestStep.Run"/>  
            Also specifies a property that can be selected as an <see cref="T:OpenTap.Input`1"/>  to other TestSteps. 
            </summary>
        </member>
        <member name="P:OpenTap.OutputAttribute.Availability">
            <summary> Specifies the availability of the output. The default behavior is AfterDefer. </summary>
        </member>
        <member name="M:OpenTap.OutputAttribute.#ctor">
            <summary> Creates an instance of OutputAttribute with default values. </summary>
        </member>
        <member name="M:OpenTap.OutputAttribute.#ctor(OpenTap.OutputAvailability)">
            <summary> Creates an instance of OutputAttribute with OutputAvailability specified. </summary>
        </member>
        <member name="T:OpenTap.ResultAttribute">
            <summary> Specifies that a property of a step is also a result. </summary>
        </member>
        <member name="T:OpenTap.OutputAvailability">
            <summary> Used to specify when an output value is available.</summary>
        </member>
        <member name="F:OpenTap.OutputAvailability.BeforeRun">
            <summary> The output value is available before the step has run. This can also be interpreted as always available. </summary>
        </member>
        <member name="F:OpenTap.OutputAvailability.AfterRun">
            <summary> After this step is completed. This may occur before or after AfterChildDefer. </summary>
        </member>
        <member name="F:OpenTap.OutputAvailability.AfterDefer">
            <summary> After defer of this step. This is the default for Outputs. This occurs after 'AfterChildDefer' and 'AfterRun'. </summary>
        </member>
        <member name="T:OpenTap.ParameterCollection">
            <summary>
            Read-only collection of parameters where parameters can be looked up by name.
            </summary>
        </member>
        <member name="P:OpenTap.ParameterCollection.Item(System.String)">
            <summary> Gets a parameter by name.</summary>
            <param name="name"></param>
        </member>
        <member name="M:OpenTap.ParameterCollection.#ctor(OpenTap.IParameter[])">
            <summary> Creates a new parameter collection from an existing list of parameters. </summary>
        </member>
        <member name="M:OpenTap.ParameterManager.checkParameterSanity(OpenTap.ITestStepParent,System.Collections.Generic.ICollection{OpenTap.IMemberData},System.Boolean)">
            <summary>
            Verify that source of a declared parameter on a parent also exists in the step hierarchy.
            </summary>
        </member>
        <member name="P:OpenTap.TestStepMenuModel.OpenTap#ITestStepMenuModel#Source">
            <summary> Multiple item can be selected at once. </summary>
        </member>
        <member name="T:OpenTap.IPictureAnnotation">
            <summary> Marks that the annotated object is a picture. </summary>
        </member>
        <member name="P:OpenTap.IPictureAnnotation.Source">
            <summary>
            Specifies the path to the picture
            </summary>
        </member>
        <member name="P:OpenTap.IPictureAnnotation.Description">
            <summary>
            Specifies a description of the picture. Can be used in non-gui applications as an alternative to showing the picture.
            </summary>
        </member>
        <member name="T:OpenTap.IPicture">
            <summary>
            Represents a picture resource
            </summary>
        </member>
        <member name="P:OpenTap.IPicture.Source">
            <summary>
            Specifies the path to the picture
            </summary>
        </member>
        <member name="P:OpenTap.IPicture.Description">
            <summary>
            Specifies a description of the picture
            </summary>
        </member>
        <member name="T:OpenTap.Picture">
            <summary>
            Represents a picture resource
            </summary>
        </member>
        <member name="P:OpenTap.Picture.Source">
            <summary> Specifies the path to the picture. </summary>
        </member>
        <member name="P:OpenTap.Picture.Description">
            <summary> Specifies a description of the picture. </summary>
        </member>
        <member name="M:OpenTap.Picture.Equals(System.Object)">
            <summary> Returns true if the two pictures are the same with respect to Source and Description. </summary>
        </member>
        <member name="M:OpenTap.Picture.GetHashCode">
            <summary> Calculates a hash based on source and description. </summary>
        </member>
        <member name="T:OpenTap.PluginManager">
            <summary>
            Static class that searches for and loads OpenTAP plugins.
            </summary>
        </member>
        <member name="P:OpenTap.PluginManager.DirectoriesToSearch">
            <summary>
            Specifies the directories to be searched for plugins. 
            Any additional directories should be added before calling <see cref="M:OpenTap.PluginManager.SearchAsync"/>,
            <see cref="M:OpenTap.PluginManager.GetAllPlugins"/>, <see cref="M:OpenTap.PluginManager.GetPlugins``1"/>, <see cref="M:OpenTap.PluginManager.GetPlugins(System.Type)"/>,
            <see cref="M:OpenTap.PluginManager.LocateType(System.String)"/> or <see cref="M:OpenTap.PluginManager.LocateTypeData(System.String)"/>
            </summary>
        </member>
        <member name="T:OpenTap.PluginManager.AssemblyLoadFilterDelegate">
            <summary>
            Function signature for assembly load filters.
            </summary>
            <param name="assemblyName">The name of the assembly (not the full name).</param>
            <param name="version">The assembly version.</param>
            <returns>true if the assembly should be loaded. False if not.</returns>
        </member>
        <member name="M:OpenTap.PluginManager.AddAssemblyLoadFilter(OpenTap.PluginManager.AssemblyLoadFilterDelegate)">
            <summary>
            Adds a function that is used to filter whether an assembly should be loaded. This can be used to control which assemblies gets loaded. 
            This is for very advanced usage only. The filters are used in the order in which they are added.
            </summary>
            <param name="filter">The additional filter to use.</param>
        </member>
        <member name="M:OpenTap.PluginManager.GetPlugins(System.Type)">
            <summary>
            Returns a list of types that implement a specified plugin base type.
            This will load the assembly containing the type, if not already loaded.
            This will search for plugins if not done already (e.g. using <see cref="M:OpenTap.PluginManager.SearchAsync"/>)
            </summary>
            <param name="pluginBaseType">only looks for types descending from pluginBaseType.</param>
        </member>
        <member name="T:OpenTap.PluginManager.PluginFetcher">
            <summary> Class for caching the result of GetPlugins(type).</summary>
        </member>
        <member name="M:OpenTap.PluginManager.GetSearcher">
            <summary>
            Returns the <see cref="T:OpenTap.PluginSearcher"/> used to search for plugins.
            This will search for plugins if not done already (i.e. call and wait for <see cref="M:OpenTap.PluginManager.SearchAsync"/>)
            </summary>
        </member>
        <member name="M:OpenTap.PluginManager.GetAllPlugins">
            <summary>
            Gets all plugins. I.e. all types that descend from <see cref="T:OpenTap.ITapPlugin"/>.
            Abstract types and interfaces are not included.
            This does not require/cause the assembly containing the type to be loaded.
            This will search for plugins if not done already (i.e. call and wait for <see cref="M:OpenTap.PluginManager.SearchAsync"/>)
            Only C#/.NET types are returned. To also get dynamic types (from custom <see cref="T:OpenTap.ITypeDataSearcher"/>s) use <see cref="M:OpenTap.TypeData.GetDerivedTypes(OpenTap.ITypeData)"/> instead.
            </summary>
        </member>
        <member name="M:OpenTap.PluginManager.GetPlugins``1">
            <summary>
            Returns a list of types that implement a specified plugin base type.
            This will load the assembly containing the type, if not already loaded.
            This will search for plugins if not done already (i.e. call and wait for <see cref="M:OpenTap.PluginManager.SearchAsync"/>)
            Only C#/.NET types are returned. To also get dynamic types (from custom <see cref="T:OpenTap.ITypeDataSearcher"/>s) use <see cref="M:OpenTap.TypeData.GetDerivedTypes(OpenTap.ITypeData)"/> instead.
            </summary>
            <remarks>
            This is just to provide a more convenient syntax compared to <see cref="M:OpenTap.PluginManager.GetPlugins(System.Type)"/>. The funcionallity is identical.
            </remarks>  
            <typeparam name="BaseType">find types that descends from this type.</typeparam>
            <returns>A read-only collection of types.</returns>
        </member>
        <member name="T:OpenTap.PluginManager.StaticPluginTypeCache`1">
            <summary>
            Cache structure to lock-free optimize BaseType type lookups. 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenTap.PluginManager.GetOpenTapAssembly">
            <summary>
            Gets the AssemblyData for the OpenTap.dll assembly.
            This will search for plugins if not done already (i.e. call and wait for <see cref="M:OpenTap.PluginManager.SearchAsync"/>)
            </summary>
        </member>
        <member name="M:OpenTap.PluginManager.SearchAsync">
            <summary>
            Start a search task that finds plugins to the platform.
            This call is not blocking, some other calls to PluginManager will automatically 
            wait for this task to finish (or even start it if it hasn't been already). These calls 
            include <see cref="M:OpenTap.PluginManager.GetAllPlugins"/>, <see cref="M:OpenTap.PluginManager.GetPlugins``1"/>, 
            <see cref="M:OpenTap.PluginManager.GetPlugins(System.Type)"/>, <see cref="M:OpenTap.PluginManager.LocateType(System.String)"/> and <see cref="M:OpenTap.PluginManager.LocateTypeData(System.String)"/>
            </summary>
        </member>
        <member name="M:OpenTap.PluginManager.Search">
            <summary>Searches for plugins.</summary>
        </member>
        <member name="M:OpenTap.PluginManager.Load">
            <summary> Sets up the PluginManager assembly resolution systems. Under normal circumstances it is not needed to call this method directly.</summary>
        </member>
        <member name="M:OpenTap.PluginManager.#cctor">
            <summary> Calls PluginManager.Load </summary>
        </member>
        <member name="M:OpenTap.PluginManager.SearchAndAddToStore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Searches the files in fileNames for dlls implementing <see cref="T:OpenTap.ITapPlugin"/>
            and puts the implementation in the appropriate list.
            </summary>
            <param name="_fileNames">List of files to search.</param>
        </member>
        <member name="M:OpenTap.PluginManager.LocateType(System.String)">
            <summary>
            Searches through found plugins. Returning the System.Type matching the given name if such a type is found
            in any assembly in <see cref="P:OpenTap.PluginManager.DirectoriesToSearch"/> or mscorelib - otherwise null (e.g. for types located in the GAC)
            This will load the assembly containing the type, if not already loaded.
            This will search for plugins if not done already (i.e. call and wait for <see cref="M:OpenTap.PluginManager.SearchAsync"/>)
            </summary>
        </member>
        <member name="M:OpenTap.PluginManager.LocateTypeData(System.String)">
            <summary>
            Searches through found plugins. Returns the <see cref="T:OpenTap.TypeData"/> matching the given name if such a type is found
            in any assembly in <see cref="P:OpenTap.PluginManager.DirectoriesToSearch"/> - otherwise null (e.g. for types located in the GAC).
            This does not require/cause the assembly containing the type to be loaded.
            This will search for plugins if not done already (i.e. call and wait for <see cref="M:OpenTap.PluginManager.SearchAsync"/>)
            </summary>
        </member>
        <member name="M:OpenTap.TapAssemblyResolver.Invalidate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Should be called before each search. Flushes the files found. Also sets up the directories to search.
            </summary>
        </member>
        <member name="F:OpenTap.TapAssemblyResolver.asmLookup">
            <summary>
            Look up for assembly locations in case Assembly.Load cannot find it. Used for resolve assembly.
            </summary>
        </member>
        <member name="T:OpenTap.TapAssemblyResolver.MatchingAssembly">
            <summary>
            This is used instead of a tuple in the above function. Tuples should _not_ be used in the assembly resolving process
            as it sometimes requires assembly resolving to load System.ValueTyple.dll.
            </summary>
        </member>
        <member name="T:OpenTap.PluginAssemblyAttribute">
            <summary>
            Marks an assembly as one containing OpenTAP plugins.
            </summary>
        </member>
        <member name="P:OpenTap.PluginAssemblyAttribute.SearchInternalTypes">
            <summary>
            Ask the <see cref="T:OpenTap.PluginSearcher"/> to also look for plugins among the internal types in this assembly (default is to only search in public types).
            </summary>
        </member>
        <member name="P:OpenTap.PluginAssemblyAttribute.PluginInitMethod">
            <summary>
            (Optional) Full name of Plugin Init method that gets run before any other code in the plugin. Will only run once. 
            Requirement: Must be parameterless public static method returning void inside public static class
            Important note: If init method fails (throws an <see cref="T:System.Exception"/>), then NONE of the <see cref="T:OpenTap.ITapPlugin"/> types will load
            </summary>
        </member>
        <member name="M:OpenTap.PluginAssemblyAttribute.#ctor(System.Boolean)">
            <summary>
            Marks an assembly as one containing OpenTAP plugins.
            </summary>
            <param name="SearchInternalTypes">True to ask the <see cref="T:OpenTap.PluginSearcher"/> to also look for plugins among the internal types in this assembly (default is to only search in public types).</param>
        </member>
        <member name="M:OpenTap.PluginAssemblyAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Marks an assembly as one containing OpenTAP plugins.
            </summary>
            <param name="SearchInternalTypes">True to ask the <see cref="T:OpenTap.PluginSearcher"/> to also look for plugins among the internal types in this assembly (default is to only search in public types).</param>
            <param name="PluginInitMethod">Full name of Plugin Init method (<see cref="P:OpenTap.PluginAssemblyAttribute.PluginInitMethod"/>)</param>
        </member>
        <member name="T:OpenTap.PluginSearcher">
            <summary>
            Searches assemblies for classes implementing ITapPlugin.
            </summary>
        </member>
        <member name="T:OpenTap.PluginSearcher.Options">
            <summary>
            Options for Plugin Searcher.
            </summary>
        </member>
        <member name="F:OpenTap.PluginSearcher.Options.None">
            <summary> No options </summary>
        </member>
        <member name="F:OpenTap.PluginSearcher.Options.IncludeSameAssemblies">
            <summary> Allow multiple assemblies with the same name </summary>
        </member>
        <member name="M:OpenTap.PluginSearcher.#ctor">
            <summary>
            Searches assemblies for classes implementing ITapPlugin.
            </summary>
        </member>
        <member name="M:OpenTap.PluginSearcher.#ctor(OpenTap.PluginSearcher.Options)">
            <summary>
            Searches assemblies for classes implementing ITapPlugin.
            </summary>
            <param name="opts">Option setting for Plugin Searcher.</param>
        </member>
        <member name="M:OpenTap.PluginSearcher.AssemblyDependencyGraph.Generate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a list of assemblies and their dependencies/references. 
            The list is sorted such that a dependency is before the assembly/assemblies that depend on it.
            </summary>
        </member>
        <member name="M:OpenTap.PluginSearcher.AssemblyDependencyGraph.AddAssemblyInfo(System.String,System.Reflection.Assembly)">
            <summary> Manually analyze and add an assembly file. </summary>
        </member>
        <member name="F:OpenTap.PluginSearcher.Assemblies">
            <summary>
            The assemblies found by Search. Ordered such that referenced assemblies come before assemblies that reference them.
            </summary>
        </member>
        <member name="M:OpenTap.PluginSearcher.Search(System.String)">
            <summary>
            Searches assembly files and returns all the plugin types found in those.
            The search will also populate a complete list of types searched in the AllTypes property
            and all Assemblies found in the Assemblies property.
            Subsequent calls to this method will add to those properties.
            </summary>
        </member>
        <member name="M:OpenTap.PluginSearcher.AddAssembly(System.String,System.Reflection.Assembly)">
            <summary> Adds an assembly outside the 'search' context. </summary>
        </member>
        <member name="M:OpenTap.PluginSearcher.Search(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Searches assembly files and returns all the plugin types found in those.
            The search will also populate a complete list of types searched in the AllTypes property
            and all Assemblies found in the Assemblies property.
            Subsequent calls to this method will add to those properties.
            </summary>
        </member>
        <member name="F:OpenTap.PluginSearcher.AllTypes">
            <summary>
            All types found by the search indexed by their SearchAssembly.FullName.
            Null if PluginSearcher.Search has not been called.
            </summary>
        </member>
        <member name="F:OpenTap.PluginSearcher.PluginTypes">
            <summary>
            Types found by the search that implement ITapPlugin.
            Null if PluginSearcher.Search has not been called.
            </summary>
        </member>
        <member name="M:OpenTap.PluginSearcher.GetFullName(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.EntityHandle)">
            <summary>
            Helper to get the full name (namespace + name) of the type referenced by a TypeDefinitionHandle or TypeReferenceHandle
            </summary>
        </member>
        <member name="T:OpenTap.PluginTypeSelectorAttribute">
            <summary>
            Indicates that a property can select an instance of a plugin type deriving from the type of the property.
            </summary>
        </member>
        <member name="T:OpenTap.ComponentSettingsLayoutAttribute">
            <summary>
            Attribute used to specify how to display a <see cref="T:OpenTap.ComponentSettingsList"/> class in a GUI.
            </summary>
        </member>
        <member name="T:OpenTap.ComponentSettingsLayoutAttribute.DisplayMode">
            <summary>
            Enum used to specify how to display a <see cref="T:OpenTap.ComponentSettingsList"/> class in a GUI.
            </summary>
        </member>
        <member name="F:OpenTap.ComponentSettingsLayoutAttribute.DisplayMode.MasterDetail">
            <summary>
            Show the list of objects as a master details view (list on the left, details for selected element in list on the right).
            </summary>
        </member>
        <member name="F:OpenTap.ComponentSettingsLayoutAttribute.DisplayMode.DataGrid">
            <summary>
            Show the list of objects as rows in a table.
            </summary>
        </member>
        <member name="P:OpenTap.ComponentSettingsLayoutAttribute.Mode">
            <summary>
            Specifies how to display the decorated class in a GUI.
            </summary>
        </member>
        <member name="M:OpenTap.ComponentSettingsLayoutAttribute.#ctor(OpenTap.ComponentSettingsLayoutAttribute.DisplayMode)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="mode">Specifies how to display the decorated class in a GUI.</param>
        </member>
        <member name="T:OpenTap.Connection">
            <summary>
            Object representing a connection between two <see cref="T:OpenTap.Port"/>s. Can be extended to add properties.
            </summary>
        </member>
        <member name="P:OpenTap.Connection.Name">
            <summary>
            A name for the connection to be displayed in the user interface.
            </summary>
        </member>
        <member name="P:OpenTap.Connection.Port1">
            <summary>
            The port at the first end of the connection.
            </summary>
        </member>
        <member name="M:OpenTap.Connection.HasPort(OpenTap.Port)">
            <summary> returns true if the port is used by this connection. </summary>
        </member>
        <member name="P:OpenTap.Connection.Port2">
            <summary>
            The port at the second end of the connection.
            </summary>
        </member>
        <member name="P:OpenTap.Connection.Via">
            <summary>
            Gets the list of <see cref="T:OpenTap.ViaPoint"/>s that this connection goes through. 
            </summary>
        </member>
        <member name="P:OpenTap.Connection.IsActive">
            <summary>
            Returns true when a connection going through one or more switches (set using the <see cref="P:OpenTap.Connection.Via"/> property) is "Active" (all switches are in the correct position). 
            </summary>
        </member>
        <member name="M:OpenTap.Connection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.Connection"/> class.
            </summary>
        </member>
        <member name="M:OpenTap.Connection.GetOtherPort(OpenTap.Port)">
            <summary>
            Returns the other port when given either <see cref="P:OpenTap.Connection.Port1"/> or <see cref="P:OpenTap.Connection.Port2"/>.
            </summary>
        </member>
        <member name="M:OpenTap.Connection.loadEndpoint(OpenTap.Port,OpenTap.Port)">
            <summary>
            Handle that an endpoint can disappear.
            </summary>
            <param name="newport"></param>
            <param name="oldPort"></param>
        </member>
        <member name="M:OpenTap.Connection.ToString">
            <summary>
            Returns a string representation of this connection which names the ports in each end.
            </summary>
        </member>
        <member name="T:OpenTap.ConnectionSettings">
            <summary>
            Settings specifying how DUTs and Instruments are connected.
            </summary>
        </member>
        <member name="T:OpenTap.DirectionalRfConnection">
            <summary>
            A directional <see cref="T:OpenTap.Connection"/> that has an RF cable loss parameter.
            </summary>
        </member>
        <member name="T:OpenTap.DirectionalRfConnection.PortDirectionEnum">
            <summary>
            Specifies the direction of a connection.
            </summary>
        </member>
        <member name="F:OpenTap.DirectionalRfConnection.PortDirectionEnum.FROM_1_TO_2">
            <summary>
            Directional RF connection from Port1 to Port2.
            </summary>
        </member>
        <member name="F:OpenTap.DirectionalRfConnection.PortDirectionEnum.FROM_2_TO_1">
            <summary>
            Directional RF connection from Port2 to Port1.
            </summary>
        </member>
        <member name="P:OpenTap.DirectionalRfConnection.PortDirection">
            <summary>
            Direction of RF connection.
            </summary>
        </member>
        <member name="M:OpenTap.DirectionalRfConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.DirectionalRfConnection"/> class.
            </summary>
        </member>
        <member name="T:OpenTap.IConstResourceProperty">
            <summary>
            An immutable/constant object that is a property on a Resource. When deserializing references to objects of this type, 
            <see cref="T:OpenTap.TapSerializer"/> makes sure that all references refer to the same unique instance on the specific instrument.
            </summary>
        </member>
        <member name="P:OpenTap.IConstResourceProperty.Device">
            <summary>
            TDevice/resource to which this object belongs.  
            </summary>
            <remarks>
            All devices should be marked with the <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute"/>.
            </remarks>
        </member>
        <member name="P:OpenTap.IConstResourceProperty.Name">
            <summary>
            Name of this object (should be unique among objects of the same type on the same device/resource).  
            </summary>
        </member>
        <member name="T:OpenTap.IConstResourcePropertyHelpers">
            <summary>
            Helper and extension methods for IConstResourceProperty.
            </summary>
        </member>
        <member name="M:OpenTap.IConstResourcePropertyHelpers.GetConstProperties``1(OpenTap.IResource)">
            <summary>
            Returns all IConstResourceProperty instances of a specific type defined on this resource.
            </summary>
        </member>
        <member name="F:OpenTap.IConstResourcePropertyHelpers.constPropertyCache">
            <summary>  Const resources are not expected to change for a given resource, so we can optimize this by caching the result. </summary>
        </member>
        <member name="M:OpenTap.IConstResourcePropertyHelpers.GetConstProperties(OpenTap.IResource)">
            <summary>
            Returns all IConstResourceProperty instances on a resource.
            </summary>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.Port">
            <summary>
            Object representing a port on an instrument or DUT. Ports are connected with <see cref="T:OpenTap.Connection"/> objects.
            </summary>
        </member>
        <member name="P:OpenTap.Port.Device">
            <summary>
            The device (usually an <see cref="T:OpenTap.Instrument"/> or <see cref="T:OpenTap.Dut"/>) on which this port exists.
            </summary>
        </member>
        <member name="P:OpenTap.Port.Connections">
            <summary>
            List of <see cref="T:OpenTap.Connection"/>s connected to this port.
            </summary>
        </member>
        <member name="P:OpenTap.Port.Name">
            <summary>
            The name of this port. (Should be unique among <see cref="T:OpenTap.Port"/> objects on the same device/resource).
            </summary>
        </member>
        <member name="M:OpenTap.Port.#ctor(OpenTap.IResource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.Port"/> class.
            </summary>
        </member>
        <member name="M:OpenTap.Port.GetConnectedPorts">
            <summary>
            Returns a list of the ports that this port has connections to.
            </summary>
        </member>
        <member name="M:OpenTap.Port.GetActiveConnectedPorts">
            <summary>
            Returns a list of the ports that this port has connections to and that are active.
            </summary>
        </member>
        <member name="M:OpenTap.Port.GetConnectionsTo(OpenTap.IResource)">
            <summary>
            Returns a list of connections from this port to a specified device.
            </summary>
        </member>
        <member name="M:OpenTap.Port.GetConnectionsTo(OpenTap.Port)">
            <summary>
            Returns a list of connections from this port to a specified port.
            </summary>
        </member>
        <member name="M:OpenTap.Port.ToString">
            <summary>
            Returns a string describing this port.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.InputPort">
            <summary>
            An unidirectional port that is always an input.
            </summary>
        </member>
        <member name="M:OpenTap.InputPort.#ctor(OpenTap.IResource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.InputPort"/> class.
            </summary>
        </member>
        <member name="T:OpenTap.OutputPort">
            <summary>
            An unidirectional port that is always an output.
            </summary>
        </member>
        <member name="M:OpenTap.OutputPort.#ctor(OpenTap.IResource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.OutputPort"/> class.
            </summary>
        </member>
        <member name="T:OpenTap.RfConnection">
            <summary>
            A <see cref="T:OpenTap.Connection"/> that has an RF cable loss parameter.
            </summary>
        </member>
        <member name="T:OpenTap.RfConnection.CableLossPoint">
            <summary>
            Represents a point in a frequency/loss table.
            </summary>
        </member>
        <member name="M:OpenTap.RfConnection.CableLossPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.RfConnection.CableLossPoint"/> class.
            </summary>
        </member>
        <member name="P:OpenTap.RfConnection.CableLossPoint.Frequency">
            <summary>
            The frequency at which the loss is applied.
            </summary>
        </member>
        <member name="P:OpenTap.RfConnection.CableLossPoint.Loss">
            <summary>
            The cable loss in dB.
            </summary>
        </member>
        <member name="M:OpenTap.RfConnection.CableLossPoint.ToString">
            <summary>
            Prints the loss point, e.g "10dB @ 100kHz".
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenTap.RfConnection.CableLoss">
            <summary>
            The cable loss in dB between the two ports.
            </summary>
        </member>
        <member name="M:OpenTap.RfConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.RfConnection"/> class.
            </summary>
        </member>
        <member name="M:OpenTap.RfConnection.GetInterpolatedCableLoss(System.Double)">
            <summary>
            Given a particular frequency, an interpolated CableLoss value is returned, based on CableLoss values at the two closest frequencies.
            If exact frequency is defined, that CableLoss value will be returned.
            </summary>
            <param name="frequency"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.SwitchPosition">
            <summary>
            Represents a specific setting/mode/position of a switch.
            </summary>
        </member>
        <member name="M:OpenTap.SwitchPosition.#ctor(OpenTap.Instrument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.SwitchPosition"/> class.
            </summary>
        </member>
        <member name="T:OpenTap.ViaPoint">
            <summary>
            Base class representing a point through which a connection passes. There is a list of these in <see cref="P:OpenTap.Connection.Via"/>.
            These usually represent a state that a connection switch element/instrument can be in. Implementations include <see cref="T:OpenTap.SwitchPosition"/> and <see cref="T:OpenTap.SwitchMatrixPath"/>
            </summary>
        </member>
        <member name="P:OpenTap.ViaPoint.Name">
            <summary>
            The name of this state/mode/position in the switch. (Should be unique among <see cref="T:OpenTap.ViaPoint"/> objects on the same device/resource).
            </summary>
        </member>
        <member name="P:OpenTap.ViaPoint.IsActive">
            <summary>
            Indicates whether the switch is currently in this position. 
            Should be set by the Device implementation.
            </summary>
        </member>
        <member name="P:OpenTap.ViaPoint.Device">
            <summary>
            The device (usually an <see cref="T:OpenTap.Instrument"/>) on which this switch position exists.
            </summary>
        </member>
        <member name="M:OpenTap.ViaPoint.ToString">
            <summary>
            Returns a string describing this switch position (string.Format("{0}.{1}", this.Device.Name, this.Name)).
            </summary>
        </member>
        <member name="M:OpenTap.ViaPoint.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
        </member>
        <member name="M:OpenTap.ViaPoint.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:OpenTap.ViaPoint.Equals(OpenTap.ViaPoint)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="T:OpenTap.SwitchMatrixPath">
            <summary>
            Represents a specific path through a switch matrix.
            </summary>
        </member>
        <member name="P:OpenTap.SwitchMatrixPath.Row">
            <summary>
            Row in the matrix that describes this path 
            </summary>
        </member>
        <member name="P:OpenTap.SwitchMatrixPath.Column">
            <summary>
            Column in the matrix that describes this path 
            </summary>
        </member>
        <member name="P:OpenTap.SwitchMatrixPath.Name">
            <summary>
            The name of this switch path. (Note the name uses 1-based indexing to refer to the Row/Column)
            </summary>
        </member>
        <member name="M:OpenTap.SwitchMatrixPath.#ctor(OpenTap.Instrument,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTap.SwitchPosition"/> class.
            </summary>
        </member>
        <member name="T:OpenTap.SwitchMatrixPathCollection">
            <summary>
            Collecion of <see cref="T:OpenTap.SwitchMatrixPath"/>s that belong to a switch matrix. 
            This is a lazy collection that is only populated with actual <see cref="T:OpenTap.SwitchMatrixPath"/> when each element is accessed or the 
            </summary>
        </member>
        <member name="T:OpenTap.SwitchMatrixPathCollection.SwitchMatrixPathCollectionEnumerator">
            <summary>
            Enumerator for <see cref="T:OpenTap.SwitchMatrixPathCollection"/>
            </summary>
        </member>
        <member name="P:OpenTap.SwitchMatrixPathCollection.SwitchMatrixPathCollectionEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:OpenTap.SwitchMatrixPathCollection.SwitchMatrixPathCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if
            the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:OpenTap.SwitchMatrixPathCollection.SwitchMatrixPathCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element
                in the collection.
            </summary>
        </member>
        <member name="M:OpenTap.SwitchMatrixPathCollection.SwitchMatrixPathCollectionEnumerator.Dispose">
            <summary>
            Has no effect in this implementation.
            </summary>
        </member>
        <member name="P:OpenTap.SwitchMatrixPathCollection.RowCount">
            <summary>
            Number of row in the switch matrix
            </summary>
        </member>
        <member name="P:OpenTap.SwitchMatrixPathCollection.ColumnCount">
            <summary>
            Number of columns in the switch matrix
            </summary>
        </member>
        <member name="P:OpenTap.SwitchMatrixPathCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:OpenTap.SwitchMatrixPath"/> corresponding to a particular row and column in the matrix.
            </summary>
        </member>
        <member name="M:OpenTap.SwitchMatrixPathCollection.#ctor(OpenTap.Instrument,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:OpenTap.SwitchMatrixPathCollection"/>
            </summary>
            <param name="device"></param>
            <param name="rowCount"></param>
            <param name="columnCount"></param>
        </member>
        <member name="M:OpenTap.SwitchMatrixPathCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:OpenTap.SwitchMatrixPathCollection.Get(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:OpenTap.SwitchMatrixPath"/> corresponding to a particular row and column in the matrix.
            </summary>
        </member>
        <member name="T:OpenTap.CSharpTypeInfoProvider">
            <summary> Type data provider for .NET types. </summary>
        </member>
        <member name="P:OpenTap.CSharpTypeInfoProvider.Priority">
            <summary> The priority of this type info provider.  </summary>
        </member>
        <member name="M:OpenTap.CSharpTypeInfoProvider.GetTypeData(System.String)">
            <summary> Gets the C# type info for a string.  </summary>
        </member>
        <member name="M:OpenTap.CSharpTypeInfoProvider.GetTypeData(System.Object)">
            <summary> Gets the C# type info for an object. </summary>
        </member>
        <member name="T:OpenTap.MemberData">
            <summary>
            Represents the members of C#/dotnet types.
            </summary>
        </member>
        <member name="M:OpenTap.MemberData.Create(System.Reflection.MemberInfo)">
            <summary>
            Creates a new MemberData for a member of a C#/dotnet type.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="F:OpenTap.MemberData.Member">
            <summary> The System.Reflection.MemberInfo this represents. </summary>
        </member>
        <member name="P:OpenTap.MemberData.Attributes">
            <summary> The attributes of this member. </summary>
        </member>
        <member name="M:OpenTap.MemberData.GetValue(System.Object)">
            <summary> Gets the value of this member.</summary> 
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.MemberData.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this member on an object.
            </summary>
            <param name="owner"></param>
            <param name="value"></param>
        </member>
        <member name="P:OpenTap.MemberData.Name">
            <summary> The name of this member. </summary>
        </member>
        <member name="P:OpenTap.MemberData.DeclaringType">
            <summary>
            The declaring type of this member.
            </summary>
        </member>
        <member name="P:OpenTap.MemberData.Writable">
            <summary> Gets if the member is writable. </summary>
        </member>
        <member name="P:OpenTap.MemberData.Readable">
            <summary> Gets if the member is readable.  </summary>
        </member>
        <member name="P:OpenTap.MemberData.TypeDescriptor">
            <summary> The type descriptor for the object that this member can hold. </summary>
        </member>
        <member name="M:OpenTap.MemberData.ToString">
            <summary> Gets a string representation of this CSharpType. </summary>
        </member>
        <member name="T:OpenTap.DotNetTypeDataSearcher">
            <summary> Searches for .NET types. This is the default TypeData searcher. </summary>
        </member>
        <member name="P:OpenTap.DotNetTypeDataSearcher.OpenTap#ITypeDataSearcher#Types">
            <summary>
            Get all types found by the search. 
            </summary>
        </member>
        <member name="M:OpenTap.DotNetTypeDataSearcher.OpenTap#ITypeDataSearcher#Search">
            <summary> Performs an implementation specific search for types. Generates ITypeData objects for all types found Types property. </summary>
        </member>
        <member name="T:OpenTap.IMemberData">
            <summary> A member of an object type. </summary>
        </member>
        <member name="P:OpenTap.IMemberData.DeclaringType">
            <summary> The type on which this member is declared. </summary>
        </member>
        <member name="P:OpenTap.IMemberData.TypeDescriptor">
            <summary> The underlying type of this member. </summary>
        </member>
        <member name="P:OpenTap.IMemberData.Writable">
            <summary> Gets if this member is writable. </summary>
        </member>
        <member name="P:OpenTap.IMemberData.Readable">
            <summary> Gets if this member is readable.</summary>
        </member>
        <member name="M:OpenTap.IMemberData.SetValue(System.Object,System.Object)">
            <summary> Sets the value of this member on the owner. </summary>
            <param name="owner"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenTap.IMemberData.GetValue(System.Object)">
            <summary>
            Gets the value of this member on the owner.
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.IReflectionData">
            <summary>
            Base info for reflection objects.
            </summary>
        </member>
        <member name="P:OpenTap.IReflectionData.Attributes">
            <summary> The attributes of it. </summary>
        </member>
        <member name="P:OpenTap.IReflectionData.Name">
            <summary>
            The name of it.
            </summary>
        </member>
        <member name="T:OpenTap.IStackedTypeDataProvider">
            <summary>Hook into type reflection system. Provides type data for a given object or identifier. This variant is aware of the stack of other providers running after itself.</summary>
        </member>
        <member name="M:OpenTap.IStackedTypeDataProvider.GetTypeData(System.String,OpenTap.TypeDataProviderStack)">
            <summary> Gets the type data from an identifier. </summary>
            <param name="identifier">The identifier to get type information for.</param>
            <param name="stack">Stack containing remaining ITypeDataProviders that have not yet been called.</param>
            <returns>A representation of the type specified by identifier or null if this provider cannot handle the specified identifier.</returns>
        </member>
        <member name="M:OpenTap.IStackedTypeDataProvider.GetTypeData(System.Object,OpenTap.TypeDataProviderStack)">
            <summary> Gets the type data from an object. </summary>
            <param name="obj">The object to get type information for.</param>
            <param name="stack">Stack containing remaining ITypeDataProviders that have not yet been called.</param>
            <returns>A representation of the type of the specified object or null if this provider cannot handle the specified type of object.</returns>
        </member>
        <member name="P:OpenTap.IStackedTypeDataProvider.Priority">
            <summary> The priority of this type info provider. Note, this decides the order in which the type info is resolved. </summary>
        </member>
        <member name="T:OpenTap.ITypeData">
            <summary> The type information of an object. </summary>
        </member>
        <member name="P:OpenTap.ITypeData.BaseType">
            <summary> The base type of this type. </summary>
        </member>
        <member name="M:OpenTap.ITypeData.GetMembers">
            <summary> Gets the members of this object. </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ITypeData.GetMember(System.String)">
            <summary> Gets a member of this object by name.  </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ITypeData.CreateInstance(System.Object[])">
            <summary>
            Creates an instance of this type. The arguments are used for construction.
            </summary>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="P:OpenTap.ITypeData.CanCreateInstance">
            <summary>
            Gets if CreateInstance will work for this type. For examples, for interfaces and abstract classes it will not work.
            </summary>
        </member>
        <member name="T:OpenTap.ICacheOptimizer">
            <summary> Interface for classes that can be used for cache optimizations. </summary>
        </member>
        <member name="M:OpenTap.ICacheOptimizer.LoadCache">
            <summary> Loads / heats up the cache.</summary>
        </member>
        <member name="M:OpenTap.ICacheOptimizer.UnloadCache">
            <summary> Unload / cool down the cache.</summary>
        </member>
        <member name="T:OpenTap.ITypeDataProvider">
            <summary>Hook into type reflection system. Provides type data for a given object or identifier. </summary>
        </member>
        <member name="M:OpenTap.ITypeDataProvider.GetTypeData(System.String)">
            <summary> Gets the type data from an identifier. </summary>
            <param name="identifier">The identifier to get type information for.</param>
            <returns>A representation of the type specified by identifier or null if this provider cannot handle the specified identifier.</returns>
        </member>
        <member name="M:OpenTap.ITypeDataProvider.GetTypeData(System.Object)">
            <summary> Gets the type data from an object. </summary>
            <param name="obj">The object to get type information for.</param>
            <returns>A representation of the type of the specified object or null if this provider cannot handle the specified type of object.</returns>
        </member>
        <member name="P:OpenTap.ITypeDataProvider.Priority">
            <summary> The priority of this type info provider. Note, this decides the order in which the type info is resolved. </summary>
        </member>
        <member name="T:OpenTap.ITypeDataSearcher">
            <summary>
            Searches for "types" and returns them as ITypeData objects. The OpenTAP type system calls all implementations of this.
            </summary>
        </member>
        <member name="P:OpenTap.ITypeDataSearcher.Types">
            <summary> Get all types found by the search. 
            Null will cause Search() to be called (again) before accessing this. </summary>
        </member>
        <member name="M:OpenTap.ITypeDataSearcher.Search">
            <summary>
            Performs an implementation specific search for types. 
            Generates ITypeData objects for all types and populates the Types property with these. 
            Always sets the Types property to some value (not null).
            </summary>
        </member>
        <member name="T:OpenTap.TypeDataCacheInvalidatedEventArgs">
            <summary> Event occuring when the TypeData cache has been invalidated. </summary>
        </member>
        <member name="T:OpenTap.ITypeDataSearcherCacheInvalidated">
            <summary>
            A type data searcher with a cache invalidation event. This can be useful for notifying the rest of the TypeData system that
            new plugins has been found in this cache. 
            </summary>
        </member>
        <member name="E:OpenTap.ITypeDataSearcherCacheInvalidated.CacheInvalidated">
            <summary>  Should be invoked when the available type data for a given type data searcher has changed. </summary>
        </member>
        <member name="T:OpenTap.ITypeDataSource">
            <summary>  Specifies that an object is the source of types. </summary>
        </member>
        <member name="P:OpenTap.ITypeDataSource.Name">
            <summary> The name of this assembly data source. Usually the same as the location name without extension.</summary>
        </member>
        <member name="P:OpenTap.ITypeDataSource.Location">
            <summary> The location of the types. This can be a file location, URL or null. </summary>
        </member>
        <member name="P:OpenTap.ITypeDataSource.Types">
            <summary> The types which this type data source provides. </summary>
        </member>
        <member name="P:OpenTap.ITypeDataSource.Attributes">
            <summary> Attributes associated with this typed data source.</summary>
        </member>
        <member name="P:OpenTap.ITypeDataSource.References">
            <summary> Which other type data sources this type data source references. </summary>
        </member>
        <member name="P:OpenTap.ITypeDataSource.Version">
            <summary> The version of the type data source.</summary>
        </member>
        <member name="T:OpenTap.ITypeDataSourceProvider">
            <summary> Used for a ITypeDataSearcher to identify a type as something that comes from it. </summary>
        </member>
        <member name="M:OpenTap.ITypeDataSourceProvider.GetSource(OpenTap.ITypeData)">
            <summary>
            Gets the ITypeDataSource corresponding to a type data if this ITypeDataSourceProvider supports it. Otherwise it returns null.
            </summary>
            <param name="typeData"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.NullTypeData">
            <summary>  A type data representing null values. </summary>
        </member>
        <member name="T:OpenTap.PluginOrderAttribute">
            <summary>
            Determines the order of plugin activation related to other plugins.
            </summary>
        </member>
        <member name="P:OpenTap.PluginOrderAttribute.Before">
            <summary> The type marked with the PluginOrderAttribute should come before this type. </summary>
        </member>
        <member name="P:OpenTap.PluginOrderAttribute.After">
            <summary> The type marked with the PluginOrderAttribute should come after this type. </summary>
        </member>
        <member name="P:OpenTap.PluginOrderAttribute.Order">
            <summary> The type marked with the PluginOrderAttribute should be weighted by this order if everything else is the same. Sorting by smallest order first (default sort order for double) </summary>
        </member>
        <member name="M:OpenTap.PluginOrderAttribute.#ctor(System.Type,System.Type,System.Double)">
            <summary>
            Creates a new instance of this attribute. 
            </summary>
            <param name="before"> Order of this plugin is before another plugin.</param>
            <param name="after"> Order of this plugin is after another plugin.</param>
            <param name="order">Everything else being the same, use a number sort order.</param>
        </member>
        <member name="P:OpenTap.PluginOrderAttribute.Comparer">
            <summary>
            This comparer can be used for sorting a list of objects based on their plugin order attributes.
            </summary>
        </member>
        <member name="T:OpenTap.ReflectionDataExtensions">
            <summary> Helpers for work with ITypeInfo objects. </summary>
        </member>
        <member name="M:OpenTap.ReflectionDataExtensions.CreateInstance(OpenTap.ITypeData)">
            <summary>
            Creates an instance of this type using the default constructor.
            </summary>
        </member>
        <member name="M:OpenTap.ReflectionDataExtensions.DescendsTo(OpenTap.ITypeData,OpenTap.ITypeData)">
            <summary> returns true if 'type' is a descendant of 'basetype'. </summary>
            <param name="type"></param>
            <param name="basetype"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionDataExtensions.DescendsTo(OpenTap.ITypeData,System.Type)">
            <summary> returns tru if 'type' is a descendant of 'basetype'. </summary>
            <param name="type"></param>
            <param name="basetype"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionDataExtensions.HasAttribute``1(OpenTap.IReflectionData)">
            <summary>
            Returns true if a reflection ifno has an attribute of type T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mem"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionDataExtensions.GetAttribute``1(OpenTap.IReflectionData)">
            <summary> Gets the attribute of type T from mem. </summary>
            <typeparam name="T"></typeparam>
            <param name="mem"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionDataExtensions.GetAttributes``1(OpenTap.IReflectionData)">
            <summary> Gets all the attributes of type T.</summary>
            <typeparam name="T"></typeparam>
            <param name="mem"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionDataExtensions.GetDisplayAttribute(OpenTap.IReflectionData)">
            <summary> Gets the display attribute of mem. </summary>
            <param name="mem"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionDataExtensions.GetHelpLink(OpenTap.IReflectionData)">
            <summary>Gets the help link of 'member'</summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.TypeDataProviderStack">
            <summary> 
            Represents a stack of ITypeDataProvider/IStackedTypeDataProvider that is used to get TypeData for a given type. 
            The providers on this stack are called in order until a provider returuns a
            </summary>
        </member>
        <member name="M:OpenTap.TypeDataProviderStack.GetTypeData(System.Object)">
            <summary> Gets the type data from an object. </summary>
            <param name="obj">The object to get type information for.</param>
            <returns>A representation of the type of the specified object or null if no providers can handle the specified type of object.</returns>
        </member>
        <member name="M:OpenTap.TypeDataProviderStack.GetTypeData(System.String)">
            <summary> Gets the type data from an identifier. </summary>
            <param name="identifier">The identifier to get type information for.</param>
            <returns>A representation of the type specified by identifier or null if no providers can handle the specified identifier.</returns>
        </member>
        <member name="T:OpenTap.Resource">
            <summary>
            Base class for resources. Specializations include Dut, Instrument and ResultListener.
            </summary>
        </member>
        <member name="P:OpenTap.Resource.Log">
            <summary>
            Default log that the resource object can write to.  Typically used by instances and extensions of the Resource object.
            </summary>
        </member>
        <member name="M:OpenTap.Resource.#ctor">
            <summary>
            Instantiate a new instance of <see cref="T:OpenTap.Resource">Resource</see> class and creates logging source.
            </summary>
        </member>
        <member name="P:OpenTap.Resource.Name">
            <summary>
            A short name displayed in the user interface where space is limited.
            </summary>
        </member>
        <member name="M:OpenTap.Resource.ToString">
            <summary>
            Overrides ToString() to return the Name of the resource. Can be overridden by derived classes to provider a more descriptive name. Note the overrider should include the Name in the output.
            </summary>
        </member>
        <member name="M:OpenTap.Resource.Open">
            <summary>
            When overridden in a derived class, should contain implementation to open a connection to the resource represented by this class.
            Any one time initialization should be done here as well. 
            </summary>
        </member>
        <member name="M:OpenTap.Resource.Close">
            <summary>
            When overridden in a derived class, should contain implementation to close the connection made to the resource represented by this class.
            </summary>
        </member>
        <member name="E:OpenTap.Resource.Activity">
            <summary>
            Invoked on activity.
            </summary>
        </member>
        <member name="M:OpenTap.Resource.OnActivity">
            <summary>
            Triggers the ActivityStateChanged event.
            </summary>
        </member>
        <member name="P:OpenTap.Resource.IsConnected">
            <summary>
            Indicates whether this resource is currently connected.
            This value should be set by Open() and Close().
            </summary>
        </member>
        <member name="T:OpenTap.MetaDataAttribute">
            <summary>
            Indicates that a property contains metadata which may be saved into results.
            </summary>
            <remarks>
            ResultListeners can use this attribute to determine whether to save a property.
            </remarks>
        </member>
        <member name="T:OpenTap.MetaDataAttribute.MetaDataParameter">
            <summary>
            Contains metadata for one property.
            </summary>
        </member>
        <member name="F:OpenTap.MetaDataAttribute.MetaDataParameter.Name">
            <summary>
            Metadata name. Always property name.
            </summary>
        </member>
        <member name="F:OpenTap.MetaDataAttribute.MetaDataParameter.Value">
            <summary>
            Metadata value. Property value.
            </summary>
        </member>
        <member name="M:OpenTap.MetaDataAttribute.MetaDataParameter.#ctor(System.String,System.Object)">
            <summary>Constructor for MetaDataParameter.</summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenTap.MetaDataAttribute.#ctor(System.Boolean,System.String)">
            <summary> Constructor for MetaDataAttribute. </summary>
            <param name="promptUser">The options for use with MetaData.</param>
            <param name="macroName">The text for use as macroname if the Macro option is selected.</param>
        </member>
        <member name="P:OpenTap.MetaDataAttribute.PromptUser">
            <summary> Which options are enabled for this attribute. </summary>
        </member>
        <member name="P:OpenTap.MetaDataAttribute.MacroName">
            <summary> Name of the macro. </summary>
        </member>
        <member name="P:OpenTap.MetaDataAttribute.Frozen">
            <summary> These properties does not change during test plan run. </summary>
        </member>
        <member name="P:OpenTap.MetaDataAttribute.Group">
            <summary> The group of this metadata. Generally this does not need to be set.
            Common values for this is "Plan", "Step", "DUT". </summary>
        </member>
        <member name="P:OpenTap.MetaDataAttribute.Name">
            <summary> The name of this metadata. Mostly this can be set to null to inherit Display Name.</summary>
        </member>
        <member name="M:OpenTap.MetaDataAttribute.GetMetaDataParameters(System.Object)">
            <summary>
            Gets the name and value for each metadata property in this object that is not null.
            </summary>
            <returns>Name and value for each metadata property in this
            object that is not null as a MetaDataParameter object.</returns>
        </member>
        <member name="T:OpenTap.ResourceNode">
            <summary>
            This class represents a resource in a dependency tree, and contains lists of the resources it depends on.
            </summary>
        </member>
        <member name="P:OpenTap.ResourceNode.Resource">
            <summary>
            The resource this node represents.
            </summary>
        </member>
        <member name="P:OpenTap.ResourceNode.Depender">
            <summary> The property that references this resource. </summary>
        </member>
        <member name="F:OpenTap.ResourceNode.WeakDependencies">
            <summary>
            The resources that this node depends on. These are marked with <see cref="T:OpenTap.ResourceOpenAttribute"/>.
            </summary>
        </member>
        <member name="F:OpenTap.ResourceNode.StrongDependencies">
            <summary>
            The resources that this node depends on. These will be opened before this nodes resource.
            </summary>
        </member>
        <member name="P:OpenTap.ResourceNode.References">
            <summary>
            TestSteps (or other IResources) that uses this resource. These are the reason this resources needs to be opened when running a TestPlan.
            </summary>
        </member>
        <member name="M:OpenTap.ResourceDependencyAnalyzer.GetAllResources(System.Object[],System.Boolean@)">
            <summary>
            Finds all IResource properties on a list of references. The references can be any class derived from ITapPlugin, such as ITestStep or IResource.
            If a reference supplied in the <paramref name="references"/> list is a IResource itself it will be added to the resulting list.
            </summary>
        </member>
        <member name="T:OpenTap.ResourceOpenBehavior">
            <summary>
            Indicates how a IResource property should be handled when being opened or closed.
            </summary>
        </member>
        <member name="F:OpenTap.ResourceOpenBehavior.Before">
            <summary>
            The resources pointed to by this property will be opened in sequence, so any referenced resources are open before Open() and until after Close().
            </summary>
            <remarks>This is the default behavior</remarks>
        </member>
        <member name="F:OpenTap.ResourceOpenBehavior.InParallel">
            <summary>
            Indicates that a resource property on a resource can be opened in parallel with the resource itself.
            </summary>
        </member>
        <member name="F:OpenTap.ResourceOpenBehavior.Ignore">
            <summary>
            Do not try to open the resource referenced by this property.
            </summary>
        </member>
        <member name="T:OpenTap.ResourceOpenAttribute">
            <summary>
            Indicates how a IResource property should be handled when being opened or closed.
            By default the resources will be opened in sequence, so any referenced resources are open before Open() and until after Close().
            </summary>
        </member>
        <member name="F:OpenTap.ResourceOpenAttribute.Behavior">
            <summary>
            Behavior of how the resource should be handled.
            </summary>
        </member>
        <member name="M:OpenTap.ResourceOpenAttribute.#ctor(OpenTap.ResourceOpenBehavior)">
            <summary>
            Creates a new ResourceOpen attribute for a resource property.
            </summary>
            <param name="behavior"></param>
        </member>
        <member name="T:OpenTap.TestPlanExecutionStage">
            <summary>
            This indicates what stage a testplan execution is at.
            </summary>
        </member>
        <member name="F:OpenTap.TestPlanExecutionStage.Open">
            <summary>
            Indicates that a testplan is being opened.
            </summary>
        </member>
        <member name="F:OpenTap.TestPlanExecutionStage.Execute">
            <summary>
            Indicates that a testplan is starting to execute.
            </summary>
            <remarks>Implies that the testplan already is open.</remarks>
        </member>
        <member name="F:OpenTap.TestPlanExecutionStage.PrePlanRun">
            <summary>
            Indicates that a teststep is about to run it's PrePlanRun.
            </summary>
        </member>
        <member name="F:OpenTap.TestPlanExecutionStage.Run">
            <summary>
            Indicates that a teststep is about to be run.
            </summary>
        </member>
        <member name="F:OpenTap.TestPlanExecutionStage.PostPlanRun">
            <summary>
            Indicates that a teststep is about to run it's PostPlanRun.
            </summary>
        </member>
        <member name="T:OpenTap.IResourceManager">
            <summary>
            A resource manager implements this interface to be able to control how resources are opened and closed during a testplan execution.
            </summary>
        </member>
        <member name="E:OpenTap.IResourceManager.ResourceOpened">
            <summary>
            This event is triggered when a resource is opened. The event may block in which case the resource will remain open for the entire call.
            </summary>
        </member>
        <member name="P:OpenTap.IResourceManager.Resources">
            <summary>
            Get a snapshot of all currently opened resources.
            </summary>
        </member>
        <member name="P:OpenTap.IResourceManager.StaticResources">
            <summary>
            Sets the resources that should always be opened when the testplan is.
            </summary>
        </member>
        <member name="P:OpenTap.IResourceManager.EnabledSteps">
            <summary>
            This property should be set to all teststeps that are enabled to be run.
            </summary>
        </member>
        <member name="M:OpenTap.IResourceManager.WaitUntilAllResourcesOpened(System.Threading.CancellationToken)">
            <summary>
            Waits for all the resources that have been signalled to open to be opened.
            </summary>
            <param name="cancellationToken">Used to cancel the wait early.</param>
        </member>
        <member name="M:OpenTap.IResourceManager.WaitUntilResourcesOpened(System.Threading.CancellationToken,OpenTap.IResource[])">
            <summary>
            Waits for the specific resources to be open.
            </summary>
            <param name="cancellationToken">Used to cancel the wait early.</param>
            <param name="targets"></param>
        </member>
        <member name="M:OpenTap.IResourceManager.BeginStep(OpenTap.TestPlanRun,OpenTap.ITestStepParent,OpenTap.TestPlanExecutionStage,System.Threading.CancellationToken)">
            <summary>
            Signals that an action is beginning.
            </summary>
            <param name="planRun">The planrun for the currently executing testplan.</param>
            <param name="item">The item affected by the current action. This can be either a testplan or a teststep.</param>
            <param name="stage">The stage that is beginning.</param>
            <param name="cancellationToken">Used to cancel the step early.</param>
        </member>
        <member name="M:OpenTap.IResourceManager.EndStep(OpenTap.ITestStepParent,OpenTap.TestPlanExecutionStage)">
            <summary>
            Signals that an action has completed.
            </summary>
            <param name="item">The item affected by the current action. This can be either a testplan or a teststep.</param>
            <param name="stage">The stage that was just completed.</param>
        </member>
        <member name="T:OpenTap.ResourceManagerUtils">
            <summary>
            Utility functions shared by <see cref="T:OpenTap.ResourceTaskManager"/> and <see cref="T:OpenTap.LazyResourceManager"/>.
            </summary>
        </member>
        <member name="M:OpenTap.ResourceManagerUtils.GetResourceNodes(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Gets ResourceNodes for all resources. This includes the ones from <see cref="P:OpenTap.IResourceManager.EnabledSteps"/> and  <see cref="P:OpenTap.IResourceManager.StaticResources"/>.
            </summary>
        </member>
        <member name="T:OpenTap.ResourceTaskManager">
            <summary>
            Manages the asynchronous opening and closing of <see cref="T:OpenTap.Resource"/>s in separate threads.
            Resources are opened and closed in order depending on dependencies between them.
            </summary>
        </member>
        <member name="M:OpenTap.ResourceTaskManager.ToString">
            <summary> Prints a friendly name. </summary>
            <returns></returns>
        </member>
        <member name="E:OpenTap.ResourceTaskManager.ResourceOpened">
            <summary>
            This event is triggered when a resource is opened. The event may block in which case the resource will remain open for the entire call.
            </summary>
        </member>
        <member name="M:OpenTap.ResourceTaskManager.#ctor">
            <summary>
            Instantiates a new ResourceOpenTaskManager.
            </summary>
        </member>
        <member name="M:OpenTap.ResourceTaskManager.WaitUntilResourcesOpened(System.Threading.CancellationToken,OpenTap.IResource[])">
            <summary> Waits for a specific resource to be open. </summary>
            <param name="cancellationToken">Used to cancel the wait early.</param>
            <param name="targets">The resources that we wait to be opened.</param>
        </member>
        <member name="M:OpenTap.ResourceTaskManager.WaitUntilAllResourcesOpened(System.Threading.CancellationToken)">
            <summary>
            Waits for all the resources to be opened.
            </summary>
            <param name="cancellationToken">Used to cancel the wait early</param>
        </member>
        <member name="P:OpenTap.ResourceTaskManager.Resources">
            <summary>
            Get a snapshot of all currently opened resources.
            </summary>
        </member>
        <member name="P:OpenTap.ResourceTaskManager.StaticResources">
            <summary>
            Sets the resources that should always be opened when the testplan is.
            </summary>
        </member>
        <member name="P:OpenTap.ResourceTaskManager.EnabledSteps">
            <summary>
            This property should be set to all test steps that are enabled to be run.
            </summary>
        </member>
        <member name="M:OpenTap.ResourceTaskManager.CloseAllResources">
            <summary>
            Blocks the thread while closing all resources in parallel.
            </summary>
        </member>
        <member name="M:OpenTap.ResourceTaskManager.BeginStep(OpenTap.TestPlanRun,OpenTap.ITestStepParent,OpenTap.TestPlanExecutionStage,System.Threading.CancellationToken)">
            <summary>
            Signals that an action is beginning.
            </summary>
            <param name="planRun">The planrun for the currently executing testplan.</param>
            <param name="item">The item affected by the current action. This can be either a testplan or a teststep.</param>
            <param name="stage">The stage that is beginning.</param>
            <param name="cancellationToken">Used to cancel the step early.</param>
        </member>
        <member name="M:OpenTap.ResourceTaskManager.EndStep(OpenTap.ITestStepParent,OpenTap.TestPlanExecutionStage)">
            <summary>
            Signals that an action has completed.
            </summary>
            <param name="item">The item affected by the current action. This can be either a testplan or a teststep.</param>
            <param name="stage">The stage that was just completed.</param>
        </member>
        <member name="T:OpenTap.LazyResourceManager">
            <summary>
            Opens resources in a lazy way only before teststeps or global plan resources actually need them.
            </summary>
        </member>
        <member name="M:OpenTap.LazyResourceManager.ToString">
            <summary> Prints a friendly name. </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.LazyResourceManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenTap.LazyResourceManager.EnabledSteps">
            <summary>
            This property should be set to all teststeps that are enabled to be run.
            </summary>
        </member>
        <member name="E:OpenTap.LazyResourceManager.ResourceOpened">
            <summary>
            This event is triggered when a resource is opened. The event may block in which case the resource will remain open for the entire call.
            </summary>
        </member>
        <member name="P:OpenTap.LazyResourceManager.Resources">
            <summary>
            Get a snapshot of all currently opened resources.
            </summary>
        </member>
        <member name="P:OpenTap.LazyResourceManager.StaticResources">
            <summary>
            Sets the resources that should always be opened when the testplan is.
            </summary>
        </member>
        <member name="M:OpenTap.LazyResourceManager.BeginStep(OpenTap.TestPlanRun,OpenTap.ITestStepParent,OpenTap.TestPlanExecutionStage,System.Threading.CancellationToken)">
            <summary>
            Signals that an action is beginning.
            </summary>
            <param name="planRun">The planrun for the currently executing testplan.</param>
            <param name="item">The item affected by the current action. This can be either a testplan or a teststep.</param>
            <param name="stage">The stage that is beginning.</param>
            <param name="cancellationToken">Used to cancel the step early.</param>
        </member>
        <member name="M:OpenTap.LazyResourceManager.EndStep(OpenTap.ITestStepParent,OpenTap.TestPlanExecutionStage)">
            <summary>
            Signals that an action has completed.
            </summary>
            <param name="item">The item affected by the current action. This can be either a testplan or a teststep.</param>
            <param name="stage">The stage that was just completed.</param>
        </member>
        <member name="M:OpenTap.LazyResourceManager.WaitUntilAllResourcesOpened(System.Threading.CancellationToken)">
            <summary>
            Waits for all the resources that have been signalled to open to be opened.
            </summary>
            <param name="cancellationToken">Used to cancel the wait early.</param>
        </member>
        <member name="M:OpenTap.LazyResourceManager.WaitUntilResourcesOpened(System.Threading.CancellationToken,OpenTap.IResource[])">
            <summary>
            Waits for the specific resources to be open.
            </summary>
            <param name="cancellationToken">Used to cancel the wait early.</param>
            <param name="targets"></param>
        </member>
        <member name="T:OpenTap.ResultListener">
            <summary>
            Abstract class forming the basis for all ResultListeners.
            </summary>
        </member>
        <member name="P:OpenTap.ResultListener.IsEnabled">
            <summary> Gets or sets if this resource is enabled.</summary>
        </member>
        <member name="M:OpenTap.ResultListener.onEnabledChanged(System.Boolean,System.Boolean)">
            <summary> Called when IsEnabled is changed. </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:OpenTap.ResultListener.OnTestPlanRunStart(OpenTap.TestPlanRun)">
            <summary>
            Called when a test plan starts.
            </summary>
            <param name="planRun">Test plan run parameters.</param>
        </member>
        <member name="M:OpenTap.ResultListener.OnTestPlanRunCompleted(OpenTap.TestPlanRun,System.IO.Stream)">
            <summary>
            Called when test plan finishes. At this point no more results will be sent to the result listener from the test plan run.  
            </summary>
            <param name="planRun">Test plan run parameters.</param>
            <param name="logStream">The log file from the test plan run as a stream.</param>
        </member>
        <member name="M:OpenTap.ResultListener.OnTestStepRunStart(OpenTap.TestStepRun)">
            <summary>
            Called just before a test step is started.
            </summary>
            <param name="stepRun"></param>
        </member>
        <member name="M:OpenTap.ResultListener.OnTestStepRunCompleted(OpenTap.TestStepRun)">
            <summary>
            Called when a test step run is completed.
            Result might still be propagated to the result listener after this event.
            </summary>
            <param name="stepRun">Step run parameters.</param>
        </member>
        <member name="M:OpenTap.ResultListener.OnResultPublished(System.Guid,OpenTap.ResultTable)">
            <summary>
            Called when a result is received.
            </summary>
            <param name="stepRunId"> Step run ID.</param>
            <param name="result">Result structure.</param>
        </member>
        <member name="T:OpenTap.ResultListenerIgnoreAttribute">
            <summary>
            Instructs the ResultListener not to save the 
            public property value as metadata for TestStep results.
            </summary>
        </member>
        <member name="T:OpenTap.ResultParameter">
            <summary>
            Represents a result parameter.
            </summary>
        </member>
        <member name="F:OpenTap.ResultParameter.Name">
            <summary>
            Name of parameter.
            </summary>
        </member>
        <member name="F:OpenTap.ResultParameter.Group">
            <summary>
            Group name of the parameter.
            </summary>
        </member>
        <member name="F:OpenTap.ResultParameter.Value">
            <summary>
            Value of the parameter. If null, the value is the string "NULL".  
            </summary>
        </member>
        <member name="F:OpenTap.ResultParameter.ParentLevel">
            <summary>
            Indicates the parameter came from a test step in a parent level above the initial object.  
            </summary>
        </member>
        <member name="P:OpenTap.ResultParameter.IsMetaData">
            <summary> Gets if this result is metadata. </summary>
        </member>
        <member name="F:OpenTap.ResultParameter.MacroName">
            <summary> null or the macro name representation of the ResultParameter. This will make it possible to insert the parameter value into a string. <see cref="T:OpenTap.MacroString"/></summary>
        </member>
        <member name="M:OpenTap.ResultParameter.#ctor(System.String,System.IConvertible)">
            <summary> Creates a result parameter with default group.</summary>
        </member>
        <member name="M:OpenTap.ResultParameter.#ctor(System.String,System.String,System.IConvertible,OpenTap.MetaDataAttribute,System.Int32)">
            <summary>
            Initializes a new instance of ResultParameter.
            </summary>
        </member>
        <member name="M:OpenTap.ResultParameter.#ctor(System.String,System.String,System.IConvertible,System.String)">
            <summary>  Creates a new ResultParameter. </summary>
            <param name="group"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="macroName"></param>
        </member>
        <member name="M:OpenTap.ResultParameter.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ResultParameter.GetHashCode">
            <summary>
            Calculates a hash code for the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.ResultParameters">
            <summary>
            A collection of parameters related to the results.
            </summary>
        </member>
        <member name="P:OpenTap.ResultParameters.Item(System.Int32)">
            <summary>
            Gets the parameter with the given index.
            </summary>
        </member>
        <member name="M:OpenTap.ResultParameters.Find(System.String)">
            <summary> Gets a ResultParameter by name. </summary>
        </member>
        <member name="M:OpenTap.ResultParameters.Find(System.String,System.String)">
            <summary> Gets a ResultParameter by name. </summary>
        </member>
        <member name="M:OpenTap.ResultParameters.Find(System.ValueTuple{System.String,System.String})">
            <summary> Gets a ResultParameter by name. </summary>
        </member>
        <member name="P:OpenTap.ResultParameters.Item(System.String,System.String)">
            <summary> Gets the parameter with the key name. </summary>
        </member>
        <member name="P:OpenTap.ResultParameters.Item(System.String)">
            <summary> Gets a named parameter specifying only name. This assumes that the empty group is being used. So it is the same as calling [name, ""].. </summary>
        </member>
        <member name="M:OpenTap.ResultParameters.GetMetadataFromObject(System.Object)">
            <summary>
            Returns a <see cref="T:OpenTap.ResultParameters"/> list with one entry for every property on the inputted 
            object decorated with <see cref="T:OpenTap.MetaDataAttribute"/>.
            </summary>
        </member>
        <member name="M:OpenTap.ResultParameters.GetComponentSettingsMetadata(System.Boolean)">
            <summary>
            Returns a <see cref="T:OpenTap.ResultParameters"/> list with one entry for every property on every 
            <see cref="T:OpenTap.ComponentSettings"/> implementation decorated with <see cref="T:OpenTap.MetaDataAttribute"/>. 
            </summary>
        </member>
        <member name="M:OpenTap.ResultParameters.GetComponentSettingsMetadataLazy(System.Boolean)">
            <summary>
            Lazily pull result parameters from component settings. Reduces the number of component settings XML that needs to be deserialized.
            </summary>
            <param name="includeObjects">If objects in ComponentSettingsLists should be included.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ResultParameters.GetParams(System.String,System.String,System.Object,OpenTap.MetaDataAttribute,System.Collections.Generic.ICollection{OpenTap.ResultParameter})">
            <summary>
            Adds a new parameter to the resultParams list. if the parameter value is of the type Resource, every parameter from it is added, but not the origin object.
            </summary>
        </member>
        <member name="M:OpenTap.ResultParameters.GetParams(OpenTap.ITestStep)">
            <summary>
            Returns a <see cref="T:OpenTap.ResultParameters"/> list with one entry for every setting of the inputted 
            TestStep.
            </summary>
        </member>
        <member name="M:OpenTap.ResultParameters.#ctor">
            <summary>
            Initializes a new instance of the ResultParameters class.
            </summary>
        </member>
        <member name="M:OpenTap.ResultParameters.#ctor(System.Collections.Generic.IEnumerable{OpenTap.ResultParameter})">
            <summary>
            Initializes a new instance of the ResultParameters class.
            </summary>
        </member>
        <member name="M:OpenTap.ResultParameters.ToDictionary">
            <summary>
            Returns a dictionary containing all the values in this list indexed by their <see cref="F:OpenTap.ResultParameter.Name"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenTap.ResultParameters.Count">
            <summary>
            Returns the number of result parameters.
            </summary>
        </member>
        <member name="M:OpenTap.ResultParameters.Add(OpenTap.ResultParameter)">
            <summary> Adds a new element to the parameters. (synchronized). </summary>
        </member>
        <member name="M:OpenTap.ResultParameters.AddRange(System.Collections.Generic.IEnumerable{OpenTap.ResultParameter})">
            <summary>
            Adds a range of result parameters (synchronized).
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:OpenTap.ResultParameters.Clone">
            <summary> Copies all the data inside a ResultParameters instance. </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ResultParameters.Add(System.String,System.String,System.IConvertible,OpenTap.MetaDataAttribute)">
            <summary> Adds a new result parameter. </summary>
        </member>
        <member name="T:OpenTap.ResultObjectTypes">
            <summary> Result object types existing in the OpenTAP name space. </summary>
        </member>
        <member name="F:OpenTap.ResultObjectTypes.ResultVector">
            <summary> ResultTable result type.</summary>
        </member>
        <member name="F:OpenTap.ResultObjectTypes.ResultColumn">
            <summary> ResultColumn result type.</summary>
        </member>
        <member name="T:OpenTap.ResultColumn">
            <summary>
            A class to store a column of data for a <see cref="T:OpenTap.ResultTable"/>.
            </summary>
        </member>
        <member name="P:OpenTap.ResultColumn.Name">
            <summary>
            The name of the column.
            </summary>
        </member>
        <member name="P:OpenTap.ResultColumn.Data">
            <summary>
            The data in the column.
            </summary>
        </member>
        <member name="P:OpenTap.ResultColumn.TypeCode">
            <summary>
            The TypeCode of data in the column.
            </summary>
        </member>
        <member name="P:OpenTap.ResultColumn.ObjectType">
            <summary>
            String describing the column.
            </summary>
        </member>
        <member name="M:OpenTap.ResultColumn.GetValue``1(System.Int32)">
            <summary>
            Helper to access a strongly typed value in the <see cref="P:OpenTap.ResultColumn.Data"/> array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Index">Index in the array.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ResultColumn.#ctor(System.String,System.Array)">
            <summary>
            Creates a new populated result column.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="data">The data of the column.</param>
        </member>
        <member name="M:OpenTap.ResultColumn.#ctor(System.String,System.Array,OpenTap.IParameter[])">
            <summary> Creates a new result column with parameters attached.  </summary>
        </member>
        <member name="P:OpenTap.ResultColumn.Parent">
            <summary>
            The parent object of this column. Usually a Result Table. This value will get assigned during ResultProxy.Publish.
            </summary>
        </member>
        <member name="M:OpenTap.ResultColumn.OpenTap#IData#GetID">
            <summary> Unused. </summary>
        </member>
        <member name="P:OpenTap.ResultColumn.Parameters">
            <summary> The parameters attached to this column. </summary>
        </member>
        <member name="M:OpenTap.ResultColumn.AddParameters(OpenTap.IParameter[])">
            <summary>  Create a result column clone with additional parameters. </summary>
        </member>
        <member name="T:OpenTap.ResultTable">
            <summary>
            A result table containing rows of results with matching names, column name, and types. 
            </summary>
        </member>
        <member name="P:OpenTap.ResultTable.Name">
            <summary>
            The name of the results.
            </summary>
        </member>
        <member name="P:OpenTap.ResultTable.Columns">
            <summary> An array containing the result columns. </summary>
        </member>
        <member name="P:OpenTap.ResultTable.Rows">
            <summary>
            Indicates how many rows of results this table contains.
            </summary>
        </member>
        <member name="P:OpenTap.ResultTable.Parent">
            <summary>
            The parent of this object.
            </summary>
        </member>
        <member name="P:OpenTap.ResultTable.Parameters">
            <summary>
            Parameters attached to this Result Table.
            Note, test step parameter are often attached in the result listener and does not need to be added here.
            </summary>
        </member>
        <member name="M:OpenTap.ResultTable.#ctor">
            <summary>
            Creates an empty results table.
            </summary>
        </member>
        <member name="M:OpenTap.ResultTable.#ctor(System.String,OpenTap.ResultColumn[])">
            <summary>
            Creates a new result table.
            </summary>
            <param name="name">The name of the result table.</param>
            <param name="resultColumns">The columns of the table.</param>
        </member>
        <member name="M:OpenTap.ResultTable.#ctor(System.String,OpenTap.ResultColumn[],OpenTap.IParameter[])">
            <summary>
            Creates a new Result Table with a name, result columns and parameters.
            </summary>
        </member>
        <member name="T:OpenTap.IResultSource">
            <summary>
            Interface that the TestStep can access through the Results property.
            </summary>
        </member>
        <member name="M:OpenTap.IResultSource.Wait">
            <summary>
            Waits for the propagation of results from all Proxies to the Listeners. Normally this is not necessary. 
            However, if a step needs to change a property after it has written results, this method makes sure the ResultListeners record the previous/correct value before changing it.
            </summary>
        </member>
        <member name="M:OpenTap.IResultSource.Defer(System.Action)">
            <summary>
            Defer an action from the current teststep run.
            This action will be called as soon as possible, and block the execution for any parent steps.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:OpenTap.IResultSource.Finally(System.Action{System.Threading.Tasks.Task})">
            <summary>
            Run an action as the final step after the last deferred action.
            This should not be used while the associated TestStep is running.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:OpenTap.IResultSource.Publish(System.String,System.Collections.Generic.List{System.String},System.IConvertible[])">
            <summary>
            Stores a result. These results will be propagated to the ResultStore after the TestStep completes.
            </summary>
            <param name="name">Name of the result.</param>
            <param name="columnNames">Titles of the columns.</param>
            <param name="results">The values of the results to store.</param>
        </member>
        <member name="M:OpenTap.IResultSource.PublishTable(System.String,System.Collections.Generic.List{System.String},System.Array[])">
            <summary>
            The fastest way to store a result. These results will be propagated to the ResultStore after the TestStep completes.
            </summary>
            <param name="name">Name of the result.</param>
            <param name="columnNames">Titles of the columns.</param>
            <param name="results">The columns of the results to store.</param>
            <remarks>
            This is the fastest way to store a large number of results.
            </remarks>
        </member>
        <member name="T:OpenTap.ResultSource">
            <summary>
            Temporarily holds results from a TestStep, before they are propagated to the ResultListener by the TestPlan. See <see cref="P:OpenTap.TestStep.Results"/>
            </summary>
        </member>
        <member name="F:OpenTap.ResultSource.log">
            <summary>  Logging source for this class. </summary>
        </member>
        <member name="F:OpenTap.ResultSource.planRun">
            <summary>
            The current plan run.
            </summary>
        </member>
        <member name="F:OpenTap.ResultSource.stepRun">
            <summary>
            The TestStepRun for this object.
            </summary>
        </member>
        <member name="M:OpenTap.ResultSource.AddParameter(OpenTap.ResultParameter)">
            <summary>
            Adds an additional parameter to this TestStep run.
            </summary>
            <param name="param">Parameter to add.</param>
        </member>
        <member name="M:OpenTap.ResultSource.#ctor(OpenTap.TestStepRun,OpenTap.TestPlanRun)">
            <summary>
            Creates a new ResultProxy. Done for each test step run.
            </summary>
            <param name="stepRun">TestStepRun that this result proxy is proxy for.</param>
            <param name="planRun">TestPlanRun that this result proxy is proxy for.</param>
        </member>
        <member name="M:OpenTap.ResultSource.Wait">
            <summary>
            Waits for the propagation of results from all Proxies to the Listeners. Normally this is not necessary. 
            However, if a step needs to change a property after it has written results, this method makes sure the ResultListeners record the previous/correct value before changing it.  	 
            </summary>
        </member>
        <member name="M:OpenTap.ResultSource.Defer(System.Action)">
            <summary>
            Defer an action from the current test step run. This means the action will be executed some time after
            the current run. 
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:OpenTap.ResultSource.OpenTap#IResultSource#Finally(System.Action{System.Threading.Tasks.Task})">
            <summary>
            Run an action as the final step after the last deferred action
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:OpenTap.ResultSource.Publish``1(``0)">
            <summary>
            Stores an object as a result.  These results will be propagated to the ResultStore after the TestStep completes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result">The result whose properties should be stored.</param>
        </member>
        <member name="M:OpenTap.ResultSource.Publish(OpenTap.ResultTable)">
            <summary> Publishes a result table. </summary>
        </member>
        <member name="M:OpenTap.ResultSource.Publish``1(System.String,``0)">
            <summary>
            Stores an object as a result.  These results will be propagated to the ResultStore after the TestStep completes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name of the result.</param>
            <param name="result">The result whose properties should be stored.</param>
        </member>
        <member name="M:OpenTap.ResultSource.Publish(System.String,System.Collections.Generic.List{System.String},System.IConvertible[])">
            <summary>
            Stores a result. These results will be propagated to the ResultStore after the TestStep completes.
            </summary>
            <param name="name">Name of the result.</param>
            <param name="columnNames">Titles of the columns.</param>
            <param name="results">The values of the results to store.</param>
        </member>
        <member name="M:OpenTap.ResultSource.PublishTable(System.String,System.Collections.Generic.List{System.String},System.Array[])">
            <summary>
            The fastest way to store a result. These results will be propagated to the ResultStore after the TestStep completes.
            </summary>
            <param name="name">Name of the result.</param>
            <param name="columnNames">Titles of the columns.</param>
            <param name="results">The columns of the results to store.</param>
            <remarks>
            This is the fastest way to store a large number of results.
            </remarks>
        </member>
        <member name="M:OpenTap.ResultSource.PublishTable(OpenTap.ResultTable)">
            <summary> Publishes a result table. </summary>
        </member>
        <member name="M:OpenTap.ResultSource.PublishResultTableInvokable.CreateOptimizedTable(OpenTap.WorkQueue)">
             <summary>
             If possible, introspect the current work queue and collapse result table propagations into one.
             This can give a huge performance boost for many use cases, but mostly when PublishTable is not used.
            
             Note that this has to be done in the result listener thread - since each may have different number of elements queued
             depending on the speed of the result listener. Slow ones like internet based ones will have more items queued.
             </summary>
             <returns>An optimized table or the original one if it is not possible to optimize.</returns>
        </member>
        <member name="T:OpenTap.ResultSettings">
            <summary>
            A class that collects and manages the different <see cref="T:OpenTap.ResultListener"/> objects.
            </summary>
        </member>
        <member name="M:OpenTap.ResultTableOptimizer.CanMerge(OpenTap.ResultTable,OpenTap.ResultTable)">
            <summary>
            Tables can be merged if they have the same name, and the same count, types and names of columns.
            </summary>
        </member>
        <member name="M:OpenTap.ResultTableOptimizer.MergeTables(System.Collections.Generic.IReadOnlyList{OpenTap.ResultTable})">
            <summary> Merges a set of result tables. This assumes that CanMerge has been called and returned true for all elements in the list. </summary>
        </member>
        <member name="T:OpenTap.Scpi">
            <summary>
            Utility class for SCPI communication.
            </summary>
        </member>
        <member name="T:OpenTap.Scpi.ScpiEnum">
            <summary>
            Enum converter for converting Enums to SCPI strings. use the GetEnumConv to get a converter.
            </summary>
        </member>
        <member name="M:OpenTap.Scpi.ScpiEnum.GetEnumConv(System.Type)">
            <summary> Get an enum converter for a specific enum type. </summary>
            <param name="t">Must be a enum type!</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Scpi.ScpiEnum.FromString(System.String)">
            <summary> String to Enum. </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Scpi.ScpiEnum.ToString(System.Enum)">
            <summary>
            Enum to string.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Scpi.Format(System.String,System.Object[])">
            <summary>
            Similar to <see cref="M:System.String.Format(System.String,System.Object[])"/>, but makes args SCPI compatible. Bools are ON/OFF formatted. Enum values uses <see cref="P:OpenTap.ScpiAttribute.ScpiString"/>.
            Arrays will have their elements formatted and separated by commas if available; if not they are converted using <see cref="M:System.String.ToString"/>.
            </summary>
            <param name="command"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Scpi.IsScpiWhitespace(System.Char)">
            <summary>
            Extension method that checks whether a given char is a IEEE488.2 whitespace (7.4.1.2).
            </summary>
        </member>
        <member name="M:OpenTap.Scpi.SplitScpiArray(System.String,System.Boolean)">
            <summary>
            Splits a string into a list of valid separated SCPI response data strings. Needed because String.Split(resp, ',') is not tolerant to " characters.
            </summary>
        </member>
        <member name="M:OpenTap.Scpi.Parse(System.String,System.Type)">
            <summary>
            Overloaded.  Parses the result of a SCPI query back to T, with special parsing for enums, bools and arrays. Bools support 1/0 and ON/OFF formats. 
            If Enums are tagged with <see cref="T:OpenTap.ScpiAttribute"/>, <see cref="P:OpenTap.ScpiAttribute.ScpiString"/> will be used instead of <see cref="M:System.String.ToString"/> .  
            </summary>
            <param name="scpiString"></param>
            <param name="T"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Scpi.Parse``1(System.String)">
            <summary>
            Parses the result of a SCPI query back to T. Special parsing for enums, bools and arrays. bools supports 1/0 and ON/OFF formats. 
            If Enums are tagged with <see cref="T:OpenTap.ScpiAttribute"/> <see cref="P:OpenTap.ScpiAttribute.ScpiString"/> will be used instead of <see cref="M:System.String.ToString"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="scpiString"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Scpi.getUnescapedScpi(System.Object,System.String,System.Reflection.PropertyInfo)">
            <summary>
            <see cref="M:OpenTap.Scpi.GetUnescapedScpi(System.Object,System.Reflection.PropertyInfo)"/>.
            </summary>
            <param name="src"></param>
            <param name="ScpiString"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Scpi.GetUnescapedScpi(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Parses one or more items of <see cref="P:OpenTap.ScpiAttribute.ScpiString"/> 'property', replacing '%' with the value of the property given after formatting. 
            Note that 'property' must be a property with the <see cref="T:OpenTap.ScpiAttribute"/>, and 'src' is the object containing 'property', not the value of the property. 
            If property.PropertyType is bool, then from the <see cref="P:OpenTap.ScpiAttribute.ScpiString"/> value 'A|B' A is selected if true, and B is selected if false.  
            </summary>
        </member>
        <member name="T:OpenTap.ScpiAttribute">
            <summary>
            Identifies that a property should be converted to a SCPI string.
            </summary>
        </member>
        <member name="P:OpenTap.ScpiAttribute.ScpiString">
            <summary>
            Gets or sets the SCPI string.
            </summary>
        </member>
        <member name="M:OpenTap.ScpiAttribute.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:OpenTap.ScpiAttribute"/>
            </summary>
        </member>
        <member name="T:OpenTap.ScpiInstrument">
            <summary> 
            Implements a connection to talk to any SCPI-enabled instrument.
            </summary>
        </member>
        <member name="F:OpenTap.ScpiInstrument.readStbSupported">
            <summary> Some instruments does not support reading the status byte. This is detected during Open. </summary>
        </member>
        <member name="P:OpenTap.ScpiInstrument.VisaAddress">
            <summary>
            The VISA address of the instrument that this class represents a connection to.
            </summary>
        </member>
        <member name="P:OpenTap.ScpiInstrument.IoTimeout">
            <summary>
            The timeout used by the underlying VISA driver when communicating with the instrument [ms].
            </summary>
        </member>
        <member name="P:OpenTap.ScpiInstrument.FinegrainedLock">
            <summary>
            If enabled ScpiInstrument acquires an exclusive lock when opening the instrument.
            </summary>
        </member>
        <member name="P:OpenTap.ScpiInstrument.Lock">
            <summary>
            If enabled ScpiInstrument acquires an exclusive lock when opening the instrument.
            </summary>
        </member>
        <member name="P:OpenTap.ScpiInstrument.LockRetries">
            <summary>
            Specifies how many times the SCPI instrument should retry an operation, if it was canceled by another host locking the device.
            </summary>
        </member>
        <member name="P:OpenTap.ScpiInstrument.LockHoldoff">
            <summary>
            Specifies how long the SCPI instrument should wait before it retries an operation, if it was canceled by another host locking the device.
            </summary>
        </member>
        <member name="P:OpenTap.ScpiInstrument.QueryErrorAfterCommand">
            <summary>
            When enabled, causes the instrument driver to ask the instrument SYST:ERR? after every command. Useful when debugging.
            </summary>
        </member>
        <member name="P:OpenTap.ScpiInstrument.SendClearOnConnect">
            <summary>
            When true, <see cref="M:OpenTap.ScpiInstrument.Open"/> will send VIClear() right after establishing a connection.
            </summary>
        </member>
        <member name="P:OpenTap.ScpiInstrument.VerboseLoggingEnabled">
            <summary> Gets or sets whether Verbose SCPI logging is enabled. </summary>
        </member>
        <member name="M:OpenTap.ScpiInstrument.ToString">
            <summary>
            Overrides ToString() to give more meaningful names.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenTap.ScpiInstrument.IdnString">
            <summary>
            Gets the instrument identity string. (As returned by the SCPI command *IDN?).
            </summary>
        </member>
        <member name="M:OpenTap.ScpiInstrument.#ctor">
            <summary>  Initializes a new instance of the ScpiInstrument class. </summary>
        </member>
        <member name="M:OpenTap.ScpiInstrument.#ctor(OpenTap.IScpiIO2)">
            <summary> Initialize a new instance of ScpiInstrument, specifying a IScpiIO interface to use. </summary>
            <param name="io"> An IO Implementation for doing communication. </param>
        </member>
        <member name="M:OpenTap.ScpiInstrument.SetTerminationCharacter(System.Int32)">
            <summary>
            Called by InstrumentBase.Open() before the newly opened connection is used for anything.
            Allows specializations of InstrumentBase to customize connection parameters such as
            TerminationCharacter.
            </summary>
        </member>
        <member name="M:OpenTap.ScpiInstrument.Open">
            <summary>
            Opens the connection to the Instrument. 
            Assumes Visa Address property is specified.
            </summary>
        </member>
        <member name="M:OpenTap.ScpiInstrument.Close">
            <summary>
            Closes the connection to the instrument. Assumes connection is open.
            </summary>
        </member>
        <member name="M:OpenTap.ScpiInstrument.DoClear">
            <summary>
            Clears the device SCPI buffers.
            </summary>
        </member>
        <member name="M:OpenTap.ScpiInstrument.DoReadSTB">
            <summary>
            Reads the status byte.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ScpiInstrument.ScpiQuery(System.String,System.Boolean)">
            <summary>
            Sends a SCPI query to the instrument and waits for a response.
            </summary>
            <param name="query">The SCPI query to send.</param>
            <param name="isSilent">True to suppress log messages.</param>
            <returns>The response from the instrument.</returns>
        </member>
        <member name="M:OpenTap.ScpiInstrument.ScpiQuery``1(System.String,System.Boolean)">
            <summary>
            As ScpiQuery except it will try to parse the returned string to T. See <see cref="M:OpenTap.Scpi.Parse(System.String,System.Type)"/> for details on parsing.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="isSilent">True to suppress log messages.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ScpiInstrument.ScpiQueryBlock(System.String)">
            <summary>
            Sends a IEEE Block SCPI query to the instrument and waits for a response. The response is assumed to be IEEE block data.
            </summary>
            <param name="query">The SCPI query to send.</param>
            <returns>The response from the instrument.</returns>
        </member>
        <member name="M:OpenTap.ScpiInstrument.ScpiQueryBlock``1(System.String)">
            <summary>
            Sends a IEEE Block SCPI query to the instrument and waits for a response. The response is assumed to be IEEE block data.
            </summary>
            <param name="query">The SCPI query to send.</param>
            <returns>The response from the instrument.</returns>
            <example>
            The format for data returned by the query must be configured to a type matching the type of <typeparamref name="T"/>.
            Example 1:
            <code>
            ScpiCommand("FORMat:TRACe:DATA REAL,32", true);
            var data = ScpiQueryBlock&lt;float&gt;(":TRACe:DATA? TRACE1");
            </code>
            Example 2:
            <code>
            ScpiCommand("FORMat:TRACe:DATA REAL,64", true);
            var data = ScpiQueryBlock&lt;double&gt;(":TRACe:DATA? TRACE1");
            </code>
            </example>
        </member>
        <member name="M:OpenTap.ScpiInstrument.ScpiCommand(System.String,System.Object[])">
            <summary>
            Sends a SCPI command to the instrument, but with special handling for parameters. See <see cref="M:OpenTap.Scpi.Format(System.String,System.Object[])"/> for more information.
            </summary>
            <param name="command">The command to send, including <see cref="M:OpenTap.Scpi.Format(System.String,System.Object[])"/> placement arguments.</param>
            <param name="parameters"><see cref="M:OpenTap.Scpi.Format(System.String,System.Object[])"/> arguments.</param>
            <remarks>Non-blocking.</remarks>
        </member>
        <member name="M:OpenTap.ScpiInstrument.ScpiCommand(System.String)">
            <summary>
            Sends a SCPI command to the instrument.
            </summary>
            <param name="command">The command to send.</param>
            <remarks>Non-blocking.</remarks>
        </member>
        <member name="M:OpenTap.ScpiInstrument.ScpiIEEEBlockCommand(System.String,System.Byte[])">
            <summary>
            Sends a IEEE Block SCPI command to the instrument.
            </summary>
        </member>
        <member name="M:OpenTap.ScpiInstrument.ScpiIEEEBlockCommand(System.String,System.IO.Stream,System.Int64)">
            <summary>
            Sends a IEEE Block SCPI command to the instrument with a Streaming interface for large data size.  Uses DirectIO.
            </summary>
        </member>
        <member name="M:OpenTap.ScpiInstrument.PollStatusEvent">
            <summary>
            Polls the instrument for an event.
            </summary>
            <returns></returns>
            <remarks>
            Usually used for error handling.
            </remarks>
        </member>
        <member name="F:OpenTap.ScpiInstrument.ScpiErrorsLogLevelOverrides">
            <summary>
            Specifies a dictionary that will map specific error codes to log levels other than Error (the level to which <see cref="M:OpenTap.ScpiInstrument.QueryErrors(System.Boolean,System.Int32)"/> typically logs error messages).
            </summary>
        </member>
        <member name="M:OpenTap.ScpiInstrument.queryErrors(System.Boolean,System.Int32,System.Boolean)">
            <summary>Returns all the errors on the instrument error stack. Clears the list in the same call.</summary>
            <remarks>better performance version of QueryErrors that does not use additional memory when no errors exists.</remarks>
            <param name="suppressLogMessages">Dont emit log messages.</param>
            <param name="maxErrors">The maximal number of error messages to read.</param>
            <param name="noAllocation">Dont do any allocation. The result will always be empty.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ScpiInstrument.QueryErrors(System.Boolean,System.Int32)">
            <summary>
            Returns all the errors on the instrument error stack. Clears the list in the same call.
            </summary>
            <param name="suppressLogMessages">if true the errors will not be logged.</param>
            <param name="maxErrors">The max number of errors to retrieve. Useful if instrument generates errors faster than they can be read.</param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.ScpiInstrument.ScpiError">
            <summary>
            A SCPI error.
            </summary>
        </member>
        <member name="F:OpenTap.ScpiInstrument.ScpiError.Code">
            <summary>
            Error code.
            </summary>
        </member>
        <member name="F:OpenTap.ScpiInstrument.ScpiError.Message">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="M:OpenTap.ScpiInstrument.ScpiError.ToString">
            <summary>
            Returns a string formatted the same way as the output of SYST:ERR?
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ScpiInstrument.WaitForOperationComplete(System.Int32)">
            <summary>
            Waits for a all previously executed SCPI commands to complete. 
            </summary>
            <param name="timeoutMs">Maximum time to wait, default is 2 seconds. If value is less than IoTimeout, IoTimeout will be used. </param>
        </member>
        <member name="M:OpenTap.ScpiInstrument.Reset">
            <summary>
             Aborts the currently running measurement and makes the default measurement active. 
             This gets the mode to a consistent state with all of the default couplings set.  
            </summary>
        </member>
        <member name="T:OpenTap.ScpiInstrument.ScpiSRQDelegate">
            <summary>
            A delegate that is used by the <see cref="E:OpenTap.ScpiInstrument.SRQ"/> event.
            </summary>
            <param name="sender">A reference to the <see cref="T:OpenTap.ScpiInstrument"/> that the SRQ originated from.</param>
        </member>
        <member name="E:OpenTap.ScpiInstrument.SRQ">
            <summary>
            This event is called whenever a SRQ is generated by the instrument.
            Adding a handler to this event will automatically enable SRQ transactions from the instrument when the instrument is opened/closed, or while the instrument is open.
            
            To disable SRQ transactions all handlers added must be removed.
            </summary>
        </member>
        <member name="T:OpenTap.ScpiIO">
            <summary> Implements Visa SCPI IO. </summary>
        </member>
        <member name="T:OpenTap.SemanticVersion">
            <summary>
            Version object for OpenTAP versions. Adheres to Semantic Version 2.0 formatting and behavior, see http://semver.org. 
            Supported formats:
              Major.Minor.Patch
              Major.Minor.Patch-PreRelease
              Major.Minor.Patch+BuildMetadata.
              Major.Minor.Patch-PreRelease+BuildMetadata.
            </summary>
        </member>
        <member name="F:OpenTap.SemanticVersion.Major">
            <summary>
            Major version. Incrementing this number signifies a backward incompatible change in the API.
            </summary>
        </member>
        <member name="F:OpenTap.SemanticVersion.Minor">
            <summary>
            Minor version. Incrementing this number usually signifies a backward compatible addition to the API.
            </summary>
        </member>
        <member name="F:OpenTap.SemanticVersion.Patch">
            <summary>
            Patch version. Incrementing this number signifies a change that is both backward and forward compatible.
            </summary>
        </member>
        <member name="F:OpenTap.SemanticVersion.BuildMetadata">
            <summary>
            Optional build related metadata. Usually a short git commit hash (8 chars). Ignored when determining version presedence. Only ASCII alphanumeric characters and hyphen is allowed [0-9A-Za-z-]
            </summary>
        </member>
        <member name="F:OpenTap.SemanticVersion.PreRelease">
            <summary>
            Optional pre-release version, denoted by a -. Only ASCII alphanumeric characters and hyphen is allowed [0-9A-Za-z-]. 
            A pre-release version indicates that the version is unstable and might not satisfy the intended compatibility requirements as denoted by its associated normal version.
            </summary>
        </member>
        <member name="M:OpenTap.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Creates a new SemanticVersion instance
            </summary>
            <param name="major">Major version. Incrementing this number signifies a backward incompatible change in the API.</param>
            <param name="minor">Minor version. Incrementing this number usually signifies a backward compatible addition to the API.</param>
            <param name="patch">Patch version. Incrementing this number signifies a change that is both backward and forward compatible.</param>
            <param name="preRelease">Optional pre-release version, denoted by a -. Only ASCII alphanumeric characters and hyphen is allowed [0-9A-Za-z-]. </param>
            <param name="buildMetadata">Optional build related metadata. Usually a short git commit hash (8 chars). Ignored when determining version presedence. Only ASCII alphanumeric characters and hyphen is allowed [0-9A-Za-z-]</param>
        </member>
        <member name="M:OpenTap.SemanticVersion.TryParse(System.String,OpenTap.SemanticVersion@)">
            <summary>
            Tries to parse a SemanticVersion from string. Input must strictly adhere to  http://semver.org for this method to return true.
            </summary>
            <returns>True if the string was sucessfully parsed.</returns>
        </member>
        <member name="M:OpenTap.SemanticVersion.Parse(System.String)">
            <summary>
            Parses a SemanticVersion from string. In addition to the http://semver.org format, this also supports a four value number (x.x.x.x) which will be interpreted as Major.Minor.BuildMetadata.Patch.
            The non semver format is supported to be compatible with Microsofts definition of version numbers (e.g. for .NET assemblies), see https://docs.microsoft.com/en-us/dotnet/api/system.version
            </summary>
            <exception cref="T:System.FormatException"></exception>
            <returns></returns>
        </member>
        <member name="M:OpenTap.SemanticVersion.ToString">
            <summary>
            Prints the string in version format. It should be parsable from the same string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.SemanticVersion.ToString(System.Int32)">
            <summary>
            Prints the string in version format. It should be parsable from the same string.
            </summary>
            <param name="fieldCount">Number of values to return. Must be 1, 2, 4 or 5.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:OpenTap.SemanticVersion.IsCompatible(OpenTap.SemanticVersion)">
            <summary>
            Returns true if the given version is backwards compatible with this. Meaning that 'other' can replace 'this' in every respect. 
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.SemanticVersion.CompareTo(System.Object)">
            <summary>
            Returns -1 if obj is greater than this version, 0 if they are the same, and 1 if this is greater than obj
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.SemanticVersion.Equals(System.Object)">
            <summary>
            Returns true if the two versions are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.SemanticVersion.GetHashCode">
            <summary>
            Returns the hashcode for the version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.SemanticVersion.op_Equality(OpenTap.SemanticVersion,OpenTap.SemanticVersion)">
            <summary>
            Overloaded == operator that provides value equality (instead of the default reference equality)
            </summary>
        </member>
        <member name="M:OpenTap.SemanticVersion.op_Inequality(OpenTap.SemanticVersion,OpenTap.SemanticVersion)">
            <summary>
            Overloaded != operator that provides value equality (instead of the default reference equality)
            </summary>
        </member>
        <member name="T:OpenTap.ITapSerializerPlugin">
            <summary>
            Species a OpenTAP Serializer plugin.
            </summary>
        </member>
        <member name="M:OpenTap.ITapSerializerPlugin.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary>
            Called as part for the deserialization chain. Returns false if it cannot serialize the XML element.  
            </summary>
            <param name="node"></param>
            <param name="t"></param>
            <param name="setter"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ITapSerializerPlugin.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary>
            Called as part for the serialization chain. Returns false if it cannot serialize the XML element.  
            </summary>
            <param name="node">The output XML element.</param>
            <param name="obj">The object being deserialized.</param>
            <param name="expectedType">The expected type from deserialization.</param>
            <returns>return true if the object could be serialized.</returns>
        </member>
        <member name="P:OpenTap.ITapSerializerPlugin.Order">
            <summary>
            Priority of the serializer. Defines the order in which the serializers are used. Default is 0.  
            </summary>
        </member>
        <member name="T:OpenTap.TapSerializerPlugin">
            <summary>
            Base class for OpenTAP Serializer plugins. Implement this in a public class to extend the TapSerializer with additional functionality.
            </summary>
        </member>
        <member name="F:OpenTap.TapSerializerPlugin.Log">
            <summary> Log source for serializer plugins. </summary>
        </member>
        <member name="P:OpenTap.TapSerializerPlugin.Serializer">
            <summary> The object facilitating Serialization or Deserialization. </summary>
        </member>
        <member name="M:OpenTap.TapSerializerPlugin.#ctor">
            <summary> Creates a new TapSerializerPlugin. </summary>
        </member>
        <member name="P:OpenTap.TapSerializerPlugin.Order">
            <summary>
            Priority of the serializer. Defines the order in which the serializers are used. Default is 0.  
            </summary>
        </member>
        <member name="M:OpenTap.TapSerializerPlugin.Deserialize(System.Xml.Linq.XElement,OpenTap.ITypeData,System.Action{System.Object})">
            <summary>
            Implement to deserialize an object.
            </summary>
            <param name="node"></param>
            <param name="t"></param>
            <param name="setter"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TapSerializerPlugin.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary>
            Implement to serialize an object.
            </summary>
            <param name="node"></param>
            <param name="obj"></param>
            <param name="expectedType"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.LogExtension">
            <summary>
            Helper class for writing warning messages about XML nodes.
            </summary>
        </member>
        <member name="M:OpenTap.LogExtension.Warning(OpenTap.TraceSource,System.Xml.Linq.XElement,System.String,System.Object[])">
            <summary>
            Prints the warning + Line information.
            </summary>
            <param name="log"></param>
            <param name="node"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="T:OpenTap.SessionLogs">
            <summary>
            SessionLogs are logs of all events that occur during startup/shutdown of a OpenTAP session and of all the session's TestPlan runs. 
            A new session log is created at the start of each session, which starts when a process is launched and ends when it closes. 
            Only 10 session logs are allowed to exist, with the oldest deleted as new logs are created. 
            By comparison, a result log typically shows only the log activity for a single run of a TestPlan. 
            </summary>
        </member>
        <member name="F:OpenTap.SessionLogs.maxNumberOfTraceFiles">
            <summary> The number of files kept at a time. </summary>
        </member>
        <member name="F:OpenTap.SessionLogs.maxTotalSizeOfTraceFiles">
            <summary> The maximally allowed size of trace files. </summary>
        </member>
        <member name="F:OpenTap.SessionLogs.maxNumberOfConcurrentSessions">
            <summary>
            If two sessions needs the same log file name, an integer is added to the name. 
            This is the max number of times that we are going to test new names.
            </summary>
        </member>
        <member name="M:OpenTap.SessionLogs.GetSessionLogFilePath">
            <summary>
            File path to the current log file. Path is updated upon UI launch.
            </summary>
        </member>
        <member name="M:OpenTap.SessionLogs.Initialize">
            <summary>
            Initializes the logging. Uses the following file name formatting: SessionLogs\\[Application Name]\\[Application Name] [yyyy-MM-dd HH-mm-ss].txt.
            </summary>
        </member>
        <member name="M:OpenTap.SessionLogs.Initialize(System.String)">
            <summary>
            Initializes the logging. 
            </summary>
        </member>
        <member name="M:OpenTap.SessionLogs.Initialize(System.String,System.Boolean)">
            <summary>
            Initializes the logging.
            </summary>
            <param name="logFileName">The name of the log file</param>
            <param name="noExclusiveWriteLock">
            Controls whether or not the file should have an exclusive write lock.
            If true, the log file may be deleted while it is in use, in which case
            session logs will be written into the void.
            </param>
        </member>
        <member name="T:OpenTap.SessionLogs.RecentFilesList">
            <summary>
            Class for managing a hidden file containing a list of recent files. This can be accessed by multiple processes, so possible race conditions needs to be handled.
            </summary>
        </member>
        <member name="M:OpenTap.SessionLogs.rename(System.String,System.Boolean)">
            <summary>
            Renames a previously initialized temporary log file.
            </summary>
        </member>
        <member name="M:OpenTap.SessionLogs.Rename(System.String)">
            <summary>
            Renames a previously initialized temporary log file.
            </summary>
        </member>
        <member name="M:OpenTap.SessionLogs.Flush">
            <summary>
            Flushes the buffered logs. Useful as the last thing to do in case of crash.
            </summary>
        </member>
        <member name="T:OpenTap.SessionOptions">
            <summary>
            Options used to define the behavior of a <see cref="T:OpenTap.Session"/>
            </summary>
        </member>
        <member name="F:OpenTap.SessionOptions.None">
            <summary>
            No special behavior is applied. Starting a session like this, is the same as just starting a TapThread.
            </summary>
        </member>
        <member name="F:OpenTap.SessionOptions.OverlayComponentSettings">
            <summary>
            Component settings are cloned for the sake of this session. Instrument, DUT etc instances are cloned.
            When this is used, test plans should be reloaded in the new context.  
            </summary>
        </member>
        <member name="F:OpenTap.SessionOptions.RedirectLogging">
            <summary> Log messages written in Sessions that redirect logging only go to LogListeners that are added in that session. </summary>
        </member>
        <member name="T:OpenTap.SessionLocal`1">
            <summary>
            Used to hold a value that is specific to a session.
            </summary>
        </member>
        <member name="P:OpenTap.SessionLocal`1.AutoDispose">
            <summary>
            Automatically dispose the value when all threads in the session has completed.
            Only has any effect if T is IDisposable
            </summary>
        </member>
        <member name="P:OpenTap.SessionLocal`1.Value">
            <summary> Session specific value. </summary>
        </member>
        <member name="M:OpenTap.SessionLocal`1.#ctor(`0,System.Boolean)">
            <summary>
            Used to hold a value that is specific to a session.
            Initializes a session local with a root/default value.
            </summary>
            <param name="rootValue">Default value set at the root session.</param>
            <param name="autoDispose">True to automatically dispose the value when all threads in the session has completed. Only has any effect if T is IDisposable.</param>
        </member>
        <member name="M:OpenTap.SessionLocal`1.#ctor(System.Boolean)">
            <summary>
            Used to hold a value that is specific to a session.
            Initializes a session local without a root/default value.
            </summary>
            <param name="autoDispose">True to automatically dispose the value when all threads in the session has completed. Only has any effect if T is IDisposable.</param>
        </member>
        <member name="T:OpenTap.Session">
            <summary> A session represents a collection of data associated with running and configuring test plans:
            - Logging
            - Settings
            - Resources
            - ...
            When a new session is created, it overrides the existing values for these items.
            </summary>
        </member>
        <member name="F:OpenTap.Session.RootSession">
            <summary> The default/root session. This session is active when no other session is. </summary>
        </member>
        <member name="F:OpenTap.Session.Parent">
            <summary> The parent session of the current session. This marks the session that started it.</summary>
        </member>
        <member name="P:OpenTap.Session.Current">
            <summary>
            Gets the currently active session.
            </summary>
        </member>
        <member name="P:OpenTap.Session.Id">
            <summary>
            Gets the session ID for this session.
            </summary>
        </member>
        <member name="P:OpenTap.Session.Options">
            <summary>
            Gets the flags used to create/start this session.
            </summary>
        </member>
        <member name="M:OpenTap.Session.Dispose">
            <summary> Disposes the session. </summary>
        </member>
        <member name="M:OpenTap.Session.Create(OpenTap.SessionOptions,System.Nullable{System.Guid})">
            <summary> Creates a new session in the current <see cref="T:OpenTap.TapThread"/> context. The session lasts until the TapTread ends, or Dispose is called on the returned Session object.</summary>
            <param name="options">Flags selected from the SessionOptions enum to customize the behavior of the session.</param>
            <param name="id">Option to specify the ID of the Session</param>
            <returns> A disposable Session object. </returns>
        </member>
        <member name="M:OpenTap.Session.Create(OpenTap.SessionOptions)">
            <summary> Creates a new session in the current <see cref="T:OpenTap.TapThread"/> context. The session lasts until the TapTread ends, or Dispose is called on the returned Session object.</summary>
            <param name="options">Flags selected from the SessionOptions enum to customize the behavior of the session.</param>
            <returns> A disposable Session object. </returns>
        </member>
        <member name="M:OpenTap.Session.Start(System.Action,OpenTap.SessionOptions)">
            <summary>
            Creates a new session, and runs the specified action in the context of that session. When the acion completes, the session is Disposed automatically.
            </summary>
        </member>
        <member name="M:OpenTap.Session.RunInSession(System.Action)">
            <summary>
            Synchronously runs the specified action in the context of the given session
            </summary>
            <param name="action">The action to run.</param>
            <returns>The session in which the action is run</returns>
        </member>
        <member name="T:OpenTap.StepSelectorAttribute">
            <summary> 
            Identifies the TestSteps that can be selected for a TestStep property. 
            </summary>
        </member>
        <member name="T:OpenTap.StepSelectorAttribute.FilterTypes">
            <summary> For selecting which steps are available in selection. It's seen relative to the step having the property that is marked with the <see cref="T:OpenTap.StepSelectorAttribute"/>.</summary>
        </member>
        <member name="F:OpenTap.StepSelectorAttribute.FilterTypes.All">
            <summary>  All steps in the entire test plan. </summary>
        </member>
        <member name="F:OpenTap.StepSelectorAttribute.FilterTypes.Children">
            <summary>   Show only children of this step. </summary>
        </member>
        <member name="F:OpenTap.StepSelectorAttribute.FilterTypes.Sibling">
            <summary>  Show only siblings of this step. </summary>
        </member>
        <member name="F:OpenTap.StepSelectorAttribute.FilterTypes.AllExcludingSelf">
            <summary> All steps in the entire test plan, except for the step itself. </summary>
        </member>
        <member name="P:OpenTap.StepSelectorAttribute.Filter">
            <summary> Selects the available items for selection on the TestStep property. </summary>
            <value> The filter. </value>
        </member>
        <member name="M:OpenTap.StepSelectorAttribute.#ctor">
            <summary>   Default constructor for StepSelectorAttribute. </summary>
        </member>
        <member name="M:OpenTap.StepSelectorAttribute.#ctor(OpenTap.StepSelectorAttribute.FilterTypes)">
            <summary> Constructor for StepSelectorAttribute. </summary>
            <param name="filter">   The filter. </param>
        </member>
        <member name="T:OpenTap.IDeserializedCallback">
            <summary> Enables callback from the OpenTAP deserializer after deserialization. </summary>
        </member>
        <member name="M:OpenTap.IDeserializedCallback.OnDeserialized">
            <summary>
            Called when the object has been deserialized.
            </summary>
        </member>
        <member name="T:OpenTap.DeserializeOrderAttribute">
            <summary>
            Can be used to control the order in which members are deserialized.
            </summary>
        </member>
        <member name="P:OpenTap.DeserializeOrderAttribute.Order">
            <summary> The order in which the member will be deserialized. Higher order, means it will be deserialized later. Minimum value is 0, which is also the default order of not attributed members.</summary>
        </member>
        <member name="M:OpenTap.DeserializeOrderAttribute.#ctor(System.Double)">
            <summary>
            Can be used to control the order in which members are deserialized.
            </summary>
            <param name="order">The order in which the member will be deserialized. Higher order, means it will be deserialized later. Minimum value is 0, which is also the default order of not attributed members.</param>
        </member>
        <member name="T:OpenTap.TapSerializer">
            <summary>
            Serializing/deserializing OpenTAP objects. This class mostly just orchestrates a number of serializer plugins. <see cref="T:OpenTap.MacroString"/>
            </summary>
        </member>
        <member name="F:OpenTap.TapSerializer.DefaultWriterSettings">
            <summary>
            Default settings for XmlWriter.
            </summary>
        </member>
        <member name="F:OpenTap.TapSerializer.DefaultReaderSettings">
            <summary>
            Default settings for XmlReaders.
            </summary>
        </member>
        <member name="M:OpenTap.TapSerializer.PushError(System.Xml.Linq.XElement,System.String)">
            <summary>
            Pushes a message to the list of errors for things that happened during load.
            </summary>
            <param name="element">The element that generated the error. </param>
            <param name="message"></param>
        </member>
        <member name="M:OpenTap.TapSerializer.PushError(System.Xml.Linq.XElement,System.String,System.Exception)">
            <summary>  Pushes a message to the list of errors for things that happened during load. Includes optional Exception value. </summary>
        </member>
        <member name="M:OpenTap.TapSerializer.Deserialize(System.Xml.Linq.XDocument,OpenTap.ITypeData,System.Boolean,System.String)">
            <summary>
            Deserializes an object from a XDocument.
            </summary>
            <param name="document"></param>
            <param name="type"></param>
            <param name="autoFlush"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TapSerializer.Flush">
            <summary>
            Needed by defered loading. Only required to be called if autoFlush is set to false during deserialization.
            </summary>
        </member>
        <member name="M:OpenTap.TapSerializer.Deserialize(System.IO.Stream,System.Boolean,OpenTap.ITypeData,System.String)">
            <summary>
            Deserializes an object from a stream.
            </summary>
            <param name="stream"></param>
            <param name="flush"></param>
            <param name="type"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TapSerializer.DeserializeFromString(System.String,OpenTap.ITypeData,System.Boolean,System.String)">
            <summary>
            Deserializes an object from an xml text string.
            </summary>
            <param name="text"></param>
            <param name="type"></param>
            <param name="flush"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TapSerializer.DeserializeFromFile(System.String,OpenTap.ITypeData,System.Boolean)">
            <summary>
            Deserializes an object from a XML file.
            </summary>
            <param name="file"></param>
            <param name="type"></param>
            <param name="flush"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TapSerializer.GetSerializers">
            <summary> Get all the serializers loaded by this TapSerializer. </summary>
        </member>
        <member name="P:OpenTap.TapSerializer.SerializerStack">
            <summary>
            The stack of serializers. Changes during serialization depending on the order of serializers used.
            </summary>
        </member>
        <member name="P:OpenTap.TapSerializer.IgnoreErrors">
            <summary>
            True if errors should be ignored.
            </summary>
        </member>
        <member name="M:OpenTap.TapSerializer.GetSerializer``1">
            <summary>
            Gets a serializer from the stack of active serializers. Returns null if there is no serializer of that type on the stack.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TapSerializer.AddSerializers(System.Collections.Generic.IEnumerable{OpenTap.ITapSerializerPlugin})">
            <summary> Adds new serializers to the serializer. Will insert them based on the order property. </summary>
            <param name="_serializers"></param>
        </member>
        <member name="M:OpenTap.TapSerializer.GetCurrentSerializer">
            <summary> The serializer currently serializing/deserializing an object.</summary>
        </member>
        <member name="M:OpenTap.TapSerializer.#ctor">
            <summary>
            Creates a new serializer instance.
            </summary>
        </member>
        <member name="M:OpenTap.TapSerializer.DeferLoad(System.Action)">
            <summary>
            Pushes a deferred load action onto a queue of deferred loads.  
            </summary>
            <param name="deferred"></param>
        </member>
        <member name="P:OpenTap.TapSerializer.Errors">
            <summary> Get the errors associated with deserialization. The errors only persists between calls to Serialize/Deserialize. See XmlErrors for more detailed information. </summary>
        </member>
        <member name="P:OpenTap.TapSerializer.XmlErrors">
            <summary> Gets a list of exceptions tha occured while loading the test plan.</summary>
        </member>
        <member name="M:OpenTap.TapSerializer.ClearErrors">
            <summary> Clears the errors accumulated in the serializer. </summary>
        </member>
        <member name="M:OpenTap.TapSerializer.Deserialize(System.Xml.Linq.XElement,System.Action{System.Object},System.Type)">
            <summary>
            Deserializes an object from an XElement. Calls the setter action with the result. returns true on success. Optionally, the type can be added.
            </summary>
            <param name="element"></param>
            <param name="setter"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TapSerializer.Deserialize(System.Xml.Linq.XElement,System.Action{System.Object},OpenTap.ITypeData)">
            <summary>
            Deserializes an object from XML.
            </summary>
            <param name="element"></param>
            <param name="setter"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TapSerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serialize an object to a stream.
            </summary>
            <param name="stream"></param>
            <param name="obj"></param>
        </member>
        <member name="M:OpenTap.TapSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
            <summary>
            Serializes an object to a XML writer.
            </summary>
            <param name="writer"></param>
            <param name="obj"></param>
        </member>
        <member name="M:OpenTap.TapSerializer.SerializeToString(System.Object)">
            <summary>
            Serializes an object to a string.
            </summary>
            <param name="obj"></param>
            <returns>The serialized object as an XML string.</returns>
        </member>
        <member name="M:OpenTap.TapSerializer.Serialize(System.Xml.Linq.XElement,System.Object,OpenTap.ITypeData)">
            <summary>
            Serializes an object to XML.
            </summary>
            <param name="elem"></param>
            <param name="obj"></param>
            <param name="expectedType"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TapSerializer.TypeToXmlString(System.Type)">
            <summary>
            Convert a type to a string supported by XML.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TapSerializer.Clone(System.Object)">
            <summary>
            Clones an object using the serializer. Skips generating and parsing XML text, so it is faster than a full serialize/deserialize.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:OpenTap.TapSerializer.serializerSteps">
            <summary> for mapping object to serializer. </summary>
        </member>
        <member name="M:OpenTap.TapSerializer.GetObjectDeserializer(System.Object)">
            <summary> Returns the serializer for a given object. null if the object is or has not been deserialized.</summary>
        </member>
        <member name="M:OpenTap.TapSerializer.GetUsedTypes">
            <summary> Gets the types this TapSerializer instance has encountered until now. </summary>
        </member>
        <member name="M:OpenTap.TapSerializer.GetUsedFiles">
            <summary> Gets the FilePath strings this instance has encountered until now. </summary>
        </member>
        <member name="P:OpenTap.TapSerializer.ReadPath">
            <summary> The path where the current file is being loaded from. This might be null in cases where it's being loaded from a stream.</summary>
        </member>
        <member name="M:OpenTap.TapSerializer.PushActiveSerializer(OpenTap.ITapSerializerPlugin)">
            <summary>  Manually push a serializer on the active serializers stack. </summary>
            <param name="objectSerializer"></param>
        </member>
        <member name="M:OpenTap.TapSerializer.PopActiveSerializer">
            <summary> Manually pop a serializer from the active serializers. </summary>
        </member>
        <member name="T:OpenTap.TestPlan">
            <summary>
            Class containing a test plan.
            </summary>
        </member>
        <member name="P:OpenTap.TestPlan.ExternalParameters">
            <summary>
            Field for external test plan parameters.
            </summary>
        </member>
        <member name="P:OpenTap.TestPlan.Steps">
            <summary>
            A collection of TestStepBase steps.
            </summary>
        </member>
        <member name="P:OpenTap.TestPlan.ChildTestSteps">
            <summary>
            List of test steps that make up this plan.  
            </summary>
        </member>
        <member name="P:OpenTap.TestPlan.Parent">
            <summary>
            Always null for test plan.
            </summary>
        </member>
        <member name="P:OpenTap.TestPlan.EnabledSteps">
            <summary>
            Gets the subset of steps that are enabled.
            </summary>
        </member>
        <member name="P:OpenTap.TestPlan.Name">
            <summary>
            Gets or sets the name. This is usually the name of the file where the test plan is saved, without the .TapPlan extension.
            </summary>
        </member>
        <member name="E:OpenTap.TestPlan.BreakOffered">
            <summary>
            A synchronous event that allows breaking the execution of the TestPlan by blocking the TestPlan execution thread. 
            It is raised prior to executing the <see cref="M:OpenTap.TestStep.Run"/> method of each <see cref="T:OpenTap.TestStep"/> in the TestPlan. 
            TestSteps may also raise this event from inside the <see cref="M:OpenTap.TestStep.Run"/> method.  
            </summary>
        </member>
        <member name="P:OpenTap.TestPlan.IsInBreak">
            <summary>
            True if the test plan is waiting in a break.
            </summary>
        </member>
        <member name="M:OpenTap.TestPlan.OnBreakOffered(OpenTap.BreakOfferedEventArgs)">
            <summary>   Raises the <see cref="E:OpenTap.TestPlan.BreakOffered"/> event. </summary>
            <remarks> If called by Tap internal code at the start of a run, the TestStepRun.Verdict will be equal to pending.</remarks>
            <remarks> If called via a user written TestStep, the TestStepRun.Verdict will be equal to running.</remarks>
            <param name="args"> Event information to send to registered event handlers. </param>
        </member>
        <member name="P:OpenTap.TestPlan.Locked">
            <summary>
            Locks the TestPlan to signal that it should not be changed.
            The GUI respects this.
            </summary>
        </member>
        <member name="P:OpenTap.TestPlan.IsRunning">
            <summary> True if this TestPlan is currently running. </summary>
        </member>
        <member name="M:OpenTap.TestPlan.#ctor">
            <summary> </summary>
        </member>
        <member name="P:OpenTap.TestPlan.CacheXml">
            <summary>  Gets or sets if the test plan XML for this test plan should be cached. </summary>
        </member>
        <member name="M:OpenTap.TestPlan.FlushXmlCache">
            <summary>  Flushes the test plan XML cache. </summary>
        </member>
        <member name="M:OpenTap.TestPlan.GetCachedXml">
            <summary> Get the cached XML (or null if it is not cached)</summary>
        </member>
        <member name="M:OpenTap.TestPlan.Save(System.IO.Stream,OpenTap.TapSerializer)">
            <summary>
            Saves this TestPlan to a stream with a specific serializer.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which to save the TestPlan.</param>
            <param name="serializer">Optional. The serializer use for deserialization. If set to null, one will be created. </param>
        </member>
        <member name="M:OpenTap.TestPlan.Save(System.IO.Stream)">
            <summary>
            Saves this TestPlan to a stream;
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which to save the TestPlan.</param>
        </member>
        <member name="M:OpenTap.TestPlan.Save(System.String)">
            <summary>
            Saves this TestPlan to a file path.
            </summary>
            <param name="filePath">The file path in which to save the TestPlan.</param>
        </member>
        <member name="M:OpenTap.TestPlan.Load(System.String)">
            <summary> Load a TestPlan. </summary>
            <param name="filePath">The file path of the TestPlan.</param>
            <returns>Returns the new test plan.</returns>
        </member>
        <member name="M:OpenTap.TestPlan.Load(System.String,System.Boolean)">
            <summary> Load a TestPlan. </summary>
            <param name="filePath">The file path of the TestPlan.</param>
            <param name="cacheXml"> Gets or sets if the XML should be cached. </param>
            <returns>Returns the new test plan.</returns>
        </member>
        <member name="T:OpenTap.TestPlan.PlanLoadException">
            <summary>
            Exception occuring when a test plan loads.
            </summary>
        </member>
        <member name="M:OpenTap.TestPlan.PlanLoadException.#ctor(System.String)">
            <summary> </summary>
            <param name="message"></param>
        </member>
        <member name="M:OpenTap.TestPlan.Load(System.IO.Stream,System.String)">
            <summary> Load a TestPlan. </summary>
            <param name="stream">The stream from which the file is actually loaded.</param>
            <param name="path">The path to the file. This will be tha value of <see cref="P:OpenTap.TestPlan.Path"/> on the new TestPlan.</param>
            <returns>Returns the new test plan.</returns>
        </member>
        <member name="M:OpenTap.TestPlan.Load(System.IO.Stream,System.String,System.Boolean,OpenTap.TapSerializer)">
            <summary> Load a TestPlan. </summary>
            <param name="stream"> The stream from which the file is actually loaded. </param>
            <param name="path"> The path to the file. This will be tha value of <see cref="P:OpenTap.TestPlan.Path"/> on the new TestPlan. </param>
            <param name="cacheXml"> Gets or sets if the XML should be cached. </param>
            <param name="serializer">Optionally the serializer used for deserializing the test plan. </param>
            <returns>Returns the new test plan.</returns>
        </member>
        <member name="M:OpenTap.TestPlan.Reload(System.IO.Stream)">
            <summary>
            Reload a TestPlan transferring the current execution state of the current plan to the new one.
            </summary>
            <param name="filestream">The filestream from which the plan loaded</param>
            <returns>Returns the new test plan.</returns>
        </member>
        <member name="M:OpenTap.TestPlan.GetPluginsRequiredToLoad(System.String)">
            <summary>
            Returns the list of plugins that are required to use the test plan. 
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="E:OpenTap.TestPlan.PropertyChanged">
            <summary>
            Event handler to on property changed.
            </summary>
        </member>
        <member name="M:OpenTap.TestPlan.OnPropertyChanged(System.String)">
            <summary>
            When a property changes this function is called.
            </summary>
            <param name="name">Inputs the string for the property changed.</param>
        </member>
        <member name="P:OpenTap.TestPlan.Path">
            <summary>
            Gets where this plan was last saved or loaded from. It might be null.
            </summary>
        </member>
        <member name="P:OpenTap.TestPlan.Directory">
            <summary> The directory where the test plan is stored.</summary>
        </member>
        <member name="P:OpenTap.TestPlan.PrintTestPlanRunSummary">
            <summary>
            When true, prints the test plan run summary at the end of a run.  
            </summary>
        </member>
        <member name="M:OpenTap.TestPlan.StartResourcePromptAsync(OpenTap.TestPlanRun,System.Collections.Generic.IEnumerable{OpenTap.IResource})">
            <summary>
            Calls the PromptForDutMetadata delegate for all referenced DUTs.
            </summary>
        </member>
        <member name="M:OpenTap.TestPlan.Execute">
            <summary>
            Blocking Execute TestPlan. Uses ResultListeners from ResultSettings.Current.
            </summary>
            <returns>Result of test plan run as a TestPlanRun object.</returns>
        </member>
        <member name="M:OpenTap.TestPlan.ExecuteAsync">
            <summary>Executes the test plan asynchronously </summary>
            <returns>A task returning the test plan run.</returns>
        </member>
        <member name="M:OpenTap.TestPlan.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the test plan asynchronously.
            </summary>
            <param name="abortToken">This abort token can be used to abort the operation.</param>
            <returns>A task returning the test plan run.</returns>
        </member>
        <member name="M:OpenTap.TestPlan.ExecuteAsync(System.Collections.Generic.IEnumerable{OpenTap.IResultListener},System.Collections.Generic.IEnumerable{OpenTap.ResultParameter},System.Collections.Generic.HashSet{OpenTap.ITestStep},System.Threading.CancellationToken)">
            <summary>
            Execute the TestPlan as specified.
            </summary>
            <param name="resultListeners">ResultListeners for result outputs.</param>
            <param name="metaDataParameters">Optional metadata parameters.</param>
            <param name="stepsOverride">Sub-section of test plan to be executed. Note this might include child steps of disabled parent steps.</param>
            <param name="cancellationToken">Cancellation token to abort the testplan</param>
            <returns>TestPlanRun results, no StepResults.</returns>
        </member>
        <member name="M:OpenTap.TestPlan.Execute(System.Collections.Generic.IEnumerable{OpenTap.IResultListener},System.Collections.Generic.IEnumerable{OpenTap.ResultParameter},System.Collections.Generic.HashSet{OpenTap.ITestStep})">
            <summary>
            Execute the TestPlan as specified. Blocking.
            </summary>
            <param name="resultListeners">ResultListeners for result outputs.</param>
            <param name="metaDataParameters">Optional metadata parameters.</param>
            <param name="stepsOverride">Sub-section of test plan to be executed. Note this might include child steps of disabled parent steps.</param>
            <returns>TestPlanRun results, no StepResults.</returns>
        </member>
        <member name="M:OpenTap.TestPlan.Execute(System.Collections.Generic.IEnumerable{OpenTap.IResultListener},System.Collections.Generic.IEnumerable{OpenTap.ResultParameter})">
            <summary>
            Execute the TestPlan as specified. Blocking.
            </summary>
            <param name="resultListeners">ResultListeners for result outputs.</param>
            <param name="metaDataParameters">Metadata parameters.</param>
            <returns>TestPlanRun results, no StepResults.</returns>
        </member>
        <member name="P:OpenTap.TestPlan.IsOpen">
            <summary> true if the plan is in its open state. </summary>
        </member>
        <member name="M:OpenTap.TestPlan.Open">
            <summary>
            Opens all resources referenced in this TestPlan (Instruments/DUTs/ResultListeners). 
            This can be called before <see cref="M:OpenTap.TestPlan.Execute"/> to manually control the opening/closing of the resources.
            </summary>
        </member>
        <member name="M:OpenTap.TestPlan.Open(System.Collections.Generic.IEnumerable{OpenTap.IResultListener})">
            <summary>
            Opens all resources referenced in this TestPlan (Instruments/DUTs/ResultListeners). 
            This can be called before <see cref="M:OpenTap.TestPlan.Execute"/> to manually control the opening/closing of the resources.
            </summary>
        </member>
        <member name="M:OpenTap.TestPlan.Close">
            <summary>
            Closes all resources referenced in this TestPlan (Instruments/DUTs/ResultListeners). 
            This should be called if <see cref="M:OpenTap.TestPlan.Open"/> was called earlier to manually close the resources again.
            </summary>
        </member>
        <member name="T:OpenTap.BreakOfferedEventArgs">
            <summary>
            Provides data for the <see cref="E:OpenTap.TestPlan.BreakOffered"/> event.
            </summary>
        </member>
        <member name="P:OpenTap.BreakOfferedEventArgs.TestStepRun">
            <summary>
            Details of the currently running (or about to be running) step.
            </summary>
        </member>
        <member name="P:OpenTap.BreakOfferedEventArgs.IsTestStepStarting">
            <summary>
            Indicates whether the this event was raised by the engine when it starts running a TestStep (true) 
            or during the run of a TestStep from within a TestStep itself (false).
            </summary>
            <remarks>This value can also be determined as TestStepRun.Verdict == TestStep.VerdictType.Pending.</remarks>
        </member>
        <member name="P:OpenTap.BreakOfferedEventArgs.JumpToStep">
            <summary>
            Specifies that the current step should not be run, but instead flow control should move to another step.
            It is up to the test step to honor this, in some cases it will not be possible. When supported,
            TestStepRun.SupportsJumpTo should be set to true.
            </summary>
        </member>
        <member name="T:OpenTap.TestPlanRun">
            <summary>
            Object that holds the state of a specific TestPlan run.
            Also internally manages resources and threads relating to the <see cref="T:OpenTap.TestStepRun"/>.
            Note: <see cref="P:OpenTap.TestPlanRun.ResourceManager"/> manages opening and closing a <see cref="T:OpenTap.Resource"/>.
            </summary>
        </member>
        <member name="P:OpenTap.TestPlanRun.TestPlanXml">
            <summary> XML for the running test plan. </summary>
        </member>
        <member name="M:OpenTap.TestPlanRun.WaitForSerialization">
            <summary> Waits for the test plan to be serialized. </summary>
        </member>
        <member name="P:OpenTap.TestPlanRun.Hash">
            <summary> The SHA1 hash of XML of the test plan.</summary>
        </member>
        <member name="P:OpenTap.TestPlanRun.TestPlanName">
            <summary> Name of the running test plan. </summary>
        </member>
        <member name="P:OpenTap.TestPlanRun.FailedToStart">
            <summary> Set by the TestPlan execution logic to indicate whether the TestPlan failed to start the TestPlan. </summary>
        </member>
        <member name="P:OpenTap.TestPlanRun.MainThread">
            <summary> The thread that started the test plan. Use this to abort the plan thread. </summary>
        </member>
        <member name="M:OpenTap.TestPlanRun.AddResultListener(OpenTap.IResultListener)">
            <summary>
            Result listeners can be added just before the test plan actually starts.
            If the operation fails an exception will be thrown.</summary>
        </member>
        <member name="M:OpenTap.TestPlanRun.RemoveResultListener(OpenTap.IResultListener)">
            <summary>
            Removes a result listener from the active result listeners in this run.
            Note this can only be done at specific times during test plan execution,
            namely when result listeners has not been connected.
            If the operation fails an exception will be thrown.
            </summary>
        </member>
        <member name="F:OpenTap.TestPlanRun.PromptWaitHandle">
            <summary> Wait handle that is set when the metadata action is completed. </summary>
        </member>
        <member name="F:OpenTap.TestPlanRun.PromptedResources">
            <summary> Resources touched by the prompt metadata action. </summary>
        </member>
        <member name="P:OpenTap.TestPlanRun.ResultListenersSealed">
            <summary> Set to true when result listeners cannot be added to the test plan run.</summary>
        </member>
        <member name="M:OpenTap.TestPlanRun.ThrottleResultPropagation">
            <summary> Wait for result queues to become processed if there is too much work in the buffer. The max workload size for any ResultListener is specified by resultLatencyLimit in seconds. </summary>
        </member>
        <member name="M:OpenTap.TestPlanRun.WaitForResults">
            <summary>
            Waits for result propagation thread to be idle.
            </summary>
        </member>
        <member name="F:OpenTap.TestPlanRun.StepsWithPrePlanRun">
            <summary>
            List of all TestSteps for which PrePlanRun has already been called.
            </summary>
        </member>
        <member name="M:OpenTap.TestPlanRun.ScheduleInResultProcessingThread``1(OpenTap.IInvokable{``0,OpenTap.WorkQueue})">
            <summary>
            Returns the number of threads queued.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TestPlanRun.ScheduleInResultProcessingThread``1(OpenTap.IInvokable{``0,OpenTap.WorkQueue},System.Boolean)">
            <summary>
            like ScheduleInResultProcessingThread, but if blocking is used, it will block until the work is finished for all result listeners.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="r"></param>
            <param name="blocking"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TestPlanRun.WaitForResourcesOpened(System.Threading.CancellationToken,OpenTap.IResource[])">
            <summary>
            Waits for the given resources to become opened.
            </summary>
            <param name="cancel"></param>
            <param name="resources"></param>
        </member>
        <member name="M:OpenTap.TestPlanRun.#ctor(OpenTap.TestPlan,System.Collections.Generic.IList{OpenTap.IResultListener},System.DateTime,System.Int64,System.Boolean)">
            <summary>
            Starts tasks to open resources. All referenced instruments and duts as well as supplied resultListeners to the plan.
            </summary>
            <param name="plan">Property Plan</param>
            <param name="resultListeners">The ResultListeners for this test plan run.</param>
            <param name="startTime">Property StartTime.</param>
            <param name="startTimeStamp"></param>
            <param name="isCompositeRun"></param>
        </member>
        <member name="F:OpenTap.TestPlanRun.testPlanHashMemory">
            <summary> Memorizer for storing pairs of Xml and hash. </summary>
        </member>
        <member name="M:OpenTap.TestPlanRun.#ctor(OpenTap.TestPlan,System.Collections.Generic.IList{OpenTap.IResultListener},System.DateTime,System.Int64,System.String,System.Boolean)">
            <summary>
            Starts tasks to open resources. All referenced instruments and duts as well as supplied resultListeners to the plan.
            </summary>
            <param name="plan">Property Plan</param>
            <param name="resultListeners">The ResultListeners for this test plan run.</param>
            <param name="startTime">Property StartTime.</param>
            <param name="startTimeStamp"></param>
            <param name="isCompositeRun"></param>
            <param name="testPlanXml">Predefined test plan XML. Allowed to be null.</param>
        </member>
        <member name="T:OpenTap.TestPlanRunSummaryListener">
            <summary>
            Class for generating the summary for a test plan.
            </summary>
        </member>
        <member name="M:OpenTap.TestPlanRunSummaryListener.#ctor">
            <summary>Creates an instance and removes the ResultListener log from the TraceSources, so log messages from this listener wont go anywhere.</summary>
        </member>
        <member name="M:OpenTap.TestPlanRunSummaryListener.OnTestPlanRunStart(OpenTap.TestPlanRun)">
            <summary>Clears the memory.</summary>
            <param name="planRun"></param>
        </member>
        <member name="M:OpenTap.TestPlanRunSummaryListener.OnTestStepRunStart(OpenTap.TestStepRun)">
            <summary>Saves which steps are started.</summary>
            <param name="stepRun"></param>
        </member>
        <member name="M:OpenTap.TestPlanRunSummaryListener.PrintSummary">
            <summary>
            Prints the summary.
            </summary>
        </member>
        <member name="T:OpenTap.TestStep">
            <summary>
            All TestSteps that are instances of the TestStep abstract class should override the <see cref="M:OpenTap.TestStep.Run"/> method. 
            Additionally, the  <see cref="M:OpenTap.TestStep.PrePlanRun"/> and <see cref="M:OpenTap.TestStep.PostPlanRun"/> methods can be overridden.
            </summary>
            <remarks>
            <see cref="T:OpenTap.ITestStep"/> can also be inherited from instead.
            </remarks>
        </member>
        <member name="P:OpenTap.TestStep.Verdict">
            <summary>
            Gets or sets the verdict. Only available during test step run. 
            The value of this property will be propagated to the TestStepRun when the step run completes.
            </summary>
        </member>
        <member name="P:OpenTap.TestStep.Enabled">
            <summary>
            Gets or sets boolean indicating whether this step is enabled in the TestPlan
            </summary>
        </member>
        <member name="P:OpenTap.TestStep.IsReadOnly">
            <summary>
            Gets or sets boolean indicating whether this step is read-only in the TestPlan. 
            This is mostly a declaration of intent, GUIs should respect it, but few things enforces it.
            </summary>
        </member>
        <member name="P:OpenTap.TestStep.Name">
            <summary>
            Gets or sets the name of the TestStep instance. Not allowed to be null.
            In many cases the name is unique within a test plan, but this should not be assumed, use <see cref="P:OpenTap.TestStep.Id"/>for an unique identifier.
            May not be null.
            </summary>
        </member>
        <member name="P:OpenTap.TestStep.TypeName">
            <summary>
            This TestStep type as a <see cref="T:System.String"/>.   
            </summary>
        </member>
        <member name="P:OpenTap.TestStep.ChildTestSteps">
            <summary>
            Gets or sets a List of child <see cref="T:OpenTap.TestStep"/>s. Any TestSteps in this list will be
            executed instead of the Run method of this TestStep.
            </summary>
        </member>
        <member name="P:OpenTap.TestStep.Parent">
            <summary>
            The parent of this TestStep. Can be another TestStep or the <see cref="T:OpenTap.TestPlan"/>.  
            </summary>
        </member>
        <member name="P:OpenTap.TestStep.Results">
            <summary>
            Result proxy that stores TestStep run results until they are propagated to the <see cref="T:OpenTap.ResultListener"/>.   
            </summary>
        </member>
        <member name="P:OpenTap.TestStep.EnabledChildSteps">
            <summary>
            The enumeration of all enabled Child Steps.
            </summary>
        </member>
        <member name="P:OpenTap.TestStep.Version">
            <summary>
            Version of this test step.
            </summary>
        </member>
        <member name="M:OpenTap.TestStep.RecursivelyGetChildSteps(OpenTap.TestStepSearch)">
            <summary>
            Recursively collects a completely list of child steps using the specified pattern. Order is depth-first.
            </summary>
            <param name="searchKind">Pattern.</param>
            <returns>Unevaluated IEnumerable of test steps.</returns>
        </member>
        <member name="M:OpenTap.TestStep.GetChildSteps(OpenTap.TestStepSearch)">
            <summary>
            Gets children following a specific search patterns. Not recursive.
            </summary>
            <param name="searchKind">Search pattern to use.</param>
            <returns>Unevaluated IEnumerable.</returns>
        </member>
        <member name="F:OpenTap.TestStep.Log">
            <summary>
            Log used to Log trace messages from TestSteps. These messages will be written with
            "TestStep" as the source.
            </summary>
        </member>
        <member name="M:OpenTap.TestStep.GenerateDefaultNames(OpenTap.ITypeData)">
            <summary>
            Returns a default name for a step type.
            </summary>
            <param name="stepType"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TestStep.GenerateDefaultNames(System.Type)">
            <summary> Returns a default name for a step type. </summary>
            <param name="stepType"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TestStep.#ctor">
            <summary>
            Initializes a new instance of the TestStep base class.
            </summary>
        </member>
        <member name="P:OpenTap.TestStep.PrePostPlanRunUsed">
            <summary> True if Pre- or PostPlanRUn has been overridden. </summary>
        </member>
        <member name="M:OpenTap.TestStep.UpgradeVerdict(OpenTap.Verdict)">
            <summary>
            Sets the Verdict if it is not already set to a more serious verdict (for example, a Pass verdict would be upgraded to Fail, which is more serious).  
            </summary>
            <param name="verdict">New verdict to set.</param>
        </member>
        <member name="M:OpenTap.TestStep.GetParent``1">
            <summary>
            Searches up through the Parent steps and returns the first step of the requested type that it finds.  
            </summary>
            <typeparam name="T">The type of TestStep to get.</typeparam>
            <returns>The closest TestStep of the requested type in the hierarchy.</returns>
        </member>
        <member name="M:OpenTap.TestStep.PrePlanRun">
            <summary>
            Called by TestPlan.Run() for each step in the test plan prior to calling the <see cref="M:OpenTap.TestStep.Run"/> method of each step.
            </summary>
        </member>
        <member name="M:OpenTap.TestStep.Run">
            <summary>
            Called by TestPlan.Run() to run each TestStep. 
            If this step has children (ChildTestSteps.Count > 0), then these are executed instead.
            </summary>
        </member>
        <member name="M:OpenTap.TestStep.PostPlanRun">
            <summary>
            Called by TestPlan.Run() after completing all <see cref="M:OpenTap.TestStep.Run"/> methods in the <see cref="T:OpenTap.TestPlan"/>. 
            /// </summary>
            <remarks>
            Note that <see cref="M:OpenTap.TestStep.PostPlanRun"/>run is run in reverse order. 
            For example, suppose you had three tests: T1, T2, and T3. 
            PrePlanRun would run for T1, T2 and T3 (in that order), and PostPlanRun would run for T3, T2 and T1 (in that order).
            </remarks>
        </member>
        <member name="M:OpenTap.TestStep.OfferBreak(System.Boolean)">
            <summary> 
            Raises the <see cref="E:OpenTap.TestPlan.BreakOffered"/> event on the <see cref="T:OpenTap.TestPlan"/> object to which this TestStep belongs. 
            </summary>
            <remarks> This method allows a user interface implementation to break/pause the execution of the TestPlan at the point at which it is called.</remarks>
        </member>
        <member name="M:OpenTap.TestStep.RunChildSteps(System.Collections.Generic.IEnumerable{OpenTap.ResultParameter})">
            <summary>
            Runs all enabled <see cref="P:OpenTap.TestStep.ChildTestSteps"/> of this TestStep. Upgrades parent verdict to the resulting verdict of the childrens run. Throws an exception if the child step does not belong or isn't enabled.
            </summary>
            <param name="attachedParameters">Parameters that will be stored together with the actual parameters of the steps.</param>
        </member>
        <member name="M:OpenTap.TestStep.RunChildSteps(System.Boolean)">
            <summary>
            Runs all enabled <see cref="P:OpenTap.TestStep.ChildTestSteps"/> of this TestStep. Upgrades parent verdict to the resulting verdict of the childrens run. Throws an exception if the child step does not belong or isn't enabled.
            </summary>
            <param name="throwOnBreak">Whether an exception will be thrown due to break conditions or if they will be caught. Exceptions are still available on child test steps TestStepRun.Exception. </param>
        </member>
        <member name="M:OpenTap.TestStep.RunChildSteps(System.Collections.Generic.IEnumerable{OpenTap.ResultParameter},System.Threading.CancellationToken)">
            <summary>
            Runs all enabled <see cref="P:OpenTap.TestStep.ChildTestSteps"/> of this TestStep. Upgrades parent verdict to the resulting verdict of the childrens run. Throws an exception if the child step does not belong or isn't enabled.
            </summary>
            <param name="attachedParameters">Parameters that will be stored together with the actual parameters of the steps.</param>
            <param name="cancellationToken">Provides a way to cancel the execution of child steps before all steps are executed.</param>
        </member>
        <member name="M:OpenTap.TestStep.RunChildSteps(System.Collections.Generic.IEnumerable{OpenTap.ResultParameter},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Runs all enabled <see cref="P:OpenTap.TestStep.ChildTestSteps"/> of this TestStep. Upgrades parent verdict to the resulting verdict of the childrens run. Throws an exception if the child step does not belong or isn't enabled.
            </summary>
            <param name="attachedParameters">Parameters that will be stored together with the actual parameters of the steps.</param>
            <param name="cancellationToken">Provides a way to cancel the execution of child steps before all steps are executed.</param>
            <param name="throwOnBreak">Whether an exception will be thrown due to break conditions or if they will be caught. Exceptions are still available on child test steps TestStepRun.Exception. </param>
        </member>
        <member name="M:OpenTap.TestStep.RunChildStep(OpenTap.ITestStep,System.Collections.Generic.IEnumerable{OpenTap.ResultParameter})">
            <summary>
            Runs the specified child step if enabled. Upgrades parent verdict to the resulting verdict of the child run. Throws an exception if childStep does not belong or isn't enabled.
            </summary>
            <param name="childStep">The child step to run.</param>
            <param name="attachedParameters">Parameters that will be stored together with the actual parameters of the step.</param>
        </member>
        <member name="M:OpenTap.TestStep.RunChildStep(OpenTap.ITestStep,System.Boolean,System.Collections.Generic.IEnumerable{OpenTap.ResultParameter})">
            <summary>
            Runs the specified child step if enabled. Upgrades parent verdict to the resulting verdict of the child run. Throws an exception if childStep does not belong or isn't enabled.
            </summary>
            <param name="childStep">The child step to run.</param>
            <param name="throwOnBreak"></param>
            <param name="attachedParameters">Parameters that will be stored together with the actual parameters of the step.</param>
        </member>
        <member name="P:OpenTap.TestStep.PlanRun">
            <summary>
            Gets or sets the <see cref="T:OpenTap.TestPlanRun"/>.  
            </summary>
        </member>
        <member name="P:OpenTap.TestStep.StepRun">
            <summary>
            Gets or sets the <see cref="T:OpenTap.TestStepRun"/>. 
            </summary>
        </member>
        <member name="P:OpenTap.TestStep.Id">
            <summary> Gets or sets the ID used to uniquely identify a test step within a test plan. </summary>
        </member>
        <member name="T:OpenTap.TestStepExtensions">
            <summary>
            An extension class for the ITestStep interface.
            </summary>
        </member>
        <member name="M:OpenTap.TestStepExtensions.GetParent``1(OpenTap.ITestStep)">
            <summary>
            Searches up through the Parent steps and returns the first step of the requested type that it finds.  
            </summary>
            <typeparam name="T">The type of TestStep to get.</typeparam>
            <returns>The closest TestStep of the requested type in the hierarchy.</returns>
        </member>
        <member name="M:OpenTap.TestStepExtensions.GetParent``1(OpenTap.ITestStepParent)">
            <summary>
            Searches up through the Parent steps and returns the first step of the requested type that it finds.  
            </summary>
            <typeparam name="T">The type of TestStep to get.</typeparam>
            <returns>The closest TestStep of the requested type in the hierarchy.</returns>
        </member>
        <member name="M:OpenTap.TestStepExtensions.OfferBreak(OpenTap.ITestStep,System.Boolean)">
            <summary> 
            Raises the <see cref="E:OpenTap.TestPlan.BreakOffered"/> event on the <see cref="T:OpenTap.TestPlan"/> object to which this TestStep belongs. 
            </summary>
            <remarks> This method allows a user interface implementation to break/pause the execution of the TestPlan at the point at which it is called.</remarks>
        </member>
        <member name="M:OpenTap.TestStepExtensions.OfferBreak(OpenTap.ITestStep,OpenTap.TestStepRun,System.Boolean)">
            <summary> 
            Raises the <see cref="E:OpenTap.TestPlan.BreakOffered"/> event on the <see cref="T:OpenTap.TestPlan"/> object to which this TestStep belongs. 
            </summary>
            <remarks> This method allows a user interface implementation to break/pause the execution of the TestPlan at the point at which it is called.</remarks>
        </member>
        <member name="M:OpenTap.TestStepExtensions.GetEnabledChildSteps(OpenTap.ITestStep)">
            <summary>
            Gets all the enabled Child Steps.
            </summary>
        </member>
        <member name="M:OpenTap.TestStepExtensions.GetChildSteps(OpenTap.ITestStep,OpenTap.TestStepSearch)">
            <summary>
            Gets children following a specific search patterns. Not recursive.
            </summary>
            <param name="Step"></param>
            <param name="searchKind">Search pattern to use.</param>
            <returns>Unevaluated IEnumerable.</returns>
        </member>
        <member name="M:OpenTap.TestStepExtensions.RecursivelyGetChildSteps(OpenTap.ITestStep,OpenTap.TestStepSearch)">
            <summary>
            Recursively collects a complete list of child steps using the specified pattern. Order is depth-first.  
            </summary>
            <param name="Step"></param>
            <param name="searchKind">Pattern.</param>
            <returns>Unevaluated IEnumerable of test steps.</returns>
        </member>
        <member name="M:OpenTap.TestStepExtensions.RunChildSteps(OpenTap.ITestStep,OpenTap.TestPlanRun,OpenTap.TestStepRun,System.Collections.Generic.IEnumerable{OpenTap.ResultParameter})">
            <summary>
            Runs all enabled <see cref="P:OpenTap.TestStep.ChildTestSteps"/> of this TestStep. Upgrades parent verdict to the resulting verdict of the childrens run. Throws an exception if the child step does not belong or isn't enabled.
            </summary>
            <param name="step"></param>
            <param name="currentPlanRun">The current TestPlanRun.</param>
            <param name="currentStepRun">The current TestStepRun.</param>
            <param name="attachedParameters">Parameters that will be stored together with the actual parameters of the steps.</param>
        </member>
        <member name="M:OpenTap.TestStepExtensions.RunChildSteps(OpenTap.ITestStep,OpenTap.TestPlanRun,OpenTap.TestStepRun,System.Collections.Generic.IEnumerable{OpenTap.ResultParameter},System.Threading.CancellationToken)">
            <summary>
            Runs all enabled <see cref="P:OpenTap.TestStep.ChildTestSteps"/> of this TestStep. Upgrades parent verdict to the resulting verdict of the childrens run. Throws an exception if the child step does not belong or isn't enabled.
            </summary>
            <param name="step"></param>
            <param name="currentPlanRun">The current TestPlanRun.</param>
            <param name="currentStepRun">The current TestStepRun.</param>
            <param name="attachedParameters">Parameters that will be stored together with the actual parameters of the steps.</param>
            <param name="cancellationToken">Provides a way to cancel the execution of child steps before all steps are executed.</param>
        </member>
        <member name="M:OpenTap.TestStepExtensions.RunChildSteps(OpenTap.ITestStep,OpenTap.TestPlanRun,OpenTap.TestStepRun,System.Collections.Generic.IEnumerable{OpenTap.ResultParameter},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Runs all enabled <see cref="P:OpenTap.TestStep.ChildTestSteps"/> of this TestStep. Upgrades parent verdict to the resulting verdict of the childrens run. Throws an exception if the child step does not belong or isn't enabled.
            </summary>
            <param name="step"></param>
            <param name="currentPlanRun">The current TestPlanRun.</param>
            <param name="currentStepRun">The current TestStepRun.</param>
            <param name="attachedParameters">Parameters that will be stored together with the actual parameters of the steps.</param>
            <param name="cancellationToken">Provides a way to cancel the execution of child steps before all steps are executed.</param>
            <param name="throwOnBreak">Whether an exception will be thrown due to break conditions or if they will be caught. Exceptions are still available on child test steps TestStepRun.Exception. </param>
        </member>
        <member name="M:OpenTap.TestStepExtensions.RunChildStep(OpenTap.ITestStep,OpenTap.ITestStep,OpenTap.TestPlanRun,OpenTap.TestStepRun,System.Collections.Generic.IEnumerable{OpenTap.ResultParameter})">
            <summary>
            Runs the specified child step if enabled. Upgrades parent verdict to the resulting verdict of the child run. Throws an exception if childStep does not belong or isn't enabled.
            </summary>
            <param name="step"></param>
            <param name="childStep">The child step to run.</param>
            <param name="currentPlanRun">The current TestPlanRun.</param>
            <param name="currentStepRun">The current TestStepRun.</param>
            <param name="attachedParameters">Parameters that will be stored together with the actual parameters of the step.</param>
        </member>
        <member name="M:OpenTap.TestStepExtensions.RunChildStep(OpenTap.ITestStep,OpenTap.ITestStep,System.Boolean,OpenTap.TestPlanRun,OpenTap.TestStepRun,System.Collections.Generic.IEnumerable{OpenTap.ResultParameter})">
            <summary>
            Runs the specified child step if enabled. Upgrades parent verdict to the resulting verdict of the child run. Throws an exception if childStep does not belong or isn't enabled.
            </summary>
            <param name="step"></param>
            <param name="childStep">The child step to run.</param>
            <param name="throwOnBreak">Whether an exception will be thrown due to break conditions or if they will be caught. Exceptions are still available on child test steps TestStepRun.Exception. </param>
            <param name="currentPlanRun">The current TestPlanRun.</param>
            <param name="currentStepRun">The current TestStepRun.</param>
            <param name="attachedParameters">Parameters that will be stored together with the actual parameters of the step.</param>
        </member>
        <member name="F:OpenTap.TestStepExtensions.currentlyExecutingTestStep">
            <summary> This is the currently executing test step or null, used to detect deadlock when a step is waiting for its parent. </summary>
        </member>
        <member name="M:OpenTap.TestStepExtensions.GetObjectSettings``3(``1,System.Boolean,System.Func{``0,OpenTap.IMemberData,``2},System.Collections.Generic.HashSet{``2},OpenTap.TypeData)">
            <summary>
            Returns the properties of a specific type from a number of objects. This will traverse IEnumerable and optionally IEnabled properties.
            </summary>
            <param name="item">The object to get properties from.</param>
            <param name="onlyEnabled">If true, Enabled and EnabledIf properties are only traversed into if they are enabled.</param>
            <param name="transform">This transform function is called on each object, and being passed the corresponding PropertyInfo instance from the parent object.</param>
            <param name="itemSet">The set of items to populate</param>
            <param name="targetType">The TypeData of the target type (Optional).</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TestStepExtensions.GetObjectSettings``3(System.Collections.Generic.IEnumerable{``1},System.Boolean,System.Func{``0,OpenTap.IMemberData,``2},System.Collections.Generic.HashSet{``2})">
            <summary>
            Returns the properties of a specific type from a number of objects. This will traverse IEnumerable and optionally IEnabled properties.
            </summary>
            <param name="objects">The objects to return properties from.</param>
            <param name="onlyEnabled">If true, Enabled and EnabledIf properties are only traversed into if they are enabled.</param>
            <param name="transform">This transform function is called on each object, and being passed the corresponding PropertyInfo instance from the parent object.</param>
            <param name="itemSet"> The set of elements being populated.  </param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TestStepExtensions.GetFormattedName(OpenTap.ITestStep)">
            <summary> Takes the name of step and replaces {} tokens with the value of properties. </summary>
        </member>
        <member name="T:OpenTap.SettingsIgnoreAttribute">
            <summary>
            Marks a property as not a setting. This is a performance optimization for when finding resources throughout the test plan.
            </summary>
        </member>
        <member name="T:OpenTap.AllowAnyChildAttribute">
            <summary>
            Used to specify that a TestStep class allows any class of step to be added as  a child.
            </summary>
        </member>
        <member name="T:OpenTap.AllowAsChildInAttribute">
            <summary>
            Identifies which <see cref="T:OpenTap.TestStep"/> types that allow this TestStep as a child.
            Parent type can be TestPlan.
            </summary>
        </member>
        <member name="P:OpenTap.AllowAsChildInAttribute.ParentStepType">
            <summary>
            Type of <see cref="T:OpenTap.TestStep"/> that can be a parent for this TestStep.
            </summary>
        </member>
        <member name="M:OpenTap.AllowAsChildInAttribute.#ctor(System.Type)">
            <summary>
            Identifies which <see cref="T:OpenTap.TestStep"/> types that allow this TestStep as a child.
            Parent type can be TestPlan.
            </summary>
            <param name="parentStepType">Type of <see cref="T:OpenTap.TestStep"/> that can be a parent for this TestStep.</param>
        </member>
        <member name="T:OpenTap.AllowChildrenOfTypeAttribute">
            <summary>
            Specifies that a TestStep class allows any child TestStep of a given type.
            </summary>
        </member>
        <member name="P:OpenTap.AllowChildrenOfTypeAttribute.RequiredInterface">
            <summary>
            Which child type is allowed.
            </summary>
        </member>
        <member name="M:OpenTap.AllowChildrenOfTypeAttribute.#ctor(System.Type)">
            <summary>
            Specifies that a TestStep class allows any child TestStep of a given type.
            </summary>
            <param name="requiredInterface">Which child type is allowed.</param>
        </member>
        <member name="T:OpenTap.TestStepList">
            <summary>
            This class holds a list of TestSteps and is used for the Children property of TestStepBase. 
            It is responsible for making sure that all TestSteps added to the list are supported/allowed 
            as children of the TestStep in the TestStepList.Parent field.
            </summary>
        </member>
        <member name="F:OpenTap.TestStepList.EnforceNestingRulesOnInsert">
            <summary>
            When true, the nesting rules defined by <see cref="T:OpenTap.AllowAsChildInAttribute"/> and 
            <see cref="T:OpenTap.AllowAnyChildAttribute"/> are checked when trying to insert a step into 
            this list. If the rules are not fulfilled the TestStep is not inserted and a warning 
            is written to the log.
            </summary>
        </member>
        <member name="P:OpenTap.TestStepList.IsReadOnly">
            <summary>Determines if the TestStepList is read only.</summary>
        </member>
        <member name="P:OpenTap.TestStepList.Parent">
            <summary>
            Parent item of type <see cref="T:OpenTap.ITestStepParent"/> to which this list belongs.
            TestSteps in this list (including TestSteps that are added later) will have this item set as their <see cref="P:OpenTap.ITestStep.Parent"/>.
            </summary>
        </member>
        <member name="M:OpenTap.TestStepList.ClearItems">
            <summary>
            Removes all the items in the list.
            </summary>
        </member>
        <member name="M:OpenTap.TestStepList.#ctor">
            <summary>Constructor for the TestStepList.</summary>
        </member>
        <member name="M:OpenTap.TestStepList.AllowChild(System.Type,System.Type)">
            <summary>
            Determines whether a TestStep of a specified type is allowed as child step to a parent of a specified type.
            </summary>
        </member>
        <member name="M:OpenTap.TestStepList.AllowChild(OpenTap.ITypeData,OpenTap.ITypeData)">
            <summary>
            Determines whether a TestStep of a specified type is allowed as child step to a parent of a specified type.
            </summary>
        </member>
        <member name="M:OpenTap.TestStepList.InsertItem(System.Int32,OpenTap.ITestStep)">
            <summary>
            Inserts an item into the collection at a specified index.
            </summary>
            <param name="index">Location in list.</param>
            <param name="item">To be inserted.</param>
        </member>
        <member name="M:OpenTap.TestStepList.CanInsertType(System.Type)">
            <summary>
            Returns true if a TestStep of type stepType can be inserted as a child step.
            </summary>
            <param name="stepType"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.TestStepList.ChildStepsChangedDelegate">
            <summary>
            Defines the callback interface that can get invoked when a child step lists changes. 
            </summary>
            <param name="senderList"> The list that changed</param>
            <param name="Action">How the list changed</param>
            <param name="Object">Which object changed in the list (might be null if Reset)</param>
            <param name="Index">The index of the item changed.</param>
        </member>
        <member name="E:OpenTap.TestStepList.ChildStepsChanged">
            <summary>
            Invoked when <see cref="P:OpenTap.TestStep.ChildTestSteps"/> changes for this TestStepList and child TestStepLists.
            </summary>
        </member>
        <member name="T:OpenTap.TestStepList.ChildStepsChangedAction">
            <summary>
            Specifies what has changed.
            </summary>
        </member>
        <member name="F:OpenTap.TestStepList.ChildStepsChangedAction.AddedStep">
            <summary>
            Specifies that a step has been added to a list.
            </summary>
        </member>
        <member name="F:OpenTap.TestStepList.ChildStepsChangedAction.RemovedStep">
            <summary>
            Specifies that a step has been removed from the list.
            </summary>
        </member>
        <member name="F:OpenTap.TestStepList.ChildStepsChangedAction.ListReplaced">
            <summary>
            Specifies that the TestStepList has been replaced. The sender is in this case the new object. Object and Index will be null.
            </summary>
        </member>
        <member name="M:OpenTap.TestStepList.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
        </member>
        <member name="M:OpenTap.TestStepList.RemoveItems(System.Collections.Generic.IEnumerable{OpenTap.ITestStep})">
            <summary> Removed a number of steps from the test plan. Also includes child steps of selected steps. </summary>
            <param name="steps">The steps to remove.</param>
        </member>
        <member name="M:OpenTap.TestStepList.RecursivelyGetAllTestSteps(OpenTap.TestStepSearch)">
            <summary>
            Recursively iterates steps and child steps to collect all steps in the list.
            </summary>
            <param name="stepSearch">Search pattern.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TestStepList.GetSteps(OpenTap.TestStepSearch)">
            <summary>
            Gets steps based on the search pattern. Ignores child steps. Returns null if not found.  
            </summary>
            <param name="stepSearch">Search pattern.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TestStepList.GetStep(System.Guid)">
            <summary>
            Returns the test step that matches the <see cref="P:OpenTap.TestStep.Id"/>. Returns null if not found.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.TestRun">
            <summary>
            Common base class for <see cref="T:OpenTap.TestStepRun"/> and <see cref="T:OpenTap.TestPlanRun"/>.
            </summary>
        </member>
        <member name="P:OpenTap.TestRun.Id">
            <summary>
            ID of this test run; can be used to uniquely identify a <see cref="T:OpenTap.TestStepRun"/> or <see cref="T:OpenTap.TestPlanRun"/>.  
            </summary>
        </member>
        <member name="M:OpenTap.TestRun.#ctor">
            <summary> Creates a new TestRun </summary>
        </member>
        <member name="P:OpenTap.TestRun.Verdict">
            <summary>
            <see cref="T:OpenTap.Verdict"/> resulting from the run.
            </summary>
        </member>
        <member name="P:OpenTap.TestRun.Exception">
            <summary> Exception causing the Verdict to be 'Error'. </summary>
        </member>
        <member name="P:OpenTap.TestRun.Duration">
            <summary> Length of time it took to run. </summary>
        </member>
        <member name="P:OpenTap.TestRun.StartTime">
            <summary>
            Time when the test started as a <see cref="T:System.DateTime"/> object.  
            </summary>
        </member>
        <member name="P:OpenTap.TestRun.StartTimeStamp">
            <summary>
            Time when the test started as ticks of the high resolution hardware counter. 
            Use with <see cref="M:System.Diagnostics.Stopwatch.GetTimestamp"/> and <see cref="F:System.Diagnostics.Stopwatch.Frequency"/> to convert to a timestamp.  
            </summary>
        </member>
        <member name="P:OpenTap.TestRun.Parameters">
            <summary>
            A list of parameters associated with this run that can be used by <see cref="T:OpenTap.ResultListener"/>. 
            </summary>
        </member>
        <member name="M:OpenTap.TestRun.UpgradeVerdict(OpenTap.Verdict)">
            <summary>
            Upgrades <see cref="P:OpenTap.TestRun.Verdict"/>.
            </summary>
            <param name="verdict"></param>
        </member>
        <member name="P:OpenTap.TestRun.BreakCondition">
            <summary> Calculated abort condition. </summary>
        </member>
        <member name="M:OpenTap.TestRun.ChildStarted(OpenTap.TestStepRun)">
            <summary> This is invoked when a child run is started. </summary>
            <param name="stepRun"></param>
        </member>
        <member name="T:OpenTap.TestStepRun">
            <summary>
            Test step Run parameters.
            Contains information about a test step run. Unique for each time a test plan is run.
            If the same step is run multiple times during the same TestStep run, multiple instances of this object will be created.
            </summary>
        </member>
        <member name="P:OpenTap.TestStepRun.Parent">
            <summary>
            Parent run that is above this run in the <see cref="T:OpenTap.TestPlan"/> tree.  
            </summary>
        </member>
        <member name="P:OpenTap.TestStepRun.TestStepId">
            <summary>
            <see cref="P:OpenTap.TestStep.Id"/> of the <see cref="T:OpenTap.TestStep"/> that this run represents.  
            </summary>
        </member>
        <member name="P:OpenTap.TestStepRun.TestStepName">
            <summary>
            <see cref="P:OpenTap.TestStep.Name"/> of the <see cref="T:OpenTap.TestStep"/> that this run represents.  
            </summary>         
        </member>
        <member name="P:OpenTap.TestStepRun.TestStepTypeName">
            <summary>
            Assembly qualified name of the type of <see cref="T:OpenTap.TestStep"/> that this run represents.  
            </summary>
        </member>
        <member name="P:OpenTap.TestStepRun.SuggestedNextStep">
            <summary>
            If possible, the next step executed. This can be implemented to support 'jump-to' functionality.
            It requires that the suggested next step ID belongs to one of the sibling steps of TestStepId.
            </summary>
        </member>
        <member name="P:OpenTap.TestStepRun.SupportsJumpTo">
            <summary>
            True if the step currently supports jumping to a step other than the next.
            Only true while the step is running or at BreakOffered.
            </summary>
        </member>
        <member name="P:OpenTap.TestStepRun.Skipped">
            <summary> This step run was skipped without execution. </summary>
        </member>
        <member name="F:OpenTap.TestStepRun.TestStepPath">
            <summary>
            The path name of the steps. E.g the name of the step combined with all of its parent steps.
            </summary>
        </member>
        <member name="M:OpenTap.TestStepRun.WaitForCompletion">
            <summary>  Waits for the test step run to be entirely done. This includes any deferred processing.</summary>
        </member>
        <member name="M:OpenTap.TestStepRun.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>  Waits for the test step run to be entirely done. This includes any deferred processing. It does not break when the test plan is aborted</summary>
        </member>
        <member name="P:OpenTap.TestStepRun.StepThread">
            <summary>  The thread in which the step is running. </summary>
        </member>
        <member name="P:OpenTap.TestStepRun.WasDeferred">
            <summary> Set to true if the step execution has been deferred. </summary>
        </member>
        <member name="M:OpenTap.TestStepRun.StartStepRun">
            <summary>  Called by TestStep.DoRun before running the step. </summary>
        </member>
        <member name="M:OpenTap.TestStepRun.CompleteStepRun(OpenTap.TestPlanRun,OpenTap.ITestStep,System.TimeSpan)">
            <summary> Called by TestStep.DoRun after running the step. </summary>
        </member>
        <member name="M:OpenTap.TestStepRun.#ctor(OpenTap.ITestStep,System.Guid,System.Collections.Generic.IEnumerable{OpenTap.ResultParameter})">
            <summary>
            Constructor for TestStepRun.
            </summary>
            <param name="step">Property Step.</param>
            <param name="parent">Property Parent. </param>
            <param name="attachedParameters">Parameters that will be stored together with the actual parameters of the steps.</param>
        </member>
        <member name="M:OpenTap.TestStepRun.BreakConditionsSatisfied">
            <summary> Returns true if the break conditions are satisfied for the test step run.</summary>
        </member>
        <member name="M:OpenTap.TestStepRun.SetResultSource(OpenTap.IResultSource)">
            <summary> Sets the result source for this run. </summary>
        </member>
        <member name="M:OpenTap.TestStepRun.WaitForChildStepStart(System.Guid,System.Int32,System.Boolean)">
            <summary> Will throw an exception when it times out. </summary>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="T:OpenTap.TapThreadStatus">
            <summary>
            Status of a <see cref="T:OpenTap.TapThread"/>.
            </summary>
        </member>
        <member name="F:OpenTap.TapThreadStatus.Queued">
            <summary>
            Work has been queued, but not started yet.
            </summary>
        </member>
        <member name="F:OpenTap.TapThreadStatus.Running">
            <summary>
            Work is currently being processed.
            </summary>
        </member>
        <member name="F:OpenTap.TapThreadStatus.Completed">
            <summary>
            Work has completed.
            </summary>
        </member>
        <member name="F:OpenTap.TapThreadStatus.HierarchyCompleted">
            <summary>
            This and all child threads have completed.
            </summary>
        </member>
        <member name="T:OpenTap.ThreadField">
            <summary> baseclass for ThreadField types. </summary>
        </member>
        <member name="F:OpenTap.ThreadField.Index">
            <summary>  Index of this thread field. </summary>
        </member>
        <member name="F:OpenTap.ThreadFieldMode.Cached">
            <summary>  Cached-mode ThreadFields are a bit faster as they dont need to iterate for finding commonly used values.
            A value found in the parent thread is upgraded to local cache. Changes in parent thread thread-field values has no effect after it has
            been cached the first time.</summary>
        </member>
        <member name="T:OpenTap.ThreadField`1">
            <summary>
            Thread fields are static objects that manage the value of a thread field.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:OpenTap.ThreadField`1.Value">
            <summary>
            Gets or sets the value of the thread field. Note that the getter may get a value from a parent thread, while the setter cannot override values from parent fields. 
            </summary>
        </member>
        <member name="M:OpenTap.ThreadField`1.GetCached">
            <summary> Gets the current value for things thread, if any.</summary>
        </member>
        <member name="T:OpenTap.TapThread">
            <summary>
            Represents a item of work in the <see cref="T:OpenTap.ThreadManager"/>. Also allows access to the Parent <see cref="T:OpenTap.TapThread"/> (the thread that initially called<see cref="M:OpenTap.TapThread.Start(System.Action,System.String)"/>)
            </summary>
        </member>
        <member name="P:OpenTap.TapThread.Current">
            <summary>
            The currently running TapThread
            </summary>
        </member>
        <member name="M:OpenTap.TapThread.WithNewContext(System.Action,OpenTap.TapThread)">
            <summary> Pretends that the current thread is a different thread while evaluating 'action'. 
            This affects the functionality of ThreadHierarchyLocals and TapThread.Current. 
            This overload also specifies which parent thread should be used.</summary>
        </member>
        <member name="M:OpenTap.TapThread.UsingThreadContext(OpenTap.TapThread,System.Action)">
            <summary> This should be used through Session. </summary>
        </member>
        <member name="M:OpenTap.TapThread.UsingThreadContext(System.Action)">
            <summary> This should be used through Session. </summary>
        </member>
        <member name="M:OpenTap.TapThread.WithNewContext(System.Action)">
            <summary> Pretends that the current thread is a different thread while evaluating 'action'. 
            This affects the functionality of ThreadHierarchyLocals and TapThread.Current. </summary>
        </member>
        <member name="F:OpenTap.TapThread.Name">
            <summary> An (optional) name identifying the OpenTAP thread. </summary>
        </member>
        <member name="P:OpenTap.TapThread.Status">
            <summary>
            The execution status of the work
            </summary>
        </member>
        <member name="P:OpenTap.TapThread.AbortToken">
            <summary>
            The abort token for this thread. Provides an interface to check the cancellation status of the current thread. Note, the status of this token is inherited from parent threads.
            </summary>
        </member>
        <member name="P:OpenTap.TapThread.Parent">
            <summary>
            The parent <see cref="T:OpenTap.TapThread">TapThread</see> that started this thread. In case it is null, then it is 
            not a managed <see cref="T:OpenTap.TapThread">TapThread</see>.
            </summary>
        </member>
        <member name="M:OpenTap.TapThread.Finalize">
            <summary> </summary>
        </member>
        <member name="M:OpenTap.TapThread.Abort">
            <summary>
            Aborts the execution of this current instance of the <see cref="T:OpenTap.TapThread">TapThread</see>.
            </summary>
        </member>
        <member name="M:OpenTap.TapThread.Abort(System.String)">
            <summary>
            Aborts the execution of this current instance of the <see cref="T:OpenTap.TapThread">TapThread</see> with a
            specified reason.
            <param name="reason">Thea reason to abort.</param>
            </summary>
        </member>
        <member name="M:OpenTap.TapThread.Start(System.Action,System.String)">
            <summary> Enqueue an action to be executed asynchronously. </summary>
            <param name="action">The action to be executed.</param>
            <param name="name">The (optional) name of the OpenTAP thread. </param>
        </member>
        <member name="M:OpenTap.TapThread.Start(System.Action,System.Action,System.String,OpenTap.TapThread)">
            <summary> Starts a new Tap Thread.</summary>
            <param name="action">The action to run.</param>
            <param name="onHierarchyCompleted">Executed when this hierarchy level is completed (may be before child threads complete)</param>
            <param name="name">The name of the thread.</param>
            <param name="threadContext">The parent context. null if the current context should be selected.</param>
            <returns>A thread instance.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:OpenTap.TapThread.Sleep(System.Int32)">
            <summary>
             Blocks the current thread until the current System.Threading.WaitHandle receives 
             a signal, using a 32-bit signed integer to specify the time interval in milliseconds.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or 0 by default.</param>
        </member>
        <member name="M:OpenTap.TapThread.ThrowIfAborted">
            <summary> Throws an OperationCancelledException if the current TapThread has been aborted. This is the same as calling TapThread.Current.AbortToken.ThrowIfCancellationRequested(). </summary>
        </member>
        <member name="M:OpenTap.TapThread.Sleep(System.TimeSpan)">
            <summary> Blocks the current thread for a specified amount of time. Will throw an OperationCancelledException if the 
            thread is aborted during this time.</summary>
            <param name="timeSpan">A System.TimeSpan that represents the number of milliseconds to wait.</param>
        </member>
        <member name="M:OpenTap.TapThread.ToString">
            <summary> Returns a readable string.</summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.ThreadManager">
            <summary> Custom thread pool for fast thread startup. </summary>
        </member>
        <member name="F:OpenTap.ThreadManager.freeWorkers">
            <summary> The number of currently available workers.</summary>
        </member>
        <member name="F:OpenTap.ThreadManager.MaxWorkerThreads">
            <summary>
            Max number of worker threads.
            </summary>
        </member>
        <member name="P:OpenTap.ThreadManager.ThreadCount">
            <summary> Current number of threads. </summary>
        </member>
        <member name="P:OpenTap.ThreadManager.AbortToken">
            <summary> Thread manager root abort token. This can cancel all thread and child threads.
            Canceled when the thread manager is disposed. </summary>
        </member>
        <member name="M:OpenTap.ThreadManager.Enqueue(OpenTap.TapThread)">
            <summary> Enqueue an action to be executed in the future. </summary>
            <param name="work">The work to be processed.</param>
        </member>
        <member name="M:OpenTap.ThreadManager.#ctor">
            <summary> Creates a new ThreadManager. </summary>
        </member>
        <member name="M:OpenTap.ThreadManager.Dispose">
            <summary> Disposes the ThreadManager. This can optionally be done at program exit.</summary>
        </member>
        <member name="T:OpenTap.ThreadHierarchyLocal`1">
            <summary>
            Has a separate value for each hierarchy of Threads that it is set on.
            If a thread sets this to a value, that value will be visible only to that thread and its child threads (as started using <see cref="M:OpenTap.TapThread.Start(System.Action,System.String)"/>)
            </summary>
        </member>
        <member name="P:OpenTap.ThreadHierarchyLocal`1.LocalValue">
            <summary>
            Has a separate value for each hierarchy of Threads that it is set on.
            If a thread sets this to a value, that value will be visible only to that thread and its child threads (as started using <see cref="M:OpenTap.TapThread.Start(System.Action,System.String)"/>)
            </summary>
        </member>
        <member name="M:OpenTap.ThreadHierarchyLocal`1.ClearLocal">
            <summary>
            Removes the thread-locally set value.
            </summary>
        </member>
        <member name="T:OpenTap.FormatVerbosities">
            <summary>   Indicates to what extend a formatter should be verbose. </summary>
        </member>
        <member name="F:OpenTap.FormatVerbosities.SuperBrief">
            <summary>   For the unit minutes, a formatter would just return ":". </summary>
        </member>
        <member name="F:OpenTap.FormatVerbosities.Brief">
            <summary>   For the unit seconds, a formatter would return "s". </summary>
        </member>
        <member name="F:OpenTap.FormatVerbosities.Normal">
            <summary>   For the unit seconds, a formatter would return "sec". </summary>
        </member>
        <member name="F:OpenTap.FormatVerbosities.Verbose">
            <summary>   For the unit seconds, a formatter would return "second". </summary>
        </member>
        <member name="T:OpenTap.TimeSpanFormatAttribute">
            <summary>
            Attribute for giving directives to the TimeSpanControl provider, that shows the control provider in the GUI.
            </summary>
        </member>
        <member name="P:OpenTap.TimeSpanFormatAttribute.AllowNone">
             <summary>
             Gets or sets a value indicating whether 'None' is allowed as a textual representation of
             TimeSpan.Zero.
             </summary>
            
             <value> true if 'None' is allowed, false if not. </value>
        </member>
        <member name="P:OpenTap.TimeSpanFormatAttribute.AllowNegative">
             <summary>
             Gets or sets a value indicating whether we a negative timespan is allowed. If set to false,
             any negative input will automatically be turned into a positive TimeSpan.
             </summary>
            
             <value> true if negative values are allowed, false if not. </value>
        </member>
        <member name="P:OpenTap.TimeSpanFormatAttribute.Verbosity">
            <summary>
            Sets the preferred verbosity for formatting the TimeSpan value.
            </summary>
        </member>
        <member name="M:OpenTap.TimeSpanFormatAttribute.#ctor(System.Boolean,System.Boolean,OpenTap.FormatVerbosities)">
            <summary>
            Time span format attribute.
            </summary>
            <param name="allowNone"></param>
            <param name="allowNegative"></param>
            <param name="verbosity"></param>
        </member>
        <member name="T:OpenTap.NumberUnitSplitter">
            <summary>
            A number unit splitter can split a text into numbers and units using whitespaces and changes
            from digits to characters as splitting points.
            </summary>
        </member>
        <member name="M:OpenTap.NumberUnitSplitter.Split(System.String,System.Globalization.NumberStyles,System.Globalization.CultureInfo)">
             <summary>
             Splits a string into pairs of numbers and units. The units are not evaluated in any way but
             just returned as strings. Separation points are whitespaces, any switch from digits to
             characters and vice versa. Dots, commas etc. are considered to belong to numbers, also the
             character 'e' when it is followed by a sign or digit. You can provide parsing parameters
             though that may render such a number invalid.
             For empty input strings, an empty list is returned.
             In case of invalid numbers, an FormatException is thrown.
             </summary>
            
             <param name="text">                 The text. </param>
             <param name="numberParseStyles">    The accepted styles for number parsing. </param>
             <param name="numberParseCulture">   The culture for number parsing. If omitted, DefaultThreadCurrentCulture is chosen.</param>
            
             <returns>   A List&lt;Tuple&lt;double,string&gt;&gt; </returns>
        </member>
        <member name="M:OpenTap.NumberUnitSplitter.GetLeadingDigits(System.String,System.Globalization.NumberStyles,System.Boolean)">
             <summary>
             Retrieves the leading part of the string that contains digits only and an optional set of
             formatting signs. Note that the returned string may even consist of formatting signs only
             like ",.-+e+" so you should use the .NET type parser on the result determine if it is an
             actual number.
             </summary>
            
             <param name="text">                     The string to parse. </param>
             <param name="numberParseStyles">        This can be configured to accept the features decimal
                                                     delimiter, leading sign and exponent. </param>
             <param name="includeLeadingWhiteSpace">    true to include leading white space characters. </param>
            
             <returns>   The leading digits. </returns>
        </member>
        <member name="T:OpenTap.TimeSpanFormatter">
            <summary>   Contains helper functions to format a time span into a human readable string. </summary>
        </member>
        <member name="M:OpenTap.TimeSpanFormatter.Format(System.TimeSpan,OpenTap.FormatVerbosities,System.Boolean,System.Boolean,System.Boolean,System.Globalization.CultureInfo)">
             <summary>   Formats a timespan to a string like "3 min 4 sec". </summary>
            
             <param name="timespan">             The timespan. </param>
             <param name="verbosity">            The verbosity. </param>
             <param name="unitSpacer">           true to insert a space before each unit. </param>
             <param name="includeZeros">         true to include those parts of the timespan that are zero,
                                                 starting with hours, e.g. "0h 2m 0s" instead of just "2m". </param>
             <param name="includeSplitSeconds">  true to include, false to exclude the fractions of the second portion. </param>
             <param name="numberFormatCulture">  The Culture to use for number formatting. Since
                                                 milliseconds are displayed as fractions of seconds, this
                                                 effects the decimal delimiter. By default, the
                                                 DefaultThreadCurrentCulture is used. </param>
            
             <returns>   The formatted value. </returns>
        </member>
        <member name="T:OpenTap.TimeSpanParser">
            <summary>
            A time span parser can parse a text input (which would typically be a user input) for
            timespan information like "1 hour 2 minutes" or "1 week 250ms" and sum them all up into a
            TimeSpan. Currently only English units are supported.
            </summary>
        </member>
        <member name="M:OpenTap.TimeSpanParser.Parse(System.String,System.Globalization.NumberStyles,System.Globalization.CultureInfo,System.Boolean)">
             <summary>
             Parses a string for TimeSpan Information like "1 week 2 days" or "2h12m3s". Currently only
             English units are accepted. Note that "month" is not a valid unit, since it does not
             correspond to a determined number of days and so is "year" because of leap years. However you
             can have both units parsed to hardwired values using the <cref name="acceptIndeterminate"/> parameter.
             Note that Microseconds are accepted, but the .NET TimeSpan only resolves milliseconds. Thus only
             multiples of thousands of Microseconds will affect the result, e.g. "2000µs", when reformatted, will
             evaluate to "2ms" whereas "200µs" will simply return TimeSpan.Zero.
             </summary>
            
             <exception cref="T:System.ArgumentException">    Thrown when one or more arguments have unsupported or
                                                     illegal values. </exception>
             <exception cref="T:System.FormatException">      Thrown when a unit is unknown. </exception>
            
             <param name="input">                The input string. </param>
             <param name="numberParseStyles">    The acceptable number styles. </param>
             <param name="numberParseCulture">   The culture for number parsing. If omitted, DefaultThreadCurrentCulture is chosen. </param>
             <param name="acceptIndeterminate">  true to accept months (as 30 days) and years (as 356
                                                 days). </param>
            
             <returns>   A TimeSpan. </returns>
        </member>
        <member name="T:OpenTap.TraceBar">
            <summary>
            Utility class to help print an "ASCII-art" graph with limits in the log files and windows. 
            </summary>
        </member>
        <member name="P:OpenTap.TraceBar.LowerLimit">
            <summary>
            Gets or sets the lower limit which is also used to determine the range of the graph.
            </summary>
        </member>
        <member name="P:OpenTap.TraceBar.UpperLimit">
            <summary>
            Gets or sets the upper limit which is also used to determine the range of the graph.
            </summary>
        </member>
        <member name="P:OpenTap.TraceBar.ShowResult">
            <summary>
            Gets or sets a Boolean value indicating whether the result will be printed as a number
            next to the bar.
            </summary>
        </member>
        <member name="P:OpenTap.TraceBar.ShowVerdict">
            <summary>
            Gets or sets a Boolean value indicating whether the verdict (pass/fail) will be shown 
            next to the bar.
            </summary>
        </member>
        <member name="P:OpenTap.TraceBar.BarLength">
            <summary>
            Gets or sets the length of the bar in characters.
            </summary>
        </member>
        <member name="P:OpenTap.TraceBar.CombinedVerdict">
            <summary>
            Combined verdict for all times GetBar has been called.
            </summary>
        </member>
        <member name="M:OpenTap.TraceBar.GetBar(System.Double)">
            <summary>
            Returns a string containing a "tracebar" ready to be printed in the log.
            </summary>
            <param name="result">The value to visualize in a TraceBar.</param>
            <returns>A string containing a "tracebar" ready to be printed in the log.</returns>
        </member>
        <member name="M:OpenTap.TraceBar.#ctor">
            <summary>
            Initializes a new instance of the TraceBar class.
            </summary>
        </member>
        <member name="T:OpenTap.TypeData">
            <summary>
            Representation of a C#/dotnet type including its inheritance hierarchy. Part of the object model used in the PluginManager
            </summary>
        </member>
        <member name="P:OpenTap.TypeData.Name">
            <summary>
            Gets the fully qualified name of the type, including its namespace but not its assembly.
            </summary>
        </member>
        <member name="P:OpenTap.TypeData.TypeAttributes">
            <summary>
            Gets the TypeAttributes for this type. This can be used to check if the type is abstract, nested, an interface, etc.
            </summary>
        </member>
        <member name="P:OpenTap.TypeData.Assembly">
            <summary>
            Gets the Assembly that defines this type.
            </summary>
        </member>
        <member name="P:OpenTap.TypeData.Display">
            <summary>
            Gets.the DisplayAttribute for this type. Null if the type does not have a DisplayAttribute
            </summary>
        </member>
        <member name="P:OpenTap.TypeData.BaseTypes">
            <summary> Gets a list of base types (including interfaces) </summary>
        </member>
        <member name="P:OpenTap.TypeData.PluginTypes">
            <summary>
            Gets a list of plugin types (i.e. types that directly implement ITapPlugin) that this type inherits from/implements
            </summary>
        </member>
        <member name="P:OpenTap.TypeData.DerivedTypes">
            <summary>
            Gets a list of types that has this type as a base type (including interfaces)
            </summary>
        </member>
        <member name="P:OpenTap.TypeData.IsBrowsable">
            <summary>
            False if the type has a System.ComponentModel.BrowsableAttribute with Browsable = false.
            </summary>
        </member>
        <member name="P:OpenTap.TypeData.Attributes">
            <summary> 
            The attributes of this type. 
            Accessing this property causes the underlying Assembly to be loaded if it is not already.
            </summary>
        </member>
        <member name="P:OpenTap.TypeData.Type">
            <summary>
            Gets the System.Type that this represents. Same as calling <see cref="M:OpenTap.TypeData.Load"/>.
            Accessing this property causes the underlying Assembly to be loaded if it is not already.
            </summary>
        </member>
        <member name="P:OpenTap.TypeData.IsValueType">
            <summary> gets if the type is a value-type. (see Type.IsValueType)</summary>
        </member>
        <member name="P:OpenTap.TypeData.BaseType">
            <summary> The base type of this type. Will return null if there is no base type. If there is no direct base, but instead an interface, that will be returned.</summary>
        </member>
        <member name="P:OpenTap.TypeData.ElementType">
            <summary> If this is a collection type, then this is the element type. Otherwise null. </summary>
        </member>
        <member name="P:OpenTap.TypeData.CanCreateInstance">
            <summary> 
            returns true if an instance possibly can be created. 
            Accessing this property causes the underlying Assembly to be loaded if it is not already.
            </summary>
        </member>
        <member name="P:OpenTap.TypeData.Status">
            <summary> The loaded state of the type. </summary>
        </member>
        <member name="E:OpenTap.TypeData.TypeCacheInvalidated">
            <summary>  Invoked when new types has been discovered in an asynchronous fashion. </summary>
        </member>
        <member name="M:OpenTap.TypeData.Load">
            <summary>
            Returns the System.Type corresponding to this. 
            If the assembly in which this type is defined has not yet been loaded, this call will load it.
            </summary>
        </member>
        <member name="M:OpenTap.TypeData.GetBestName">
            <summary>
            Returns the DisplayAttribute.Name if the type has a DisplayAttribute, otherwise the FullName without namespace
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TypeData.ToString">
            <summary> Creates a string value of this.</summary>
        </member>
        <member name="M:OpenTap.TypeData.CreateInstance(System.Object[])">
            <summary>
            Creates a new object instance of this type.
            Accessing this property causes the underlying Assembly to be loaded if it is not already.
            </summary>
        </member>
        <member name="M:OpenTap.TypeData.GetMember(System.String)">
            <summary>
            Gets a member by name.
            Causes the underlying Assembly to be loaded if it is not already.
            </summary>
        </member>
        <member name="M:OpenTap.TypeData.GetMembers">
            <summary>
            Gets all the members of this type. 
            Causes the underlying Assembly to be loaded if it is not already.
            </summary>
        </member>
        <member name="M:OpenTap.TypeData.Equals(System.Object)">
            <summary> Compares two TypeDatas by comparing their inner Type instances. </summary>
            <param name="obj"> Should be a TypeData</param>
            <returns>true if the two Type properties are equals.</returns>
        </member>
        <member name="M:OpenTap.TypeData.GetHashCode">
            <summary> Calculates the hash code based on the .NET Type instance. </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TypeData.GetTypeData(System.Object)">
            <summary> Get the type info of an object. </summary>
        </member>
        <member name="M:OpenTap.TypeData.GetDerivedTypes(OpenTap.ITypeData)">
            <summary> Get all known types that derive from a given type.</summary>
            <param name="baseType">Base type that all returned types descends to.</param>
            <returns>All known types that descends to the given base type.</returns>
        </member>
        <member name="M:OpenTap.TypeData.GetTypeDataSource(OpenTap.ITypeData)">
            <summary>
            Gets the type data source for an ITypeData. For most types this will return the AssemblyData, but for types for which
            an ITypeDataSourceProvider exists it will return that instead. The base AssemblyData will often be associated to one
            of the typedatas base classes.
            </summary>
            <param name="typeData"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TypeData.GetDerivedTypes``1">
            <summary> Get all known types that derive from a given type.</summary>
            <typeparam name="BaseType">Base type that all returned types descends to.</typeparam>
            <returns>All known types that descends to the given base type.</returns>
        </member>
        <member name="M:OpenTap.TypeData.WithTypeDataCache">
            <summary>  Creates a type data cache. Note this should be used with 'using{}' so that it gets removed afterwards. </summary>
            <returns> A disposable object removing the cache. </returns>
        </member>
        <member name="M:OpenTap.TypeData.GetTypeData(System.String)">
            <summary> Gets the type info from a string. </summary>
        </member>
        <member name="M:OpenTap.TypeData.GetTypeData(System.Type)">
            <summary>
            This throws an exception due to the ambiguousness of TypeData.FromType vs TypeData.GetTypeData. To get TypeData representing a type use TypeData.FromType.
            Otherwise cast 'type' to an 'object' first.
            </summary>
        </member>
        <member name="M:OpenTap.TypeData.FromType(System.Type)">
            <summary> Creates a new TypeData object to represent a dotnet type. </summary>
        </member>
        <member name="T:OpenTap.UnitAttribute">
            <summary>
            Identifies that units should be assigned to a property.
            </summary>
        </member>
        <member name="P:OpenTap.UnitAttribute.Unit">
            <summary>
            The unit e.g "Hz".
            </summary>
        </member>
        <member name="P:OpenTap.UnitAttribute.UseEngineeringPrefix">
            <summary>
            Whether to use engineering prefix. E.g 1000000 Hz -> 1 MHz
            </summary>
        </member>
        <member name="P:OpenTap.UnitAttribute.PreScaling">
            <summary>
            Pre scaling of values.
            </summary>
        </member>
        <member name="P:OpenTap.UnitAttribute.StringFormat">
            <summary>
            The format argument to string.Format.
            </summary>
        </member>
        <member name="P:OpenTap.UnitAttribute.UseRanges">
            <summary>
            Whether to use ranges to show arrays of numbers. For example, show 1, 2, 3, 4 as 1 : 4.
            </summary>
        </member>
        <member name="M:OpenTap.UnitAttribute.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.Double)">
            <summary>Constructor for <see cref="T:OpenTap.UnitAttribute"/>.</summary>
            <param name="Unit">The unit e.g "Hz".</param>
            <param name="UseEngineeringPrefix">Whether to use engineering prefix. E.g 1000000 Hz -> 1 MHz.</param>
            <param name="StringFormat">The format argument to string.Format.</param>
            <param name="UseRanges">Whether to use ranges to show arrays of numbers. For example, show 1, 2, 3, 4 as 1 : 4.</param>
            <param name="PreScaling">Pre scaling of values.</param>
        </member>
        <member name="T:OpenTap.UnmergableAttribute">
            <summary> Marks a property on a test step that cannot be merged with another property from another step..</summary>
        </member>
        <member name="T:OpenTap.UnparameterizableAttribute">
            <summary> Marks on a property that it cannot be parameterized. </summary>
        </member>
        <member name="T:OpenTap.UnsweepableAttribute">
            <summary> Marks a property on a test step that should be fixed during test plan execution. This means it should be excluded from e.g. sweep loops.</summary>
        </member>
        <member name="T:OpenTap.UserInput">
            <summary>
            Class for getting user input without using GUI.
            </summary>
        </member>
        <member name="M:OpenTap.UserInput.Request(System.Object,System.TimeSpan,System.Boolean)">
            <summary> Request user input from the GUI. Waits an amount of time specified by Timeout. If the timeout occurs a TimeoutException will be thrown.</summary>
            <param name="dataObject">The object the user should fill out with data.</param>
            <param name="Timeout">How long to wait before timing out. </param>
            <param name="modal">set to True if a modal request is wanted. This means the user will have to answer before doing anything else.</param>
        </member>
        <member name="M:OpenTap.UserInput.Request(System.Object,System.Boolean)">
            <summary> Request user input from the GUI. Waits indefinitely.</summary>
            <param name="dataObject">The object the user should fill out with data.</param>
            <param name="modal">set to True if a modal request is wanted. This means the user will have to answer before doing anything else.</param>
        </member>
        <member name="P:OpenTap.UserInput.Interface">
            <summary> Currently selected interface. </summary>
        </member>
        <member name="M:OpenTap.UserInput.SetInterface(OpenTap.IUserInputInterface)">
            <summary> Sets the current user input interface. This should almost never be called from user code. </summary>
            <param name="inputInterface"></param>
        </member>
        <member name="M:OpenTap.UserInput.NotifyChanged(System.Object,System.String)">
            <summary> Call to notify the user interface that an object property has changed. </summary>
            <param name="obj"></param>
            <param name="property"></param>
        </member>
        <member name="M:OpenTap.UserInput.GetInterface">
            <summary> Gets the current user input interface. </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.IUserInterface">
            <summary> Defines a way for plugins to notify the user that a property has changed. </summary>
        </member>
        <member name="M:OpenTap.IUserInterface.NotifyChanged(System.Object,System.String)">
            <summary>
            This method is called to notify that a property has changed on an object.
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
        </member>
        <member name="T:OpenTap.IUserInputInterface">
            <summary> Defines a way for plugins to request input from the user. </summary>
        </member>
        <member name="M:OpenTap.IUserInputInterface.RequestUserInput(System.Object,System.TimeSpan,System.Boolean)">
            <summary> The method called when the interface requests user input.</summary>
            <param name="dataObject">The object the user should fill out with data.</param>
            <param name="Timeout">How long the user should have.</param>
            <param name="modal"> True if a modal request is wanted</param>
        </member>
        <member name="T:OpenTap.LayoutMode">
            <summary> The supported layout modes. </summary>
        </member>
        <member name="F:OpenTap.LayoutMode.Normal">
            <summary> The default mode.</summary>
        </member>
        <member name="F:OpenTap.LayoutMode.FullRow">
            <summary> The user input fills the whole row. </summary>
        </member>
        <member name="F:OpenTap.LayoutMode.FloatBottom">
            <summary> The user input floats to the bottom.</summary>
        </member>
        <member name="T:OpenTap.LayoutAttribute">
            <summary> LayoutAttribute can be used to specify the wanted layout for user interfaces.</summary>
        </member>
        <member name="P:OpenTap.LayoutAttribute.Mode">
            <summary> Specifies the mode of layout.</summary>
        </member>
        <member name="P:OpenTap.LayoutAttribute.RowHeight">
            <summary> How much height should the input take.  </summary>
        </member>
        <member name="P:OpenTap.LayoutAttribute.MaxRowHeight">
            <summary> Maximum row height for the input. </summary>
        </member>
        <member name="M:OpenTap.LayoutAttribute.#ctor(OpenTap.LayoutMode,System.Int32,System.Int32)">
            <summary> </summary>
            <param name="mode"></param>
            <param name="rowHeight"></param>
            <param name="maxRowHeight"></param>
        </member>
        <member name="T:OpenTap.SubmitAttribute">
            <summary> Specifies that a property finalizes input.</summary>
        </member>
        <member name="T:OpenTap.CliUserInputInterface">
            <summary> Standard implementation of UserInputInterface for Command Line interfaces</summary>
        </member>
        <member name="M:OpenTap.CliUserInputInterface.awaitReadLine(System.DateTime,System.Boolean)">
            <summary>
            AwaitReadline reads the line asynchronously.  
            This has to be done in a thread, otherwise we cannot abort the test plan in the meantime. </summary>
            <param name="timeOut"></param>
            <param name="secure"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.CliUserInputInterface.Load">
            <summary> Loads the CLI user input interface. Note, once it is loaded it cannot be unloaded. </summary>
        </member>
        <member name="M:OpenTap.CliUserInputInterface.AcquireUserInputLock">
            <summary>
            Acquires a lock on the user input requests, so that user inputs will have to
            wait for this object to be disposed in order to do the request.
            </summary>
            <returns>A disposable that must be disposed in the same thread as the caller.</returns>
        </member>
        <member name="T:OpenTap.ValidatingObject">
            <remarks>
            Only works on properties, not fields. The functionality is implemented primarily with a GUI in mind.
            </remarks>
            <summary>
            Runtime property value error-checking system. 
            Can be used to validate an object before run or to display messages through a GUI.
            </summary>
        </member>
        <member name="P:OpenTap.ValidatingObject.Rules">
            <summary>
            All the validation rules. Add new rules to this in order to get runtime value validation.
            </summary>
        </member>
        <member name="M:OpenTap.ValidatingObject.GetError(System.String)">
            <summary>
            Return the error for a given property
            </summary>
        </member>
        <member name="P:OpenTap.ValidatingObject.Error">
            <summary>
            Gets the error messages for each invalid rule and joins them with a newline.
            </summary>
        </member>
        <member name="P:OpenTap.ValidatingObject.System#ComponentModel#IDataErrorInfo#Item(System.String)">
            <summary>
            Gets the error(s) for a given property as a concatenated string.
            </summary>
            <param name="propertyName"></param>
            <returns>string concatenated errors.</returns>
        </member>
        <member name="M:OpenTap.ValidatingObject.ThrowOnValidationError(System.Boolean)">
            <summary>
            Checks all validation rules on this object (<see cref="P:OpenTap.ValidatingObject.Rules"/>) and throws an AggregateException on errors.
            </summary>
            <param name="ignoreDisabledProperties">If true, ignores <see cref="P:OpenTap.ValidatingObject.Rules"/> related to properties that are disabled or hidden as a result of <see cref="T:OpenTap.EnabledIfAttribute"/> or <see cref="T:OpenTap.Enabled`1"/>.</param>
            <exception cref="T:System.AggregateException">Thrown when any <see cref="P:OpenTap.ValidatingObject.Rules"/> on this object are invalid. This exception contains an ArgumentException for each invalid setting.</exception>
        </member>
        <member name="E:OpenTap.ValidatingObject.PropertyChanged">
            <summary>
            Standard PropertyChanged event object.
            </summary>
        </member>
        <member name="M:OpenTap.ValidatingObject.OnPropertyChanged(System.String)">
            <summary>
            Triggers the PropertyChanged event.
            </summary>
            <param name="propertyName">string name of which property has been changed.</param>
        </member>
        <member name="T:OpenTap.IsValidDelegateDefinition">
            <summary>
            Delegate for checking validation rule.
            </summary>
            <returns>True if valid, false if not.</returns>
        </member>
        <member name="T:OpenTap.CustomErrorDelegateDefinition">
            <summary>
            Delegate for returning a custom error message from a validation rule.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.ValidationRule">
            <summary>
            Validates settings at runtime. A validation rule is attached to an object of type <see cref="T:OpenTap.ValidatingObject"/> and is used to validate the property value of that object. 
            Also see <see cref="P:OpenTap.ValidatingObject.Rules"/>
            </summary>
        </member>
        <member name="P:OpenTap.ValidationRule.PropertyName">
            <summary>
            Name of the property affected by this rule.
            </summary>
        </member>
        <member name="P:OpenTap.ValidationRule.ErrorMessage">
            <summary>
            Error message to use if the property does not follow the rule.  
            </summary>
        </member>
        <member name="P:OpenTap.ValidationRule.IsValid">
            <summary>
            Rule function following the signature () -> bool.  
            </summary>
        </member>
        <member name="M:OpenTap.ValidationRule.#ctor(OpenTap.IsValidDelegateDefinition,System.String,System.String)">
            <summary>
            </summary>
            <param name="isValid">Property IsValid</param>
            <param name="errorMessage">Property ErrorMessage-</param>
            <param name="propertyName">Property PropertyName</param>
        </member>
        <member name="T:OpenTap.DelegateValidationRule">
            <summary>
            Validation rule that takes a delegate as an argument.  Used for writing error messages.
            </summary>
        </member>
        <member name="P:OpenTap.DelegateValidationRule.ErrorMessage">
            <summary>
            The error calculated from ErrorDelegate.
            </summary>
        </member>
        <member name="F:OpenTap.DelegateValidationRule.ErrorDelegate">
            <summary>
            The delegate producing the error message.
            </summary>
        </member>
        <member name="M:OpenTap.DelegateValidationRule.#ctor(OpenTap.IsValidDelegateDefinition,System.String,OpenTap.CustomErrorDelegateDefinition)">
            <summary>
            Constructor for DelegateValidationRule.
            </summary>
            <param name="isValid">Validation delegate.</param>
            <param name="propertyName">Target property.</param>
            <param name="errorDelegate">Function creating the error message.</param>
        </member>
        <member name="T:OpenTap.ValidationRuleCollection">
            <summary>
            Collection of validation rules.
            Simplifies adding new rules by abstracting the use of ValidationRule objects.
            </summary>
        </member>
        <member name="M:OpenTap.ValidationRuleCollection.Add(OpenTap.IsValidDelegateDefinition,System.String,System.String)">
            <summary>
            Add a new rule to the collection.
            </summary>
            <param name="isValid">Rule checking function.</param>
            <param name="errorMessage"> Error if rule checking function returns false.</param>
            <param name="propertyName">Name of the property it affects.</param>
        </member>
        <member name="M:OpenTap.ValidationRuleCollection.Add(OpenTap.IsValidDelegateDefinition,System.String)">
            <summary>
            This overload of ValidationRuleCollection.Add should not be used. This placeholder method is added to provide a warning.
            </summary>
            <param name="isValid">Rule checking function.</param>
            <param name="errorMessage"> Error if rule checking function returns false.</param>
        </member>
        <member name="M:OpenTap.ValidationRuleCollection.Forward(OpenTap.IMemberData)">
            <summary>
            Dynamically adds a sub-objects rules to the collection of rules.
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:OpenTap.ValidationRuleCollection.Add(OpenTap.IsValidDelegateDefinition,OpenTap.CustomErrorDelegateDefinition,System.String)">
            <summary>
            Adds a new rule to the collection.
            </summary>
            <param name="isValid"></param>
            <param name="errorDelegate"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:OpenTap.ValidationRuleCollection.Add(OpenTap.IsValidDelegateDefinition,System.String,System.String[])">
            <summary>
            Add a new rule to the collection for multiple properties. 
            Internally a new rule is created for each property.
            </summary>
            <param name="isValid">Rule checking function.</param>
            <param name="errorMessage"> Error if rule checking function returns false.</param>
            <param name="propertyNames">Names of the properties it affects.</param>
        </member>
        <member name="M:OpenTap.ValidationRuleCollection.Add(OpenTap.IsValidDelegateDefinition,OpenTap.CustomErrorDelegateDefinition,System.String[])">
            <summary>
            Adds a new rule to the collection.
            </summary>
            <param name="isValid"></param>
            <param name="errorDelegate"></param>
            <param name="propertyNames">Names of the properties it affects.</param>
        </member>
        <member name="T:OpenTap.Verdict">
            <summary>
            Enumeration containing the verdict types used for <see cref="P:OpenTap.TestRun.Verdict"/> and <see cref="P:OpenTap.TestRun.Verdict"/> properties.
            </summary>
        </member>
        <member name="F:OpenTap.Verdict.NotSet">
            <summary>
            No verdict has been set. This is the default value.
            </summary>
        </member>
        <member name="F:OpenTap.Verdict.Pass">
            <summary>
            Test passed. 
            </summary>
        </member>
        <member name="F:OpenTap.Verdict.Inconclusive">
            <summary>
            Test had an inconclusive result. 
            </summary>
        </member>
        <member name="F:OpenTap.Verdict.Fail">
            <summary>
            Test failed. 
            </summary>
        </member>
        <member name="F:OpenTap.Verdict.Aborted">
            <summary>
            Test was aborted. 
            </summary>
        </member>
        <member name="F:OpenTap.Verdict.Error">
            <summary>
            Test failed due to an exception or another procedural error. Such as no instrument/DUT connection. 
            </summary>
        </member>
        <member name="T:OpenTap.VisaDeviceDiscovery">
            <summary>  
            Implements device address discovery for VISA Keysight instruments and searches for device aliases. 
            </summary>
        </member>
        <member name="F:OpenTap.VisaDeviceDiscovery.detectAddressQueue">
            <summary> Ensures updating device addresses is run from the same thread.</summary>
        </member>
        <member name="M:OpenTap.VisaDeviceDiscovery.CanDetect(OpenTap.DeviceAddressAttribute)">
            <summary>  Returns true if DeviceAddress is a VISA address. </summary>
            <param name="DeviceAddress">. </param>
            <returns> </returns>
        </member>
        <member name="T:OpenTap.WorkQueue">
            <summary> 
            Work Queue used for result processing in sequence but asynchronously. It uses the ThreadManager to automatically clean up threads that have been idle for a while.
            When the WorkQueue is disposed, the used thread is immediately returned to the ThreadManager.
            </summary>
        </member>
        <member name="T:OpenTap.WorkQueue.Options">
            <summary> Options for WorkQueues. </summary>
        </member>
        <member name="F:OpenTap.WorkQueue.Options.None">
            <summary> No options. </summary>
        </member>
        <member name="F:OpenTap.WorkQueue.Options.LongRunning">
            <summary> The thread is not returned to the ThreadManager when it has been idle for some time. In this situation the WorkQueue must be disposed manually. </summary>
        </member>
        <member name="F:OpenTap.WorkQueue.Options.TimeAveraging">
            <summary> Time averaging is enabled. Each piece of work will have measured time spent. </summary>
        </member>
        <member name="F:OpenTap.WorkQueue.Timeout">
            <summary>
            The amount of idle time to wait before giving the thread back to the threading manager. This has no effect if the LongRunning option is selected. 
            </summary>
        </member>
        <member name="P:OpenTap.WorkQueue.AverageTimeSpent">
            <summary> The average time spent for each task. Only available if Options.TImeAveraging is enabled. </summary>
        </member>
        <member name="P:OpenTap.WorkQueue.QueueSize">
            <summary> The current number of items in the work queue. If called from the worker thread, this number will be 0 for that last worker. </summary>
        </member>
        <member name="F:OpenTap.WorkQueue.Name">
            <summary> A name of identifying the work queue. </summary>
        </member>
        <member name="M:OpenTap.WorkQueue.#ctor(OpenTap.WorkQueue.Options,System.String)">
            <summary> Creates a new instance of WorkQueue.</summary>
            <param name="options">Options.</param>
            <param name="name">A name to identify a work queue.</param>
        </member>
        <member name="M:OpenTap.WorkQueue.#ctor(OpenTap.WorkQueue.Options,System.String,OpenTap.TapThread)">
            <summary> Creates a new instance of WorkQueue.</summary>
            <param name="options">Options.</param>
            <param name="name">A name to identify a work queue.</param>
            <param name="threadContext"> The thread context in which to run work jobs. The default value causes the context to be the parent of an enqueuing thread.</param>
        </member>
        <member name="M:OpenTap.WorkQueue.EnqueueWork(System.Action)">
            <summary> Enqueue a new piece of work to be handled in the future. </summary>
        </member>
        <member name="M:OpenTap.WorkQueue.WorkerFunction">
            <summary>
            This method in in charge of processing the work queue.
            </summary>
        </member>
        <member name="M:OpenTap.WorkQueue.EnqueueWork(OpenTap.IInvokable)">
            <summary> Enqueue a new piece of work to be handled in the future. </summary>
        </member>
        <member name="M:OpenTap.WorkQueue.Dispose">
            <summary> Give the thread back to the thread manager.</summary>
        </member>
        <member name="M:OpenTap.WorkQueue.Wait">
            <summary> Waits for the workqueue to become empty. </summary>
        </member>
        <member name="T:OpenTap.WorkQueue.ActionInvokable">
            <summary>  Wraps an Action in an IInvokable. </summary>
        </member>
        <member name="T:OpenTap.WorkQueue.WrappedInvokable`2">
            <summary>  Wraps an IInvokable(T,T2) in an IInvokable. </summary>
        </member>
        <member name="T:OpenTap.XmlError">
            <summary> Contains detailed information about what went wrong while loading or saving information to an XML file. </summary>
        </member>
        <member name="P:OpenTap.XmlError.Element">
            <summary> The XML element which caused the error. This may be null if no XML element could be associated with the error. </summary>
        </member>
        <member name="P:OpenTap.XmlError.Exception">
            <summary> The exception that occured - if any.</summary>
        </member>
        <member name="P:OpenTap.XmlError.Message">
            <summary> The message describing the error. </summary>
        </member>
        <member name="M:OpenTap.XmlError.#ctor(System.Xml.Linq.XElement,System.String,System.Exception)">
            <summary> Creates an instance of XmlError. xmlElement may be null. message may be null if exception is set. </summary>
        </member>
        <member name="M:OpenTap.XmlError.ToString">
            <summary> Prints this error in a readable fashion. </summary>
        </member>
        <member name="M:OpenTap.AnsiColorCodeFix.TryEnableForWin10">
            <summary>
            This should work for win10 version 1511 or later
            </summary>
        </member>
        <member name="T:OpenTap.OperatingSystem">
            <summary> Detects which operating system is used. </summary>
        </member>
        <member name="T:OpenTap.Package.Ipc.SharedState">
            <summary>
            Used for sharing state information between processes. The data generated here is cleaned up automatically when all the processes uses it stops.
            </summary>
        </member>
        <member name="T:OpenTap.CountedHashSet`1">
            <summary> This set contains the N most recently used and most used elements for type T. The capacity is set upon initialization and cannot be changed. </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:OpenTap.CountedHashSet`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new counted hash set. Items will be removed based on use count, oldest first, when the number of items reaches the <paramref name="threshold"/> until there are only <paramref name="desiredCapacity"/> items left.
            </summary>
            <param name="desiredCapacity">This is the capacity the set should at most have when trimmed.</param>
            <param name="threshold">This is the capacity the set will have when a trimming operation will start.</param>
        </member>
        <member name="P:OpenTap.ExecutorClient.IsRunningIsolated">
            <summary>
            Is this process an isolated sub process of tap.exe
            </summary>
        </member>
        <member name="P:OpenTap.ExecutorClient.IsExecutorMode">
            <summary>
            Is this process a sub process of tap.exe
            </summary>
        </member>
        <member name="P:OpenTap.ExecutorClient.ExeDir">
            <summary>
            The directory containing the OpenTAP installation.
            This is usually the value of the environment variable OPENTAP_INIT_DIRECTORY set by tap.exe
            If this value is not set, use the location of OpenTap.dll instead
            In some cases, when running isolated this is that value but from the parent process.
            </summary>
        </member>
        <member name="T:OpenTap.FileSystemHelper">
            <summary>
            Utility class to help with common file system operations.
            </summary>
        </member>
        <member name="M:OpenTap.FileSystemHelper.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory with files.
            </summary>
            <param name="target_dir"></param>
        </member>
        <member name="M:OpenTap.FileSystemHelper.EnsureDirectory(System.String)">
            <summary>
            Creates a directory if it does not already exist.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:OpenTap.FileSystemHelper.CreateTempDirectory">
            <summary>
            Creates a temporary directory.
            </summary>
            <returns> Path to the temporary directory.</returns>
        </member>
        <member name="M:OpenTap.FileSystemHelper.GetRelativePath(System.String,System.String)">
            <summary>
            Compares two paths to get the relative between base and end. The string has to be a standard file system string like "C:\Program Files\...".
            </summary>
            <param name="baseDirectory"></param>
            <param name="endDirectory"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.ReflectionHelper">
            <summary>
            Class to ease the use of reflection.
            </summary>
        </member>
        <member name="M:OpenTap.ReflectionHelper.IsA(OpenTap.ITypeData,System.Type)">
            <summary>Returns true if 'type' and 'basetype' are equal. </summary> 
            <param name="type"></param>
            <param name="basetype"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionHelper.DirectInheritsFrom(OpenTap.ITypeData,OpenTap.ITypeData)">
            <summary> Really fast direct descendant test. This checks for reference equality of the type or a base type, and 'baseType'.
            Given these constraints are met, this can be 6x faster than DescendsTo, but should only be used in special cases. </summary>
        </member>
        <member name="M:OpenTap.ReflectionHelper.ParseDisplayname(System.String,System.String@)">
            <summary>
            Parses a DisplayName into a group:name pair.
            </summary>
            <param name="displayName"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionHelper.GetHelpLink(System.Reflection.MemberInfo)">
            <summary>
            Gets the HelpLinkAttribute text of a type or member. If no HelpLinkAttribute exists, it looks for a class level help link. Also looks at parent classes. Finally, it returns null if no help link was found.
             </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionHelper.GetCustomAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the custom attributes. Both type and property attributes. Also inherited attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionHelper.GetFirstOrDefaultCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the first or default of the custom attributes for this member. Both type and property attributes also inherited attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionHelper.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the first or default of the custom attributes for this property. Both type and property attributes also inherited attributes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionHelper.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            return whether the property has a given attribute T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionHelper.HasAttribute``1(System.Type)">
            <summary>
            Return whether the attribute has the given attribute T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionHelper.IsBrowsable(System.Reflection.MemberInfo)">
            <summary>
            Returns true if a MemberInfo is Browsable.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionHelper.DescendsTo(System.Type,System.Type)">
            <summary>
            Check whether a type 'descends' to otherType or "can be otherType".
            </summary>
            <param name="t"></param>
            <param name="otherType"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionHelper.HasInterface``1(System.Type)">
            <summary>
            returns whether t has a given interface T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.ReflectionHelper.IsNumeric(System.Type)">
            <summary>
            Returns true if a type is numeric.
            </summary>
        </member>
        <member name="M:OpenTap.ReflectionHelper.IsNumeric(OpenTap.ITypeData)">
            <summary>
            Returns true if a type is numeric.
            </summary>
        </member>
        <member name="M:OpenTap.ReflectionHelper.CreateInstance(System.Type,System.Object[])">
            <summary> Creates an instance of t with no constructor arguments. </summary>
        </member>
        <member name="M:OpenTap.ReflectionHelper.CreateInstanceSafe(OpenTap.ITypeData,System.Object[])">
            <summary> Creates an instance of type t. If an error occurs it returns null and prints an error message. </summary>
        </member>
        <member name="M:OpenTap.ReflectionHelper.GetEnumerableElementType(System.Type)">
            <summary>
            If Type is a collection of items, get the element type.
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="F:OpenTap.ReflectionHelper.tapMutex">
            <summary>
            Custom mutex to check if an instance of any Tap application is running.
            </summary>
        </member>
        <member name="M:OpenTap.ReflectionHelper.SetTapMutex">
            <summary>
            Set the custom Tap mutex.
            </summary>
        </member>
        <member name="M:OpenTap.ReflectionHelper.GetPropertiesTap(System.Type)">
            <summary> Extracts properties from a Type that are public and not static. Default GetProperties() also returns static properties. </summary>
        </member>
        <member name="M:OpenTap.ReflectionHelper.GetMethodsTap(System.Type)">
            <summary> Extracts properties from a Type that are public and not static. Default GetProperties() also returns static properties. </summary>
        </member>
        <member name="M:OpenTap.ReflectionHelper.As``1(OpenTap.ITypeData)">
            <summary> Get the base C# type of a given type. </summary>
        </member>
        <member name="T:OpenTap.Memorizer.CyclicInvokeMode">
            <summary>
            Enumerates how cyclic invokes can be handled.
            </summary>
        </member>
        <member name="F:OpenTap.Memorizer.CyclicInvokeMode.ThrowException">
            <summary>
            Specifies that an exception should be thrown.
            </summary>
        </member>
        <member name="F:OpenTap.Memorizer.CyclicInvokeMode.ReturnDefaultValue">
            <summary>
            Specifies that default(ResultT) should be returned.
            </summary>
        </member>
        <member name="T:OpenTap.Memorizer`3">
            <summary>
            Convenient when some memorizer optimizations can be done. 
            Includes functionality for decay time and max number of elements.
            It assumes that the same ArgT will always result in the same ResultT.
            </summary>
            <typeparam name="ArgT"></typeparam>
            <typeparam name="ResultT"></typeparam>
            <typeparam name="MemorizerKey"></typeparam>
        </member>
        <member name="T:OpenTap.Memorizer`3.LockObject">
            <summary>
            Used for locking the invokation of a specific MemorizerKey. 
            This makes it possible to call Invoke in parallel and avoid recalculating the same value multiple times.
            </summary>
        </member>
        <member name="F:OpenTap.Memorizer`3.SoftSizeDecayTime">
            <summary> If a certain time passes a result should be removed. By default, never. </summary>
        </member>
        <member name="P:OpenTap.Memorizer`3.Validator">
            <summary> Can be used to create a validation key for each key in the memorizer.
            Validation keys are used for checking if the memory is up to date or if it should be refreshed. </summary>
        </member>
        <member name="F:OpenTap.Memorizer`3.CylicInvokeResponse">
            <summary>
            Specifies how to handle situations where an Invoke(x) triggers another Invoke(x) in the same thread. 
            Since this might cause infinite recursion, it is not allowed. By default an exception is thrown.
            </summary>
        </member>
        <member name="M:OpenTap.Memorizer`3.CheckConstraints">
            <summary>
            Forces manual update of constraints.
            </summary>
        </member>
        <member name="M:OpenTap.Memorizer`3.InvalidateWhere(System.Func{`2,`1,System.Boolean})">
            <summary>
            Invalidate the keys where f returns true. This is being done while
            the memorizer is locked, so race conditions are avoided.
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:OpenTap.Utils.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps val to be between min and max, returning the result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.Identity``1(``0)">
            <summary>
            Returns arg.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.Noop">
            <summary> Do nothing. </summary>
        </member>
        <member name="M:OpenTap.Utils.FindExtreme``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Int32)">
            <summary>
            Returns the element for which selector returns the max value.
            if IEnumerable is empty, it returns default(T) multiplier gives the direction to search.
            </summary>
        </member>
        <member name="M:OpenTap.Utils.FindMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the element for which selector returns the max value.
            if IEnumerable is empty, it returns default(T).
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="C"></typeparam>
            <param name="ienumerable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.FindMin``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the element for which selector returns the minimum value.
            if IEnumerable is empty, it returns default(T).
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="C"></typeparam>
            <param name="ienumerable"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.SkipLastN``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Skips last N items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="n">n last items to skip.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.RemoveIf``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Removes items of source matching a given predicate.
            </summary>
            <param name="source"></param>
            <param name="pred"></param>
        </member>
        <member name="M:OpenTap.Utils.RemoveIf(System.Collections.IList,System.Predicate{System.Object})">
            <summary>
            Removes items of source matching a given predicate.
            </summary>
            <param name="source"></param>
            <param name="pred"></param>
        </member>
        <member name="M:OpenTap.Utils.FlattenHeirarchy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Boolean,System.Collections.Generic.List{``0})">
            <summary>
            Flattens a recursive IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lst"></param>
            <param name="lookup">Returns a list of the next level of elements. The returned value is allowed to be null and will in this case be treated like an empty list.</param>
            <param name="distinct">True if only one of each element should be inserted in the list.</param>
            <param name="buffer">Buffer to use instead of creating a new list to store the values. This can be used to avoid allocation.</param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends a range of elements to an IEnumerable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="newObjects"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.IndexWhen``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            First index where the result of predicate function is true.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="pred"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.IsLongerThan``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            Returns true if the source is longer than count elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a range of values to a list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lst"></param>
            <param name="values"></param>
        </member>
        <member name="M:OpenTap.Utils.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a HashSet from an IEnumerable.
            </summary>
        </member>
        <member name="M:OpenTap.Utils.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a HashSet from an IEnumerable, with a specialized comparer.
            </summary>
        </member>
        <member name="M:OpenTap.Utils.Except``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            The opposite of Where.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.SelectValues``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary> As 'Select' but skipping null values.
            Short hand for/more efficient version of 'Select(f).Where(x => x != null)' </summary>
            <param name="source"></param>
            <param name="f"></param>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.FirstNonDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary> As 'Select and FirstOrDefault' but skipping null values.
            Short hand for/more efficient version of 'Select(f).Where(x => x != null).FirstOrDefault()'
            </summary>
        </member>
        <member name="M:OpenTap.Utils.Delay(System.Int32,System.Action)">
            <summary>
            Calls function after a delay.
            </summary>
            <param name="ms"></param>
            <param name="function"></param>
        </member>
        <member name="M:OpenTap.Utils.MergeInto``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Merged a dictionary into another, overwriting colliding keys.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="srcDict"></param>
            <param name="dstDict"></param>
        </member>
        <member name="M:OpenTap.Utils.SplitPreserve(System.String,System.Char[])">
            <summary>
            Almost the same as string.Split, except it preserves split chars as 1 length strings. The process can always be reversed by String.Join("", result).
            </summary>
            <param name="str"></param>
            <param name="splitValues"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.ErrorOnce(OpenTap.TraceSource,System.Object,System.String,System.Object[])">
            <summary>
            Avoids spamming the log with errors that 
            should only be shown once by memorizing token and TraceSource. 
            </summary>
            <returns>True if an error was logged.</returns>
        </member>
        <member name="M:OpenTap.Utils.ReadFileLines(System.String)">
            <summary>
            Lazily reads all the lines of a file. Should only be read once.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.SetFlag``1(``0,``0,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <param name="flag"></param>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.NaturalCompare(System.String,System.String)">
            <summary>
            Natural compare takes numbers into account in comparison of strings. Normal sorted: [1,10,100,11,2,23,3] Natural sorted: [1,2,3,10,11,23,100]
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Utils.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary> Shuffle a list in place. </summary>
            <typeparam name="T"></typeparam>
            <param name="col"></param>
        </member>
        <member name="M:OpenTap.Utils.GetOrCreateValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary> Gets or creates a value based on the key. This is useful for caches. </summary>
        </member>
        <member name="M:OpenTap.Sequence.AsSingle``1(``0)">
            <summary> Turns item into a one element array, unless it is null.</summary>
        </member>
        <member name="M:OpenTap.Sequence.FirstOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            First or null, which for struct types returns a null value instead of a default(T) that FirstOrDefault does.
            </summary>
        </member>
        <member name="M:OpenTap.Sequence.DistinctLast``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Like distinct but keeps the last item. Returns List because we need to iterate until last element anyway.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.Sequence.AddExceptNull``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary> Adds elements that arent null to the list. </summary>
        </member>
        <member name="M:OpenTap.Sequence.Count(System.Collections.IEnumerable)">
            <summary>
            Count the number of elements in an enumerable.
            </summary>
        </member>
        <member name="M:OpenTap.Sequence.Pairwise``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            iterates lists and generates pairs of each list. Once the end is reached for one of the lists, execution stops. 
            </summary>
        </member>
        <member name="M:OpenTap.Time.FromSeconds(System.Double)">
            <summary>
            A TimeSpan from seconds that does not truncate at milliseconds.
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="T:OpenTap.MemoryMappedApi">
            <summary>
            for sharing data between processes.
            </summary>
        </member>
        <member name="F:OpenTap.MemoryMappedApi.Name">
            <summary>
            The name of the API, e.g the file where the data is shared.
            </summary>
        </member>
        <member name="M:OpenTap.MemoryMappedApi.#ctor(System.String)">
            <summary>
            Creates a memory mapped API.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:OpenTap.MemoryMappedApi.#ctor">
            <summary>
            Creates a MemoryMappedApi with a globally unique name.
            </summary>
        </member>
        <member name="M:OpenTap.MemoryMappedApi.Persist">
            <summary>
            Writes the data to the memory mapped file. 
            </summary>
        </member>
        <member name="M:OpenTap.MemoryMappedApi.WaitForHandover">
            <summary>
            Wait for the user id written in the file to increment, which means that it has been opened by another process.
            </summary>
        </member>
        <member name="M:OpenTap.MemoryMappedApi.WaitForHandoverAsync">
            <summary>
            Same as WaitForHandover but async.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.MemoryMappedApi.Write``1(``0)">
            <summary>
            Write a dataobject to the stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
        </member>
        <member name="M:OpenTap.MemoryMappedApi.Write``1(``0[])">
            <summary>
            Writes an array to the stream. The element type must be one of the supported ones.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
        </member>
        <member name="M:OpenTap.MemoryMappedApi.Write(System.String)">
            <summary>
            Write a string to the stream.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenTap.MemoryMappedApi.ReadRewind">
            <summary>
            Start reading from the beginning.
            </summary>
        </member>
        <member name="M:OpenTap.MemoryMappedApi.ReadStream">
            <summary>
            Get a stream pointing to the next object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTap.MemoryMappedApi.Read``1">
            <summary>
            Reads an object from the stream.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:OpenTap.MemoryMappedApi.Read">
            <summary>
            Read an object from the mapped file. It will then increment the read offset, so next time read is called the next item will be retrived.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenTap.TimeoutOperation">
            <summary> Invoke an action after a timeout, unless canceled. </summary>
        </member>
        <member name="F:OpenTap.TimeoutOperation.DefaultTimeout">
            <summary> Estimate of how long it takes for the user to loose patience.</summary>
        </member>
        <member name="M:OpenTap.TimeoutOperation.Create(System.TimeSpan,System.Action)">
            <summary> Creates a new TimeoutOperation with a specific timeout. </summary>
            <param name="timeout"></param>
            <param name="actionOnTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TimeoutOperation.Create(System.Action)">
            <summary> Creates a timeout operation with the default timeout. </summary>
            <param name="actionOnTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:OpenTap.TimeoutOperation.Cancel">
            <summary>
            Cancel invoking the action after the timeout.
            </summary>
        </member>
        <member name="M:OpenTap.ResultStoreExtensions.EnsurePositiveAverageDurationForStep(OpenTap.IResultStore,OpenTap.TraceSource,OpenTap.TestStepRun,System.Int32)">
            <summary>
            Ensures that we get a valid expected duration, which is a positive double number. Otherwise is null.
            </summary>
            <param name="store">The Result Store to be extended.</param>
            <param name="log">The Log where to write details in case of exceptions.</param>
            <param name="testStepRun">The Test Step Run to measure the average on.</param>
            <param name="estimatedWindowLength">The estimated window lenght.</param>
            <returns>Returs a nullable double, which whether is null in case no average is retrieved or a positive average duration.</returns>
        </member>
        <member name="M:OpenTap.ResultStoreExtensions.EnsurePositiveAverageDurationForPlan(OpenTap.IResultStore,OpenTap.TraceSource,OpenTap.TestPlanRun,System.Int32)">
            <summary>
            Ensures that we get a valid expected duration, which is a positive double number. Otherwise is null.
            </summary>
            <param name="store">The Result Store to be extended.</param>
            <param name="log">The Log where to write details in case of exceptions.</param>
            <param name="testPlanRun">The Test Plan Run to measure the average on.</param>
            <param name="estimatedWindowLength">The estimated window lenght.</param>
            <returns>Returs a nullable double, which whether is null in case no average is retrieved or a positive average duration.</returns>
        </member>
        <member name="T:OpenTap.ShortTimeSpan">
            <summary>
            Takes care of printing and parsing time spans like '1 s' or '15.3 ms'. Supports seconds, milliseconds, microseconds and nanoseconds.
            </summary>
        </member>
        <member name="M:OpenTap.ShortTimeSpan.ToString(System.Text.StringBuilder)">
            <summary> To avoid generating extra garbage during formatting, this can be used with StringBuilder. </summary>
            <param name="output"></param>
        </member>
        <member name="T:OpenTap.SubProcessHost">
            <summary>
            This is an abstraction for running child processes with support for elevation.
            It executes a test step (which can have child test steps) in a new process
            It supports subscribing to log events from the child process, and forwarding the logs directly.
            </summary>
        </member>
        <member name="T:OpenTap.SudoHelper">
            <summary>
            This class contains some basic helpers to authenticate using the 'sudo' program
            </summary>
        </member>
        <member name="T:ModuleInitializer">
            <summary>
            Used by the ModuleInit. All code inside the Initialize method is ran as soon as the assembly is loaded.
            </summary>
        </member>
        <member name="M:ModuleInitializer.Initialize">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="M:Tap.Shared.PathUtils.IterateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Similar to Directory.EnumerateFiles but will ignore any UnauthorizedAccessException or PathTooLongException that occur while walking the directory tree.
            </summary>
        </member>
        <member name="P:Tap.Shared.PathUtils.OpenTapDir">
            <summary> Get the location of OpenTAP (OpenTAP.dll) </summary>
        </member>
        <member name="M:Tap.Shared.PathUtils.DecendsFromOpenTapIgnore(System.String)">
            <summary>
            Checks if the relative path has any ".OpenTapIgnore" file in parent directory chain. Throws argument error eventually if input is an absolute path and no ".OpenTapIgnore" file is present in parent directory chain.
            </summary>
            <param name="location">Relative path of file</param>
            <returns>Whether an .OpenTapIgnore file exists in folders.</returns>
        </member>
    </members>
</doc>
